export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  uuid: any;
  jsonb: any;
  timestamptz: any;
  json: any;
  activity_type: any;
  numeric: any;
  geometry: any;
  geography: any;
  timestamp: any;
  parent_type: any;
  bpchar: any;
  float8: any;
  integration_type: any;
  message_subtopic_type: any;
  message_topic_type: any;
  message_user_type: any;
  message_source: any;
  interval: any;
};

export type Account_Sign_Out_Args = {
  refresh_token?: Maybe<Scalars['String']>;
};

/** Boolean expression to compare columns of type "activity_type". All fields are combined with logical 'AND'. */
export type Activity_Type_Comparison_Exp = {
  _eq?: Maybe<Scalars['activity_type']>;
  _gt?: Maybe<Scalars['activity_type']>;
  _gte?: Maybe<Scalars['activity_type']>;
  _in?: Maybe<Array<Scalars['activity_type']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['activity_type']>;
  _lte?: Maybe<Scalars['activity_type']>;
  _neq?: Maybe<Scalars['activity_type']>;
  _nin?: Maybe<Array<Scalars['activity_type']>>;
};

/** columns and relationships of "appraisal" */
export type Appraisal = {
  __typename?: 'appraisal';
  /** An array relationship */
  appraisal_activities: Array<Appraisal_Activities>;
  /** An aggregate relationship */
  appraisal_activities_aggregate: Appraisal_Activities_Aggregate;
  /** An array relationship */
  appraisal_expenses: Array<Appraisal_Expense>;
  /** An aggregate relationship */
  appraisal_expenses_aggregate: Appraisal_Expense_Aggregate;
  /** An array relationship */
  appraisal_fees: Array<Appraisal_Fee>;
  /** An aggregate relationship */
  appraisal_fees_aggregate: Appraisal_Fee_Aggregate;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_source_id: Scalars['Int'];
  appraisal_status_id: Scalars['Int'];
  assignee_role_ids?: Maybe<Scalars['jsonb']>;
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  assignee_user_account_names?: Maybe<Scalars['jsonb']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  client?: Maybe<Client>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at: Scalars['timestamptz'];
  due_date?: Maybe<Scalars['timestamptz']>;
  due_date_in?: Maybe<Scalars['String']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  /** An array relationship */
  files: Array<File>;
  /** An aggregate relationship */
  files_aggregate: File_Aggregate;
  id: Scalars['uuid'];
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  inspection_date_in?: Maybe<Scalars['String']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  notes?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  property: Property;
  property_id: Scalars['uuid'];
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  starred: Scalars['Boolean'];
  submitted_date?: Maybe<Scalars['timestamptz']>;
  total_commissions: Scalars['numeric'];
  total_expenses: Scalars['numeric'];
  total_fees: Scalars['numeric'];
  /** A computed field, executes function "unread_messages_count" */
  unread_messages_count?: Maybe<Scalars['Int']>;
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  /** An object relationship */
  user_account: User_Account;
  user_account_id: Scalars['uuid'];
  va_case_number?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAppraisal_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Activities_Order_By>>;
  where?: Maybe<Appraisal_Activities_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAppraisal_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Activities_Order_By>>;
  where?: Maybe<Appraisal_Activities_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAppraisal_ExpensesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Expense_Order_By>>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAppraisal_Expenses_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Expense_Order_By>>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAppraisal_FeesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Fee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Fee_Order_By>>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAppraisal_Fees_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Fee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Fee_Order_By>>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAssignee_Role_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAssignee_User_Account_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal" */
export type AppraisalAssignee_User_Account_NamesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal" */
export type AppraisalContact_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal" */
export type AppraisalFilesArgs = {
  distinct_on?: Maybe<Array<File_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<File_Order_By>>;
  where?: Maybe<File_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalFiles_AggregateArgs = {
  distinct_on?: Maybe<Array<File_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<File_Order_By>>;
  where?: Maybe<File_Bool_Exp>;
};

/** columns and relationships of "appraisal" */
export type AppraisalResidential_Form_Type_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_Activities = {
  __typename?: 'appraisal_activities';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  appraisal_status?: Maybe<Scalars['String']>;
  assignee_ids?: Maybe<Scalars['jsonb']>;
  assignees?: Maybe<Scalars['jsonb']>;
  changes?: Maybe<Scalars['jsonb']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contacts?: Maybe<Scalars['json']>;
  dates?: Maybe<Scalars['jsonb']>;
  fees?: Maybe<Scalars['jsonb']>;
  filename?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_ActivitiesAssignee_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_ActivitiesAssigneesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_ActivitiesChangesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_ActivitiesContactsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_ActivitiesDatesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_ActivitiesFeesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_activities" */
export type Appraisal_ActivitiesNotesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "appraisal_activities" */
export type Appraisal_Activities_Aggregate = {
  __typename?: 'appraisal_activities_aggregate';
  aggregate?: Maybe<Appraisal_Activities_Aggregate_Fields>;
  nodes: Array<Appraisal_Activities>;
};

/** aggregate fields of "appraisal_activities" */
export type Appraisal_Activities_Aggregate_Fields = {
  __typename?: 'appraisal_activities_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Activities_Max_Fields>;
  min?: Maybe<Appraisal_Activities_Min_Fields>;
};

/** aggregate fields of "appraisal_activities" */
export type Appraisal_Activities_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Activities_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "appraisal_activities" */
export type Appraisal_Activities_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Appraisal_Activities_Max_Order_By>;
  min?: Maybe<Appraisal_Activities_Min_Order_By>;
};

/** Boolean expression to filter rows from the table "appraisal_activities". All fields are combined with a logical 'AND'. */
export type Appraisal_Activities_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Activities_Bool_Exp>>;
  _not?: Maybe<Appraisal_Activities_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Activities_Bool_Exp>>;
  activity?: Maybe<String_Comparison_Exp>;
  activity_id?: Maybe<Uuid_Comparison_Exp>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  appraisal_status?: Maybe<String_Comparison_Exp>;
  assignee_ids?: Maybe<Jsonb_Comparison_Exp>;
  assignees?: Maybe<Jsonb_Comparison_Exp>;
  changes?: Maybe<Jsonb_Comparison_Exp>;
  commit_timestamp?: Maybe<Timestamptz_Comparison_Exp>;
  contacts?: Maybe<Json_Comparison_Exp>;
  dates?: Maybe<Jsonb_Comparison_Exp>;
  fees?: Maybe<Jsonb_Comparison_Exp>;
  filename?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<Jsonb_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  timestamp_group_by?: Maybe<Timestamptz_Comparison_Exp>;
  type?: Maybe<Activity_Type_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_name?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisal_Activities_Max_Fields = {
  __typename?: 'appraisal_activities_max_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  appraisal_status?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  filename?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "appraisal_activities" */
export type Appraisal_Activities_Max_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_id?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  filename?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Appraisal_Activities_Min_Fields = {
  __typename?: 'appraisal_activities_min_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  appraisal_status?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  filename?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "appraisal_activities" */
export type Appraisal_Activities_Min_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_id?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  filename?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "appraisal_activities". */
export type Appraisal_Activities_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_id?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  assignee_ids?: Maybe<Order_By>;
  assignees?: Maybe<Order_By>;
  changes?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  contacts?: Maybe<Order_By>;
  dates?: Maybe<Order_By>;
  fees?: Maybe<Order_By>;
  filename?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** select columns of table "appraisal_activities" */
export enum Appraisal_Activities_Select_Column {
  /** column name */
  Activity = 'activity',
  /** column name */
  ActivityId = 'activity_id',
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  AppraisalStatus = 'appraisal_status',
  /** column name */
  AssigneeIds = 'assignee_ids',
  /** column name */
  Assignees = 'assignees',
  /** column name */
  Changes = 'changes',
  /** column name */
  CommitTimestamp = 'commit_timestamp',
  /** column name */
  Contacts = 'contacts',
  /** column name */
  Dates = 'dates',
  /** column name */
  Fees = 'fees',
  /** column name */
  Filename = 'filename',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  TimestampGroupBy = 'timestamp_group_by',
  /** column name */
  Type = 'type',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  UserAccountName = 'user_account_name',
}

/** Streaming cursor of the table "appraisal_activities" */
export type Appraisal_Activities_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Activities_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Activities_Stream_Cursor_Value_Input = {
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  appraisal_status?: Maybe<Scalars['String']>;
  assignee_ids?: Maybe<Scalars['jsonb']>;
  assignees?: Maybe<Scalars['jsonb']>;
  changes?: Maybe<Scalars['jsonb']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contacts?: Maybe<Scalars['json']>;
  dates?: Maybe<Scalars['jsonb']>;
  fees?: Maybe<Scalars['jsonb']>;
  filename?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** aggregated selection of "appraisal" */
export type Appraisal_Aggregate = {
  __typename?: 'appraisal_aggregate';
  aggregate?: Maybe<Appraisal_Aggregate_Fields>;
  nodes: Array<Appraisal>;
};

/** aggregate fields of "appraisal" */
export type Appraisal_Aggregate_Fields = {
  __typename?: 'appraisal_aggregate_fields';
  avg?: Maybe<Appraisal_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Max_Fields>;
  min?: Maybe<Appraisal_Min_Fields>;
  stddev?: Maybe<Appraisal_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Variance_Fields>;
};

/** aggregate fields of "appraisal" */
export type Appraisal_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "appraisal" */
export type Appraisal_Aggregate_Order_By = {
  avg?: Maybe<Appraisal_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Appraisal_Max_Order_By>;
  min?: Maybe<Appraisal_Min_Order_By>;
  stddev?: Maybe<Appraisal_Stddev_Order_By>;
  stddev_pop?: Maybe<Appraisal_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Appraisal_Stddev_Samp_Order_By>;
  sum?: Maybe<Appraisal_Sum_Order_By>;
  var_pop?: Maybe<Appraisal_Var_Pop_Order_By>;
  var_samp?: Maybe<Appraisal_Var_Samp_Order_By>;
  variance?: Maybe<Appraisal_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Appraisal_Append_Input = {
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
};

/** input type for inserting array relation for remote table "appraisal" */
export type Appraisal_Arr_Rel_Insert_Input = {
  data: Array<Appraisal_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Appraisal_On_Conflict>;
};

/** aggregate avg on columns */
export type Appraisal_Avg_Fields = {
  __typename?: 'appraisal_avg_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_source_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_commissions?: Maybe<Scalars['Float']>;
  total_expenses?: Maybe<Scalars['Float']>;
  total_fees?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "appraisal" */
export type Appraisal_Avg_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "appraisal". All fields are combined with a logical 'AND'. */
export type Appraisal_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Bool_Exp>>;
  _not?: Maybe<Appraisal_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Bool_Exp>>;
  appraisal_activities?: Maybe<Appraisal_Activities_Bool_Exp>;
  appraisal_expenses?: Maybe<Appraisal_Expense_Bool_Exp>;
  appraisal_fees?: Maybe<Appraisal_Fee_Bool_Exp>;
  appraisal_file_number?: Maybe<String_Comparison_Exp>;
  appraisal_priority_id?: Maybe<Int_Comparison_Exp>;
  appraisal_purpose_id?: Maybe<Int_Comparison_Exp>;
  appraisal_source_id?: Maybe<Int_Comparison_Exp>;
  appraisal_status_id?: Maybe<Int_Comparison_Exp>;
  assignee_role_ids?: Maybe<Jsonb_Comparison_Exp>;
  assignee_user_account_ids?: Maybe<Jsonb_Comparison_Exp>;
  assignee_user_account_names?: Maybe<Jsonb_Comparison_Exp>;
  canceled_date?: Maybe<Timestamptz_Comparison_Exp>;
  client?: Maybe<Client_Bool_Exp>;
  client_file_number?: Maybe<String_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  client_loan_number?: Maybe<String_Comparison_Exp>;
  completed_date?: Maybe<Timestamptz_Comparison_Exp>;
  contact_ids?: Maybe<Jsonb_Comparison_Exp>;
  contract_value?: Maybe<Numeric_Comparison_Exp>;
  cost_approach_value?: Maybe<Numeric_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  due_date?: Maybe<Timestamptz_Comparison_Exp>;
  due_date_in?: Maybe<String_Comparison_Exp>;
  engagement_date?: Maybe<Timestamptz_Comparison_Exp>;
  fha_case_number?: Maybe<String_Comparison_Exp>;
  files?: Maybe<File_Bool_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  income_approach_value?: Maybe<Numeric_Comparison_Exp>;
  inspection_date?: Maybe<Timestamptz_Comparison_Exp>;
  inspection_date_in?: Maybe<String_Comparison_Exp>;
  invoice_id?: Maybe<Uuid_Comparison_Exp>;
  loan_type_id?: Maybe<Int_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  on_hold_date?: Maybe<Timestamptz_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  paid_date?: Maybe<Timestamptz_Comparison_Exp>;
  paid_fee?: Maybe<Numeric_Comparison_Exp>;
  property?: Maybe<Property_Bool_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quote_accepted_date?: Maybe<Timestamptz_Comparison_Exp>;
  quote_declined_date?: Maybe<Timestamptz_Comparison_Exp>;
  quote_fee?: Maybe<Numeric_Comparison_Exp>;
  quote_made_date?: Maybe<Timestamptz_Comparison_Exp>;
  report_fee?: Maybe<Numeric_Comparison_Exp>;
  report_type_id?: Maybe<Int_Comparison_Exp>;
  residential_form_type_ids?: Maybe<Jsonb_Comparison_Exp>;
  reviewed_date?: Maybe<Timestamptz_Comparison_Exp>;
  revision_request_date?: Maybe<Timestamptz_Comparison_Exp>;
  sales_approach_value?: Maybe<Numeric_Comparison_Exp>;
  starred?: Maybe<Boolean_Comparison_Exp>;
  submitted_date?: Maybe<Timestamptz_Comparison_Exp>;
  total_commissions?: Maybe<Numeric_Comparison_Exp>;
  total_expenses?: Maybe<Numeric_Comparison_Exp>;
  total_fees?: Maybe<Numeric_Comparison_Exp>;
  unread_messages_count?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  usda_case_number?: Maybe<String_Comparison_Exp>;
  user_account?: Maybe<User_Account_Bool_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  va_case_number?: Maybe<String_Comparison_Exp>;
};

/** columns and relationships of "appraisal_commission" */
export type Appraisal_Commission = {
  __typename?: 'appraisal_commission';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id: Scalars['Int'];
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  net_expenses: Scalars['Boolean'];
  organization_id: Scalars['uuid'];
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity: Scalars['Int'];
  rate: Scalars['numeric'];
  rate_type_id: Scalars['Int'];
  template: Scalars['Boolean'];
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default: Scalars['Boolean'];
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount: Scalars['numeric'];
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id: Scalars['uuid'];
};

/** columns and relationships of "appraisal_commission" */
export type Appraisal_CommissionTemplate_Residential_Form_Type_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "appraisal_commission" */
export type Appraisal_Commission_Aggregate = {
  __typename?: 'appraisal_commission_aggregate';
  aggregate?: Maybe<Appraisal_Commission_Aggregate_Fields>;
  nodes: Array<Appraisal_Commission>;
};

/** aggregate fields of "appraisal_commission" */
export type Appraisal_Commission_Aggregate_Fields = {
  __typename?: 'appraisal_commission_aggregate_fields';
  avg?: Maybe<Appraisal_Commission_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Commission_Max_Fields>;
  min?: Maybe<Appraisal_Commission_Min_Fields>;
  stddev?: Maybe<Appraisal_Commission_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Commission_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Commission_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Commission_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Commission_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Commission_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Commission_Variance_Fields>;
};

/** aggregate fields of "appraisal_commission" */
export type Appraisal_Commission_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Commission_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "appraisal_commission" */
export type Appraisal_Commission_Aggregate_Order_By = {
  avg?: Maybe<Appraisal_Commission_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Appraisal_Commission_Max_Order_By>;
  min?: Maybe<Appraisal_Commission_Min_Order_By>;
  stddev?: Maybe<Appraisal_Commission_Stddev_Order_By>;
  stddev_pop?: Maybe<Appraisal_Commission_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Appraisal_Commission_Stddev_Samp_Order_By>;
  sum?: Maybe<Appraisal_Commission_Sum_Order_By>;
  var_pop?: Maybe<Appraisal_Commission_Var_Pop_Order_By>;
  var_samp?: Maybe<Appraisal_Commission_Var_Samp_Order_By>;
  variance?: Maybe<Appraisal_Commission_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Appraisal_Commission_Append_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
};

/** input type for inserting array relation for remote table "appraisal_commission" */
export type Appraisal_Commission_Arr_Rel_Insert_Input = {
  data: Array<Appraisal_Commission_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Appraisal_Commission_On_Conflict>;
};

/** aggregate avg on columns */
export type Appraisal_Commission_Avg_Fields = {
  __typename?: 'appraisal_commission_avg_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Avg_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "appraisal_commission". All fields are combined with a logical 'AND'. */
export type Appraisal_Commission_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Commission_Bool_Exp>>;
  _not?: Maybe<Appraisal_Commission_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Commission_Bool_Exp>>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  assignee_role_id?: Maybe<Int_Comparison_Exp>;
  assignee_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  net_expenses?: Maybe<Boolean_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  paid_date?: Maybe<Timestamp_Comparison_Exp>;
  quantity?: Maybe<Int_Comparison_Exp>;
  rate?: Maybe<Numeric_Comparison_Exp>;
  rate_type_id?: Maybe<Int_Comparison_Exp>;
  template?: Maybe<Boolean_Comparison_Exp>;
  template_commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_default?: Maybe<Boolean_Comparison_Exp>;
  template_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_residential_form_type_ids?: Maybe<Jsonb_Comparison_Exp>;
  template_residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  total_amount?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "appraisal_commission" */
export enum Appraisal_Commission_Constraint {
  /** unique or primary key constraint on columns "id" */
  AppraisalCommissionPkey = 'appraisal_commission_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Appraisal_Commission_Delete_At_Path_Input = {
  template_residential_form_type_ids?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Appraisal_Commission_Delete_Elem_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Appraisal_Commission_Delete_Key_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['String']>;
};

/** input type for incrementing numeric columns in table "appraisal_commission" */
export type Appraisal_Commission_Inc_Input = {
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "appraisal_commission" */
export type Appraisal_Commission_Insert_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  net_expenses?: Maybe<Scalars['Boolean']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Appraisal_Commission_Max_Fields = {
  __typename?: 'appraisal_commission_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Max_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_role_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Appraisal_Commission_Min_Fields = {
  __typename?: 'appraisal_commission_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Min_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_role_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "appraisal_commission" */
export type Appraisal_Commission_Mutation_Response = {
  __typename?: 'appraisal_commission_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Appraisal_Commission>;
};

/** on_conflict condition type for table "appraisal_commission" */
export type Appraisal_Commission_On_Conflict = {
  constraint: Appraisal_Commission_Constraint;
  update_columns: Array<Appraisal_Commission_Update_Column>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

/** Ordering options when selecting data from "appraisal_commission". */
export type Appraisal_Commission_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_role_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  net_expenses?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_default?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_form_type_ids?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: appraisal_commission */
export type Appraisal_Commission_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Appraisal_Commission_Prepend_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "appraisal_commission" */
export enum Appraisal_Commission_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  AssigneeRoleId = 'assignee_role_id',
  /** column name */
  AssigneeUserAccountId = 'assignee_user_account_id',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NetExpenses = 'net_expenses',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PaidDate = 'paid_date',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
  /** column name */
  Template = 'template',
  /** column name */
  TemplateCommercialPropertyTypeId = 'template_commercial_property_type_id',
  /** column name */
  TemplateDefault = 'template_default',
  /** column name */
  TemplatePropertyTypeId = 'template_property_type_id',
  /** column name */
  TemplateResidentialFormTypeIds = 'template_residential_form_type_ids',
  /** column name */
  TemplateResidentialOwnershipTypeId = 'template_residential_ownership_type_id',
  /** column name */
  TotalAmount = 'total_amount',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "appraisal_commission" */
export type Appraisal_Commission_Set_Input = {
  net_expenses?: Maybe<Scalars['Boolean']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Appraisal_Commission_Stddev_Fields = {
  __typename?: 'appraisal_commission_stddev_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Stddev_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Commission_Stddev_Pop_Fields = {
  __typename?: 'appraisal_commission_stddev_pop_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Stddev_Pop_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Commission_Stddev_Samp_Fields = {
  __typename?: 'appraisal_commission_stddev_samp_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Stddev_Samp_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** Streaming cursor of the table "appraisal_commission" */
export type Appraisal_Commission_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Commission_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Commission_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  net_expenses?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Appraisal_Commission_Sum_Fields = {
  __typename?: 'appraisal_commission_sum_fields';
  assignee_role_id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Sum_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** columns and relationships of "appraisal_commission_templates" */
export type Appraisal_Commission_Templates = {
  __typename?: 'appraisal_commission_templates';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  net_expenses?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "appraisal_commission_templates" */
export type Appraisal_Commission_TemplatesTemplate_Residential_Form_Type_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "appraisal_commission_templates" */
export type Appraisal_Commission_Templates_Aggregate = {
  __typename?: 'appraisal_commission_templates_aggregate';
  aggregate?: Maybe<Appraisal_Commission_Templates_Aggregate_Fields>;
  nodes: Array<Appraisal_Commission_Templates>;
};

/** aggregate fields of "appraisal_commission_templates" */
export type Appraisal_Commission_Templates_Aggregate_Fields = {
  __typename?: 'appraisal_commission_templates_aggregate_fields';
  avg?: Maybe<Appraisal_Commission_Templates_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Commission_Templates_Max_Fields>;
  min?: Maybe<Appraisal_Commission_Templates_Min_Fields>;
  stddev?: Maybe<Appraisal_Commission_Templates_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Commission_Templates_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Commission_Templates_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Commission_Templates_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Commission_Templates_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Commission_Templates_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Commission_Templates_Variance_Fields>;
};

/** aggregate fields of "appraisal_commission_templates" */
export type Appraisal_Commission_Templates_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Commission_Templates_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Appraisal_Commission_Templates_Avg_Fields = {
  __typename?: 'appraisal_commission_templates_avg_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/**
 * Boolean expression to filter rows from the table
 * "appraisal_commission_templates". All fields are combined with a logical 'AND'.
 */
export type Appraisal_Commission_Templates_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Commission_Templates_Bool_Exp>>;
  _not?: Maybe<Appraisal_Commission_Templates_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Commission_Templates_Bool_Exp>>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  assignee_role_id?: Maybe<Int_Comparison_Exp>;
  assignee_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  net_expenses?: Maybe<Boolean_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  paid_date?: Maybe<Timestamp_Comparison_Exp>;
  quantity?: Maybe<Int_Comparison_Exp>;
  rate?: Maybe<Numeric_Comparison_Exp>;
  rate_type_id?: Maybe<Int_Comparison_Exp>;
  template?: Maybe<Boolean_Comparison_Exp>;
  template_commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_default?: Maybe<Boolean_Comparison_Exp>;
  template_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_residential_form_type_ids?: Maybe<Jsonb_Comparison_Exp>;
  template_residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  total_amount?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisal_Commission_Templates_Max_Fields = {
  __typename?: 'appraisal_commission_templates_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Appraisal_Commission_Templates_Min_Fields = {
  __typename?: 'appraisal_commission_templates_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** Ordering options when selecting data from "appraisal_commission_templates". */
export type Appraisal_Commission_Templates_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_role_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  net_expenses?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_default?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_form_type_ids?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** select columns of table "appraisal_commission_templates" */
export enum Appraisal_Commission_Templates_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  AssigneeRoleId = 'assignee_role_id',
  /** column name */
  AssigneeUserAccountId = 'assignee_user_account_id',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NetExpenses = 'net_expenses',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PaidDate = 'paid_date',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
  /** column name */
  Template = 'template',
  /** column name */
  TemplateCommercialPropertyTypeId = 'template_commercial_property_type_id',
  /** column name */
  TemplateDefault = 'template_default',
  /** column name */
  TemplatePropertyTypeId = 'template_property_type_id',
  /** column name */
  TemplateResidentialFormTypeIds = 'template_residential_form_type_ids',
  /** column name */
  TemplateResidentialOwnershipTypeId = 'template_residential_ownership_type_id',
  /** column name */
  TotalAmount = 'total_amount',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** aggregate stddev on columns */
export type Appraisal_Commission_Templates_Stddev_Fields = {
  __typename?: 'appraisal_commission_templates_stddev_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Commission_Templates_Stddev_Pop_Fields = {
  __typename?: 'appraisal_commission_templates_stddev_pop_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Commission_Templates_Stddev_Samp_Fields = {
  __typename?: 'appraisal_commission_templates_stddev_samp_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "appraisal_commission_templates" */
export type Appraisal_Commission_Templates_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Commission_Templates_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Commission_Templates_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  net_expenses?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Appraisal_Commission_Templates_Sum_Fields = {
  __typename?: 'appraisal_commission_templates_sum_fields';
  assignee_role_id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
};

/** aggregate var_pop on columns */
export type Appraisal_Commission_Templates_Var_Pop_Fields = {
  __typename?: 'appraisal_commission_templates_var_pop_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Appraisal_Commission_Templates_Var_Samp_Fields = {
  __typename?: 'appraisal_commission_templates_var_samp_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Appraisal_Commission_Templates_Variance_Fields = {
  __typename?: 'appraisal_commission_templates_variance_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** update columns of table "appraisal_commission" */
export enum Appraisal_Commission_Update_Column {
  /** column name */
  NetExpenses = 'net_expenses',
  /** column name */
  PaidDate = 'paid_date',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
  /** column name */
  TemplateCommercialPropertyTypeId = 'template_commercial_property_type_id',
  /** column name */
  TemplateDefault = 'template_default',
  /** column name */
  TemplatePropertyTypeId = 'template_property_type_id',
  /** column name */
  TemplateResidentialFormTypeIds = 'template_residential_form_type_ids',
  /** column name */
  TemplateResidentialOwnershipTypeId = 'template_residential_ownership_type_id',
}

export type Appraisal_Commission_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Appraisal_Commission_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Appraisal_Commission_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Appraisal_Commission_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Appraisal_Commission_Delete_Key_Input>;
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Appraisal_Commission_Inc_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Appraisal_Commission_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Appraisal_Commission_Set_Input>;
  where: Appraisal_Commission_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Appraisal_Commission_Var_Pop_Fields = {
  __typename?: 'appraisal_commission_var_pop_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Var_Pop_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Appraisal_Commission_Var_Samp_Fields = {
  __typename?: 'appraisal_commission_var_samp_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Var_Samp_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Appraisal_Commission_Variance_Fields = {
  __typename?: 'appraisal_commission_variance_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "appraisal_commission" */
export type Appraisal_Commission_Variance_Order_By = {
  assignee_role_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** columns and relationships of "appraisal_commissions" */
export type Appraisal_Commissions = {
  __typename?: 'appraisal_commissions';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_full_name?: Maybe<Scalars['String']>;
  assignee_role?: Maybe<Scalars['String']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  net_expenses?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type?: Maybe<Scalars['String']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "appraisal_commissions" */
export type Appraisal_CommissionsTemplate_Residential_Form_Type_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "appraisal_commissions" */
export type Appraisal_Commissions_Aggregate = {
  __typename?: 'appraisal_commissions_aggregate';
  aggregate?: Maybe<Appraisal_Commissions_Aggregate_Fields>;
  nodes: Array<Appraisal_Commissions>;
};

/** aggregate fields of "appraisal_commissions" */
export type Appraisal_Commissions_Aggregate_Fields = {
  __typename?: 'appraisal_commissions_aggregate_fields';
  avg?: Maybe<Appraisal_Commissions_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Commissions_Max_Fields>;
  min?: Maybe<Appraisal_Commissions_Min_Fields>;
  stddev?: Maybe<Appraisal_Commissions_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Commissions_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Commissions_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Commissions_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Commissions_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Commissions_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Commissions_Variance_Fields>;
};

/** aggregate fields of "appraisal_commissions" */
export type Appraisal_Commissions_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Commissions_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Appraisal_Commissions_Avg_Fields = {
  __typename?: 'appraisal_commissions_avg_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "appraisal_commissions". All fields are combined with a logical 'AND'. */
export type Appraisal_Commissions_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Commissions_Bool_Exp>>;
  _not?: Maybe<Appraisal_Commissions_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Commissions_Bool_Exp>>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  assignee_full_name?: Maybe<String_Comparison_Exp>;
  assignee_role?: Maybe<String_Comparison_Exp>;
  assignee_role_id?: Maybe<Int_Comparison_Exp>;
  assignee_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  net_expenses?: Maybe<Boolean_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  paid_date?: Maybe<Timestamp_Comparison_Exp>;
  quantity?: Maybe<Int_Comparison_Exp>;
  rate?: Maybe<Numeric_Comparison_Exp>;
  rate_type?: Maybe<String_Comparison_Exp>;
  rate_type_id?: Maybe<Int_Comparison_Exp>;
  template?: Maybe<Boolean_Comparison_Exp>;
  template_commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_default?: Maybe<Boolean_Comparison_Exp>;
  template_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_residential_form_type_ids?: Maybe<Jsonb_Comparison_Exp>;
  template_residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  total_amount?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisal_Commissions_Max_Fields = {
  __typename?: 'appraisal_commissions_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_full_name?: Maybe<Scalars['String']>;
  assignee_role?: Maybe<Scalars['String']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type?: Maybe<Scalars['String']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Appraisal_Commissions_Min_Fields = {
  __typename?: 'appraisal_commissions_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_full_name?: Maybe<Scalars['String']>;
  assignee_role?: Maybe<Scalars['String']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type?: Maybe<Scalars['String']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** Ordering options when selecting data from "appraisal_commissions". */
export type Appraisal_Commissions_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_full_name?: Maybe<Order_By>;
  assignee_role?: Maybe<Order_By>;
  assignee_role_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  net_expenses?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  template?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_default?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_form_type_ids?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** select columns of table "appraisal_commissions" */
export enum Appraisal_Commissions_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  AssigneeFullName = 'assignee_full_name',
  /** column name */
  AssigneeRole = 'assignee_role',
  /** column name */
  AssigneeRoleId = 'assignee_role_id',
  /** column name */
  AssigneeUserAccountId = 'assignee_user_account_id',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  NetExpenses = 'net_expenses',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PaidDate = 'paid_date',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateType = 'rate_type',
  /** column name */
  RateTypeId = 'rate_type_id',
  /** column name */
  Template = 'template',
  /** column name */
  TemplateCommercialPropertyTypeId = 'template_commercial_property_type_id',
  /** column name */
  TemplateDefault = 'template_default',
  /** column name */
  TemplatePropertyTypeId = 'template_property_type_id',
  /** column name */
  TemplateResidentialFormTypeIds = 'template_residential_form_type_ids',
  /** column name */
  TemplateResidentialOwnershipTypeId = 'template_residential_ownership_type_id',
  /** column name */
  TotalAmount = 'total_amount',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** aggregate stddev on columns */
export type Appraisal_Commissions_Stddev_Fields = {
  __typename?: 'appraisal_commissions_stddev_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Commissions_Stddev_Pop_Fields = {
  __typename?: 'appraisal_commissions_stddev_pop_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Commissions_Stddev_Samp_Fields = {
  __typename?: 'appraisal_commissions_stddev_samp_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "appraisal_commissions" */
export type Appraisal_Commissions_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Commissions_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Commissions_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_full_name?: Maybe<Scalars['String']>;
  assignee_role?: Maybe<Scalars['String']>;
  assignee_role_id?: Maybe<Scalars['Int']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  net_expenses?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamp']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type?: Maybe<Scalars['String']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Appraisal_Commissions_Sum_Fields = {
  __typename?: 'appraisal_commissions_sum_fields';
  assignee_role_id?: Maybe<Scalars['Int']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
};

/** aggregate var_pop on columns */
export type Appraisal_Commissions_Var_Pop_Fields = {
  __typename?: 'appraisal_commissions_var_pop_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Appraisal_Commissions_Var_Samp_Fields = {
  __typename?: 'appraisal_commissions_var_samp_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Appraisal_Commissions_Variance_Fields = {
  __typename?: 'appraisal_commissions_variance_fields';
  assignee_role_id?: Maybe<Scalars['Float']>;
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** unique or primary key constraints on table "appraisal" */
export enum Appraisal_Constraint {
  /** unique or primary key constraint on columns "id" */
  AppraisalPkey = 'appraisal_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Appraisal_Delete_At_Path_Input = {
  assignee_user_account_ids?: Maybe<Array<Scalars['String']>>;
  contact_ids?: Maybe<Array<Scalars['String']>>;
  residential_form_type_ids?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Appraisal_Delete_Elem_Input = {
  assignee_user_account_ids?: Maybe<Scalars['Int']>;
  contact_ids?: Maybe<Scalars['Int']>;
  residential_form_type_ids?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Appraisal_Delete_Key_Input = {
  assignee_user_account_ids?: Maybe<Scalars['String']>;
  contact_ids?: Maybe<Scalars['String']>;
  residential_form_type_ids?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_expense" */
export type Appraisal_Expense = {
  __typename?: 'appraisal_expense';
  /** An object relationship */
  appraisal: Appraisal;
  appraisal_id: Scalars['uuid'];
  client_id: Scalars['uuid'];
  created_at: Scalars['timestamptz'];
  description: Scalars['String'];
  id: Scalars['uuid'];
  organization_id: Scalars['uuid'];
  quantity: Scalars['Int'];
  rate: Scalars['numeric'];
  rate_type_id: Scalars['Int'];
  total_amount: Scalars['numeric'];
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id: Scalars['uuid'];
};

/** aggregated selection of "appraisal_expense" */
export type Appraisal_Expense_Aggregate = {
  __typename?: 'appraisal_expense_aggregate';
  aggregate?: Maybe<Appraisal_Expense_Aggregate_Fields>;
  nodes: Array<Appraisal_Expense>;
};

/** aggregate fields of "appraisal_expense" */
export type Appraisal_Expense_Aggregate_Fields = {
  __typename?: 'appraisal_expense_aggregate_fields';
  avg?: Maybe<Appraisal_Expense_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Expense_Max_Fields>;
  min?: Maybe<Appraisal_Expense_Min_Fields>;
  stddev?: Maybe<Appraisal_Expense_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Expense_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Expense_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Expense_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Expense_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Expense_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Expense_Variance_Fields>;
};

/** aggregate fields of "appraisal_expense" */
export type Appraisal_Expense_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Expense_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "appraisal_expense" */
export type Appraisal_Expense_Aggregate_Order_By = {
  avg?: Maybe<Appraisal_Expense_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Appraisal_Expense_Max_Order_By>;
  min?: Maybe<Appraisal_Expense_Min_Order_By>;
  stddev?: Maybe<Appraisal_Expense_Stddev_Order_By>;
  stddev_pop?: Maybe<Appraisal_Expense_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Appraisal_Expense_Stddev_Samp_Order_By>;
  sum?: Maybe<Appraisal_Expense_Sum_Order_By>;
  var_pop?: Maybe<Appraisal_Expense_Var_Pop_Order_By>;
  var_samp?: Maybe<Appraisal_Expense_Var_Samp_Order_By>;
  variance?: Maybe<Appraisal_Expense_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "appraisal_expense" */
export type Appraisal_Expense_Arr_Rel_Insert_Input = {
  data: Array<Appraisal_Expense_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Appraisal_Expense_On_Conflict>;
};

/** aggregate avg on columns */
export type Appraisal_Expense_Avg_Fields = {
  __typename?: 'appraisal_expense_avg_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Avg_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "appraisal_expense". All fields are combined with a logical 'AND'. */
export type Appraisal_Expense_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Expense_Bool_Exp>>;
  _not?: Maybe<Appraisal_Expense_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Expense_Bool_Exp>>;
  appraisal?: Maybe<Appraisal_Bool_Exp>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  quantity?: Maybe<Int_Comparison_Exp>;
  rate?: Maybe<Numeric_Comparison_Exp>;
  rate_type_id?: Maybe<Int_Comparison_Exp>;
  total_amount?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "appraisal_expense" */
export enum Appraisal_Expense_Constraint {
  /** unique or primary key constraint on columns "id" */
  AppraisalExpensePkey = 'appraisal_expense_pkey',
}

/** input type for incrementing numeric columns in table "appraisal_expense" */
export type Appraisal_Expense_Inc_Input = {
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "appraisal_expense" */
export type Appraisal_Expense_Insert_Input = {
  appraisal?: Maybe<Appraisal_Obj_Rel_Insert_Input>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Appraisal_Expense_Max_Fields = {
  __typename?: 'appraisal_expense_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Max_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Appraisal_Expense_Min_Fields = {
  __typename?: 'appraisal_expense_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Min_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "appraisal_expense" */
export type Appraisal_Expense_Mutation_Response = {
  __typename?: 'appraisal_expense_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Appraisal_Expense>;
};

/** on_conflict condition type for table "appraisal_expense" */
export type Appraisal_Expense_On_Conflict = {
  constraint: Appraisal_Expense_Constraint;
  update_columns: Array<Appraisal_Expense_Update_Column>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

/** Ordering options when selecting data from "appraisal_expense". */
export type Appraisal_Expense_Order_By = {
  appraisal?: Maybe<Appraisal_Order_By>;
  appraisal_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: appraisal_expense */
export type Appraisal_Expense_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "appraisal_expense" */
export enum Appraisal_Expense_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
  /** column name */
  TotalAmount = 'total_amount',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "appraisal_expense" */
export type Appraisal_Expense_Set_Input = {
  description?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Appraisal_Expense_Stddev_Fields = {
  __typename?: 'appraisal_expense_stddev_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Stddev_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Expense_Stddev_Pop_Fields = {
  __typename?: 'appraisal_expense_stddev_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Stddev_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Expense_Stddev_Samp_Fields = {
  __typename?: 'appraisal_expense_stddev_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Stddev_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** Streaming cursor of the table "appraisal_expense" */
export type Appraisal_Expense_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Expense_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Expense_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Appraisal_Expense_Sum_Fields = {
  __typename?: 'appraisal_expense_sum_fields';
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Sum_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** update columns of table "appraisal_expense" */
export enum Appraisal_Expense_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
}

export type Appraisal_Expense_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Appraisal_Expense_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Appraisal_Expense_Set_Input>;
  where: Appraisal_Expense_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Appraisal_Expense_Var_Pop_Fields = {
  __typename?: 'appraisal_expense_var_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Var_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Appraisal_Expense_Var_Samp_Fields = {
  __typename?: 'appraisal_expense_var_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Var_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Appraisal_Expense_Variance_Fields = {
  __typename?: 'appraisal_expense_variance_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "appraisal_expense" */
export type Appraisal_Expense_Variance_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** columns and relationships of "appraisal_fee" */
export type Appraisal_Fee = {
  __typename?: 'appraisal_fee';
  /** An object relationship */
  appraisal: Appraisal;
  appraisal_id: Scalars['uuid'];
  client_id: Scalars['uuid'];
  created_at?: Maybe<Scalars['timestamptz']>;
  description: Scalars['String'];
  id: Scalars['uuid'];
  organization_id: Scalars['uuid'];
  quantity: Scalars['Int'];
  rate: Scalars['numeric'];
  rate_type_id: Scalars['Int'];
  total_amount: Scalars['numeric'];
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id: Scalars['uuid'];
};

/** aggregated selection of "appraisal_fee" */
export type Appraisal_Fee_Aggregate = {
  __typename?: 'appraisal_fee_aggregate';
  aggregate?: Maybe<Appraisal_Fee_Aggregate_Fields>;
  nodes: Array<Appraisal_Fee>;
};

/** aggregate fields of "appraisal_fee" */
export type Appraisal_Fee_Aggregate_Fields = {
  __typename?: 'appraisal_fee_aggregate_fields';
  avg?: Maybe<Appraisal_Fee_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Fee_Max_Fields>;
  min?: Maybe<Appraisal_Fee_Min_Fields>;
  stddev?: Maybe<Appraisal_Fee_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Fee_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Fee_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Fee_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Fee_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Fee_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Fee_Variance_Fields>;
};

/** aggregate fields of "appraisal_fee" */
export type Appraisal_Fee_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Fee_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "appraisal_fee" */
export type Appraisal_Fee_Aggregate_Order_By = {
  avg?: Maybe<Appraisal_Fee_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Appraisal_Fee_Max_Order_By>;
  min?: Maybe<Appraisal_Fee_Min_Order_By>;
  stddev?: Maybe<Appraisal_Fee_Stddev_Order_By>;
  stddev_pop?: Maybe<Appraisal_Fee_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Appraisal_Fee_Stddev_Samp_Order_By>;
  sum?: Maybe<Appraisal_Fee_Sum_Order_By>;
  var_pop?: Maybe<Appraisal_Fee_Var_Pop_Order_By>;
  var_samp?: Maybe<Appraisal_Fee_Var_Samp_Order_By>;
  variance?: Maybe<Appraisal_Fee_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "appraisal_fee" */
export type Appraisal_Fee_Arr_Rel_Insert_Input = {
  data: Array<Appraisal_Fee_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Appraisal_Fee_On_Conflict>;
};

/** aggregate avg on columns */
export type Appraisal_Fee_Avg_Fields = {
  __typename?: 'appraisal_fee_avg_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Avg_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "appraisal_fee". All fields are combined with a logical 'AND'. */
export type Appraisal_Fee_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Fee_Bool_Exp>>;
  _not?: Maybe<Appraisal_Fee_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Fee_Bool_Exp>>;
  appraisal?: Maybe<Appraisal_Bool_Exp>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  quantity?: Maybe<Int_Comparison_Exp>;
  rate?: Maybe<Numeric_Comparison_Exp>;
  rate_type_id?: Maybe<Int_Comparison_Exp>;
  total_amount?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "appraisal_fee" */
export enum Appraisal_Fee_Constraint {
  /** unique or primary key constraint on columns "id" */
  AppraisalFeePkey = 'appraisal_fee_pkey',
}

/** input type for incrementing numeric columns in table "appraisal_fee" */
export type Appraisal_Fee_Inc_Input = {
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "appraisal_fee" */
export type Appraisal_Fee_Insert_Input = {
  appraisal?: Maybe<Appraisal_Obj_Rel_Insert_Input>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Appraisal_Fee_Max_Fields = {
  __typename?: 'appraisal_fee_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Max_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Appraisal_Fee_Min_Fields = {
  __typename?: 'appraisal_fee_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Min_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "appraisal_fee" */
export type Appraisal_Fee_Mutation_Response = {
  __typename?: 'appraisal_fee_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Appraisal_Fee>;
};

/** on_conflict condition type for table "appraisal_fee" */
export type Appraisal_Fee_On_Conflict = {
  constraint: Appraisal_Fee_Constraint;
  update_columns: Array<Appraisal_Fee_Update_Column>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

/** Ordering options when selecting data from "appraisal_fee". */
export type Appraisal_Fee_Order_By = {
  appraisal?: Maybe<Appraisal_Order_By>;
  appraisal_id?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: appraisal_fee */
export type Appraisal_Fee_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "appraisal_fee" */
export enum Appraisal_Fee_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
  /** column name */
  TotalAmount = 'total_amount',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "appraisal_fee" */
export type Appraisal_Fee_Set_Input = {
  description?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Appraisal_Fee_Stddev_Fields = {
  __typename?: 'appraisal_fee_stddev_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Stddev_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Fee_Stddev_Pop_Fields = {
  __typename?: 'appraisal_fee_stddev_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Stddev_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Fee_Stddev_Samp_Fields = {
  __typename?: 'appraisal_fee_stddev_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Stddev_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** Streaming cursor of the table "appraisal_fee" */
export type Appraisal_Fee_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Fee_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Fee_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  client_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Appraisal_Fee_Sum_Fields = {
  __typename?: 'appraisal_fee_sum_fields';
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Sum_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** update columns of table "appraisal_fee" */
export enum Appraisal_Fee_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
}

export type Appraisal_Fee_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Appraisal_Fee_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Appraisal_Fee_Set_Input>;
  where: Appraisal_Fee_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Appraisal_Fee_Var_Pop_Fields = {
  __typename?: 'appraisal_fee_var_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Var_Pop_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Appraisal_Fee_Var_Samp_Fields = {
  __typename?: 'appraisal_fee_var_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Var_Samp_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Appraisal_Fee_Variance_Fields = {
  __typename?: 'appraisal_fee_variance_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "appraisal_fee" */
export type Appraisal_Fee_Variance_Order_By = {
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
};

/** input type for incrementing numeric columns in table "appraisal" */
export type Appraisal_Inc_Input = {
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "appraisal" */
export type Appraisal_Insert_Input = {
  appraisal_expenses?: Maybe<Appraisal_Expense_Arr_Rel_Insert_Input>;
  appraisal_fees?: Maybe<Appraisal_Fee_Arr_Rel_Insert_Input>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client?: Maybe<Client_Obj_Rel_Insert_Input>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  files?: Maybe<File_Arr_Rel_Insert_Input>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  notes?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property?: Maybe<Property_Obj_Rel_Insert_Input>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  starred?: Maybe<Scalars['Boolean']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account?: Maybe<User_Account_Obj_Rel_Insert_Input>;
  va_case_number?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Appraisal_Max_Fields = {
  __typename?: 'appraisal_max_fields';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_source_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  notes?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  total_commissions?: Maybe<Scalars['numeric']>;
  total_expenses?: Maybe<Scalars['numeric']>;
  total_fees?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  va_case_number?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "appraisal" */
export type Appraisal_Max_Order_By = {
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  canceled_date?: Maybe<Order_By>;
  client_file_number?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_loan_number?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  engagement_date?: Maybe<Order_By>;
  fha_case_number?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  inspection_date?: Maybe<Order_By>;
  invoice_id?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  on_hold_date?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_accepted_date?: Maybe<Order_By>;
  quote_declined_date?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  quote_made_date?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  reviewed_date?: Maybe<Order_By>;
  revision_request_date?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  submitted_date?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  usda_case_number?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  va_case_number?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Appraisal_Min_Fields = {
  __typename?: 'appraisal_min_fields';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_source_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  notes?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  total_commissions?: Maybe<Scalars['numeric']>;
  total_expenses?: Maybe<Scalars['numeric']>;
  total_fees?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  va_case_number?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "appraisal" */
export type Appraisal_Min_Order_By = {
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  canceled_date?: Maybe<Order_By>;
  client_file_number?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_loan_number?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  engagement_date?: Maybe<Order_By>;
  fha_case_number?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  inspection_date?: Maybe<Order_By>;
  invoice_id?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  on_hold_date?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_accepted_date?: Maybe<Order_By>;
  quote_declined_date?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  quote_made_date?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  reviewed_date?: Maybe<Order_By>;
  revision_request_date?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  submitted_date?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  usda_case_number?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  va_case_number?: Maybe<Order_By>;
};

/** response of any mutation on the table "appraisal" */
export type Appraisal_Mutation_Response = {
  __typename?: 'appraisal_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Appraisal>;
};

/** input type for inserting object relation for remote table "appraisal" */
export type Appraisal_Obj_Rel_Insert_Input = {
  data: Appraisal_Insert_Input;
  /** upsert condition */
  on_conflict?: Maybe<Appraisal_On_Conflict>;
};

/** on_conflict condition type for table "appraisal" */
export type Appraisal_On_Conflict = {
  constraint: Appraisal_Constraint;
  update_columns: Array<Appraisal_Update_Column>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** Ordering options when selecting data from "appraisal". */
export type Appraisal_Order_By = {
  appraisal_activities_aggregate?: Maybe<Appraisal_Activities_Aggregate_Order_By>;
  appraisal_expenses_aggregate?: Maybe<Appraisal_Expense_Aggregate_Order_By>;
  appraisal_fees_aggregate?: Maybe<Appraisal_Fee_Aggregate_Order_By>;
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  assignee_role_ids?: Maybe<Order_By>;
  assignee_user_account_ids?: Maybe<Order_By>;
  assignee_user_account_names?: Maybe<Order_By>;
  canceled_date?: Maybe<Order_By>;
  client?: Maybe<Client_Order_By>;
  client_file_number?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_loan_number?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  contact_ids?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  due_date_in?: Maybe<Order_By>;
  engagement_date?: Maybe<Order_By>;
  fha_case_number?: Maybe<Order_By>;
  files_aggregate?: Maybe<File_Aggregate_Order_By>;
  id?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  inspection_date?: Maybe<Order_By>;
  inspection_date_in?: Maybe<Order_By>;
  invoice_id?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  on_hold_date?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property?: Maybe<Property_Order_By>;
  property_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_accepted_date?: Maybe<Order_By>;
  quote_declined_date?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  quote_made_date?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_form_type_ids?: Maybe<Order_By>;
  reviewed_date?: Maybe<Order_By>;
  revision_request_date?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  starred?: Maybe<Order_By>;
  submitted_date?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
  unread_messages_count?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  usda_case_number?: Maybe<Order_By>;
  user_account?: Maybe<User_Account_Order_By>;
  user_account_id?: Maybe<Order_By>;
  va_case_number?: Maybe<Order_By>;
};

/** primary key columns input for table: appraisal */
export type Appraisal_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Appraisal_Prepend_Input = {
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
};

/** columns and relationships of "appraisal_priorities" */
export type Appraisal_Priorities = {
  __typename?: 'appraisal_priorities';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  priority?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "appraisal_priorities" */
export type Appraisal_Priorities_Aggregate = {
  __typename?: 'appraisal_priorities_aggregate';
  aggregate?: Maybe<Appraisal_Priorities_Aggregate_Fields>;
  nodes: Array<Appraisal_Priorities>;
};

/** aggregate fields of "appraisal_priorities" */
export type Appraisal_Priorities_Aggregate_Fields = {
  __typename?: 'appraisal_priorities_aggregate_fields';
  avg?: Maybe<Appraisal_Priorities_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Priorities_Max_Fields>;
  min?: Maybe<Appraisal_Priorities_Min_Fields>;
  stddev?: Maybe<Appraisal_Priorities_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Priorities_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Priorities_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Priorities_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Priorities_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Priorities_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Priorities_Variance_Fields>;
};

/** aggregate fields of "appraisal_priorities" */
export type Appraisal_Priorities_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Priorities_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Appraisal_Priorities_Avg_Fields = {
  __typename?: 'appraisal_priorities_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "appraisal_priorities". All fields are combined with a logical 'AND'. */
export type Appraisal_Priorities_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Priorities_Bool_Exp>>;
  _not?: Maybe<Appraisal_Priorities_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Priorities_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  priority?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisal_Priorities_Max_Fields = {
  __typename?: 'appraisal_priorities_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  priority?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Appraisal_Priorities_Min_Fields = {
  __typename?: 'appraisal_priorities_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  priority?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "appraisal_priorities". */
export type Appraisal_Priorities_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  priority?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "appraisal_priorities" */
export enum Appraisal_Priorities_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Priority = 'priority',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Appraisal_Priorities_Stddev_Fields = {
  __typename?: 'appraisal_priorities_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Priorities_Stddev_Pop_Fields = {
  __typename?: 'appraisal_priorities_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Priorities_Stddev_Samp_Fields = {
  __typename?: 'appraisal_priorities_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "appraisal_priorities" */
export type Appraisal_Priorities_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Priorities_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Priorities_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  priority?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Appraisal_Priorities_Sum_Fields = {
  __typename?: 'appraisal_priorities_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Appraisal_Priorities_Var_Pop_Fields = {
  __typename?: 'appraisal_priorities_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Appraisal_Priorities_Var_Samp_Fields = {
  __typename?: 'appraisal_priorities_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Appraisal_Priorities_Variance_Fields = {
  __typename?: 'appraisal_priorities_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "appraisal_purposes" */
export type Appraisal_Purposes = {
  __typename?: 'appraisal_purposes';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  purpose?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "appraisal_purposes" */
export type Appraisal_Purposes_Aggregate = {
  __typename?: 'appraisal_purposes_aggregate';
  aggregate?: Maybe<Appraisal_Purposes_Aggregate_Fields>;
  nodes: Array<Appraisal_Purposes>;
};

/** aggregate fields of "appraisal_purposes" */
export type Appraisal_Purposes_Aggregate_Fields = {
  __typename?: 'appraisal_purposes_aggregate_fields';
  avg?: Maybe<Appraisal_Purposes_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Purposes_Max_Fields>;
  min?: Maybe<Appraisal_Purposes_Min_Fields>;
  stddev?: Maybe<Appraisal_Purposes_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Purposes_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Purposes_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Purposes_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Purposes_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Purposes_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Purposes_Variance_Fields>;
};

/** aggregate fields of "appraisal_purposes" */
export type Appraisal_Purposes_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Purposes_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Appraisal_Purposes_Avg_Fields = {
  __typename?: 'appraisal_purposes_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "appraisal_purposes". All fields are combined with a logical 'AND'. */
export type Appraisal_Purposes_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Purposes_Bool_Exp>>;
  _not?: Maybe<Appraisal_Purposes_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Purposes_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  purpose?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisal_Purposes_Max_Fields = {
  __typename?: 'appraisal_purposes_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  purpose?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Appraisal_Purposes_Min_Fields = {
  __typename?: 'appraisal_purposes_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  purpose?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "appraisal_purposes". */
export type Appraisal_Purposes_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  purpose?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "appraisal_purposes" */
export enum Appraisal_Purposes_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Purpose = 'purpose',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Appraisal_Purposes_Stddev_Fields = {
  __typename?: 'appraisal_purposes_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Purposes_Stddev_Pop_Fields = {
  __typename?: 'appraisal_purposes_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Purposes_Stddev_Samp_Fields = {
  __typename?: 'appraisal_purposes_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "appraisal_purposes" */
export type Appraisal_Purposes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Purposes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Purposes_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  purpose?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Appraisal_Purposes_Sum_Fields = {
  __typename?: 'appraisal_purposes_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Appraisal_Purposes_Var_Pop_Fields = {
  __typename?: 'appraisal_purposes_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Appraisal_Purposes_Var_Samp_Fields = {
  __typename?: 'appraisal_purposes_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Appraisal_Purposes_Variance_Fields = {
  __typename?: 'appraisal_purposes_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** select columns of table "appraisal" */
export enum Appraisal_Select_Column {
  /** column name */
  AppraisalFileNumber = 'appraisal_file_number',
  /** column name */
  AppraisalPriorityId = 'appraisal_priority_id',
  /** column name */
  AppraisalPurposeId = 'appraisal_purpose_id',
  /** column name */
  AppraisalSourceId = 'appraisal_source_id',
  /** column name */
  AppraisalStatusId = 'appraisal_status_id',
  /** column name */
  AssigneeRoleIds = 'assignee_role_ids',
  /** column name */
  AssigneeUserAccountIds = 'assignee_user_account_ids',
  /** column name */
  AssigneeUserAccountNames = 'assignee_user_account_names',
  /** column name */
  CanceledDate = 'canceled_date',
  /** column name */
  ClientFileNumber = 'client_file_number',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ClientLoanNumber = 'client_loan_number',
  /** column name */
  CompletedDate = 'completed_date',
  /** column name */
  ContactIds = 'contact_ids',
  /** column name */
  ContractValue = 'contract_value',
  /** column name */
  CostApproachValue = 'cost_approach_value',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DueDate = 'due_date',
  /** column name */
  EngagementDate = 'engagement_date',
  /** column name */
  FhaCaseNumber = 'fha_case_number',
  /** column name */
  Id = 'id',
  /** column name */
  IncomeApproachValue = 'income_approach_value',
  /** column name */
  InspectionDate = 'inspection_date',
  /** column name */
  InvoiceId = 'invoice_id',
  /** column name */
  LoanTypeId = 'loan_type_id',
  /** column name */
  Notes = 'notes',
  /** column name */
  OnHoldDate = 'on_hold_date',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PaidDate = 'paid_date',
  /** column name */
  PaidFee = 'paid_fee',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QuoteAcceptedDate = 'quote_accepted_date',
  /** column name */
  QuoteDeclinedDate = 'quote_declined_date',
  /** column name */
  QuoteFee = 'quote_fee',
  /** column name */
  QuoteMadeDate = 'quote_made_date',
  /** column name */
  ReportFee = 'report_fee',
  /** column name */
  ReportTypeId = 'report_type_id',
  /** column name */
  ResidentialFormTypeIds = 'residential_form_type_ids',
  /** column name */
  ReviewedDate = 'reviewed_date',
  /** column name */
  RevisionRequestDate = 'revision_request_date',
  /** column name */
  SalesApproachValue = 'sales_approach_value',
  /** column name */
  Starred = 'starred',
  /** column name */
  SubmittedDate = 'submitted_date',
  /** column name */
  TotalCommissions = 'total_commissions',
  /** column name */
  TotalExpenses = 'total_expenses',
  /** column name */
  TotalFees = 'total_fees',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UsdaCaseNumber = 'usda_case_number',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VaCaseNumber = 'va_case_number',
}

/** input type for updating data in table "appraisal" */
export type Appraisal_Set_Input = {
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  notes?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  starred?: Maybe<Scalars['Boolean']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  usda_case_number?: Maybe<Scalars['String']>;
  va_case_number?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisal_sources" */
export type Appraisal_Sources = {
  __typename?: 'appraisal_sources';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  source?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "appraisal_sources" */
export type Appraisal_Sources_Aggregate = {
  __typename?: 'appraisal_sources_aggregate';
  aggregate?: Maybe<Appraisal_Sources_Aggregate_Fields>;
  nodes: Array<Appraisal_Sources>;
};

/** aggregate fields of "appraisal_sources" */
export type Appraisal_Sources_Aggregate_Fields = {
  __typename?: 'appraisal_sources_aggregate_fields';
  avg?: Maybe<Appraisal_Sources_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Sources_Max_Fields>;
  min?: Maybe<Appraisal_Sources_Min_Fields>;
  stddev?: Maybe<Appraisal_Sources_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Sources_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Sources_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Sources_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Sources_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Sources_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Sources_Variance_Fields>;
};

/** aggregate fields of "appraisal_sources" */
export type Appraisal_Sources_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Sources_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Appraisal_Sources_Avg_Fields = {
  __typename?: 'appraisal_sources_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "appraisal_sources". All fields are combined with a logical 'AND'. */
export type Appraisal_Sources_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Sources_Bool_Exp>>;
  _not?: Maybe<Appraisal_Sources_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Sources_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  source?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisal_Sources_Max_Fields = {
  __typename?: 'appraisal_sources_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  source?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Appraisal_Sources_Min_Fields = {
  __typename?: 'appraisal_sources_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  source?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "appraisal_sources". */
export type Appraisal_Sources_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  source?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "appraisal_sources" */
export enum Appraisal_Sources_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Source = 'source',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Appraisal_Sources_Stddev_Fields = {
  __typename?: 'appraisal_sources_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Sources_Stddev_Pop_Fields = {
  __typename?: 'appraisal_sources_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Sources_Stddev_Samp_Fields = {
  __typename?: 'appraisal_sources_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "appraisal_sources" */
export type Appraisal_Sources_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Sources_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Sources_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  source?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Appraisal_Sources_Sum_Fields = {
  __typename?: 'appraisal_sources_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Appraisal_Sources_Var_Pop_Fields = {
  __typename?: 'appraisal_sources_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Appraisal_Sources_Var_Samp_Fields = {
  __typename?: 'appraisal_sources_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Appraisal_Sources_Variance_Fields = {
  __typename?: 'appraisal_sources_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "appraisal_statuses" */
export type Appraisal_Statuses = {
  __typename?: 'appraisal_statuses';
  /** fetch data from the table: "appraisal" */
  appraisal: Array<Appraisal>;
  /** fetch aggregated fields from the table: "appraisal" */
  appraisal_aggregate: Appraisal_Aggregate;
  /** fetch data from the table: "appraisals" */
  appraisals: Array<Appraisals>;
  /** fetch aggregated fields from the table: "appraisals" */
  appraisals_aggregate: Appraisals_Aggregate;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "appraisal_statuses" */
export type Appraisal_StatusesAppraisalArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "appraisal_statuses" */
export type Appraisal_StatusesAppraisal_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "appraisal_statuses" */
export type Appraisal_StatusesAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

/** columns and relationships of "appraisal_statuses" */
export type Appraisal_StatusesAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

/** aggregated selection of "appraisal_statuses" */
export type Appraisal_Statuses_Aggregate = {
  __typename?: 'appraisal_statuses_aggregate';
  aggregate?: Maybe<Appraisal_Statuses_Aggregate_Fields>;
  nodes: Array<Appraisal_Statuses>;
};

/** aggregate fields of "appraisal_statuses" */
export type Appraisal_Statuses_Aggregate_Fields = {
  __typename?: 'appraisal_statuses_aggregate_fields';
  avg?: Maybe<Appraisal_Statuses_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisal_Statuses_Max_Fields>;
  min?: Maybe<Appraisal_Statuses_Min_Fields>;
  stddev?: Maybe<Appraisal_Statuses_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisal_Statuses_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisal_Statuses_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisal_Statuses_Sum_Fields>;
  var_pop?: Maybe<Appraisal_Statuses_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisal_Statuses_Var_Samp_Fields>;
  variance?: Maybe<Appraisal_Statuses_Variance_Fields>;
};

/** aggregate fields of "appraisal_statuses" */
export type Appraisal_Statuses_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisal_Statuses_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Appraisal_Statuses_Avg_Fields = {
  __typename?: 'appraisal_statuses_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "appraisal_statuses". All fields are combined with a logical 'AND'. */
export type Appraisal_Statuses_Bool_Exp = {
  _and?: Maybe<Array<Appraisal_Statuses_Bool_Exp>>;
  _not?: Maybe<Appraisal_Statuses_Bool_Exp>;
  _or?: Maybe<Array<Appraisal_Statuses_Bool_Exp>>;
  appraisal?: Maybe<Appraisal_Bool_Exp>;
  appraisals?: Maybe<Appraisals_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  status?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisal_Statuses_Max_Fields = {
  __typename?: 'appraisal_statuses_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Appraisal_Statuses_Min_Fields = {
  __typename?: 'appraisal_statuses_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "appraisal_statuses". */
export type Appraisal_Statuses_Order_By = {
  appraisal_aggregate?: Maybe<Appraisal_Aggregate_Order_By>;
  appraisals_aggregate?: Maybe<Appraisals_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  status?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "appraisal_statuses" */
export enum Appraisal_Statuses_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Status = 'status',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Appraisal_Statuses_Stddev_Fields = {
  __typename?: 'appraisal_statuses_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Statuses_Stddev_Pop_Fields = {
  __typename?: 'appraisal_statuses_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Statuses_Stddev_Samp_Fields = {
  __typename?: 'appraisal_statuses_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "appraisal_statuses" */
export type Appraisal_Statuses_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Statuses_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Statuses_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Appraisal_Statuses_Sum_Fields = {
  __typename?: 'appraisal_statuses_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Appraisal_Statuses_Var_Pop_Fields = {
  __typename?: 'appraisal_statuses_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Appraisal_Statuses_Var_Samp_Fields = {
  __typename?: 'appraisal_statuses_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Appraisal_Statuses_Variance_Fields = {
  __typename?: 'appraisal_statuses_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev on columns */
export type Appraisal_Stddev_Fields = {
  __typename?: 'appraisal_stddev_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_source_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_commissions?: Maybe<Scalars['Float']>;
  total_expenses?: Maybe<Scalars['Float']>;
  total_fees?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "appraisal" */
export type Appraisal_Stddev_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Appraisal_Stddev_Pop_Fields = {
  __typename?: 'appraisal_stddev_pop_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_source_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_commissions?: Maybe<Scalars['Float']>;
  total_expenses?: Maybe<Scalars['Float']>;
  total_fees?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "appraisal" */
export type Appraisal_Stddev_Pop_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Appraisal_Stddev_Samp_Fields = {
  __typename?: 'appraisal_stddev_samp_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_source_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_commissions?: Maybe<Scalars['Float']>;
  total_expenses?: Maybe<Scalars['Float']>;
  total_fees?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "appraisal" */
export type Appraisal_Stddev_Samp_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** Streaming cursor of the table "appraisal" */
export type Appraisal_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisal_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisal_Stream_Cursor_Value_Input = {
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_source_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  assignee_role_ids?: Maybe<Scalars['jsonb']>;
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  assignee_user_account_names?: Maybe<Scalars['jsonb']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  invoice_id?: Maybe<Scalars['uuid']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  notes?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  starred?: Maybe<Scalars['Boolean']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  total_commissions?: Maybe<Scalars['numeric']>;
  total_expenses?: Maybe<Scalars['numeric']>;
  total_fees?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  va_case_number?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Appraisal_Sum_Fields = {
  __typename?: 'appraisal_sum_fields';
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_source_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  total_commissions?: Maybe<Scalars['numeric']>;
  total_expenses?: Maybe<Scalars['numeric']>;
  total_fees?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "appraisal" */
export type Appraisal_Sum_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** update columns of table "appraisal" */
export enum Appraisal_Update_Column {
  /** column name */
  AppraisalFileNumber = 'appraisal_file_number',
  /** column name */
  AppraisalPriorityId = 'appraisal_priority_id',
  /** column name */
  AppraisalPurposeId = 'appraisal_purpose_id',
  /** column name */
  AppraisalStatusId = 'appraisal_status_id',
  /** column name */
  AssigneeUserAccountIds = 'assignee_user_account_ids',
  /** column name */
  CanceledDate = 'canceled_date',
  /** column name */
  ClientFileNumber = 'client_file_number',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ClientLoanNumber = 'client_loan_number',
  /** column name */
  CompletedDate = 'completed_date',
  /** column name */
  ContactIds = 'contact_ids',
  /** column name */
  ContractValue = 'contract_value',
  /** column name */
  CostApproachValue = 'cost_approach_value',
  /** column name */
  DueDate = 'due_date',
  /** column name */
  EngagementDate = 'engagement_date',
  /** column name */
  FhaCaseNumber = 'fha_case_number',
  /** column name */
  IncomeApproachValue = 'income_approach_value',
  /** column name */
  InspectionDate = 'inspection_date',
  /** column name */
  InvoiceId = 'invoice_id',
  /** column name */
  LoanTypeId = 'loan_type_id',
  /** column name */
  Notes = 'notes',
  /** column name */
  OnHoldDate = 'on_hold_date',
  /** column name */
  PaidDate = 'paid_date',
  /** column name */
  PaidFee = 'paid_fee',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QuoteAcceptedDate = 'quote_accepted_date',
  /** column name */
  QuoteDeclinedDate = 'quote_declined_date',
  /** column name */
  QuoteFee = 'quote_fee',
  /** column name */
  QuoteMadeDate = 'quote_made_date',
  /** column name */
  ReportFee = 'report_fee',
  /** column name */
  ReportTypeId = 'report_type_id',
  /** column name */
  ResidentialFormTypeIds = 'residential_form_type_ids',
  /** column name */
  ReviewedDate = 'reviewed_date',
  /** column name */
  RevisionRequestDate = 'revision_request_date',
  /** column name */
  SalesApproachValue = 'sales_approach_value',
  /** column name */
  Starred = 'starred',
  /** column name */
  SubmittedDate = 'submitted_date',
  /** column name */
  UsdaCaseNumber = 'usda_case_number',
  /** column name */
  VaCaseNumber = 'va_case_number',
}

export type Appraisal_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Appraisal_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Appraisal_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Appraisal_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Appraisal_Delete_Key_Input>;
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Appraisal_Inc_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Appraisal_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Appraisal_Set_Input>;
  where: Appraisal_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Appraisal_Var_Pop_Fields = {
  __typename?: 'appraisal_var_pop_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_source_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_commissions?: Maybe<Scalars['Float']>;
  total_expenses?: Maybe<Scalars['Float']>;
  total_fees?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "appraisal" */
export type Appraisal_Var_Pop_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Appraisal_Var_Samp_Fields = {
  __typename?: 'appraisal_var_samp_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_source_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_commissions?: Maybe<Scalars['Float']>;
  total_expenses?: Maybe<Scalars['Float']>;
  total_fees?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "appraisal" */
export type Appraisal_Var_Samp_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Appraisal_Variance_Fields = {
  __typename?: 'appraisal_variance_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_source_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_commissions?: Maybe<Scalars['Float']>;
  total_expenses?: Maybe<Scalars['Float']>;
  total_fees?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "appraisal" */
export type Appraisal_Variance_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_source_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_commissions?: Maybe<Order_By>;
  total_expenses?: Maybe<Order_By>;
  total_fees?: Maybe<Order_By>;
};

/** columns and relationships of "appraisals" */
export type Appraisals = {
  __typename?: 'appraisals';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_notes?: Maybe<Scalars['String']>;
  appraisal_priority?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status?: Maybe<Scalars['String']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  assignee_user_account_names?: Maybe<Scalars['jsonb']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  client_name?: Maybe<Scalars['String']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_organization_name?: Maybe<Scalars['String']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  due_date_in?: Maybe<Scalars['String']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  inspection_date_in?: Maybe<Scalars['String']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_notes?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  site?: Maybe<Scalars['String']>;
  starred?: Maybe<Scalars['Boolean']>;
  subdivision?: Maybe<Scalars['String']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  va_case_number?: Maybe<Scalars['String']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisals" */
export type AppraisalsAssignee_User_Account_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisals" */
export type AppraisalsAssignee_User_Account_NamesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisals" */
export type AppraisalsContact_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisals" */
export type AppraisalsLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "appraisals" */
export type AppraisalsResidential_Form_Type_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "appraisals" */
export type Appraisals_Aggregate = {
  __typename?: 'appraisals_aggregate';
  aggregate?: Maybe<Appraisals_Aggregate_Fields>;
  nodes: Array<Appraisals>;
};

/** aggregate fields of "appraisals" */
export type Appraisals_Aggregate_Fields = {
  __typename?: 'appraisals_aggregate_fields';
  avg?: Maybe<Appraisals_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Appraisals_Max_Fields>;
  min?: Maybe<Appraisals_Min_Fields>;
  stddev?: Maybe<Appraisals_Stddev_Fields>;
  stddev_pop?: Maybe<Appraisals_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Appraisals_Stddev_Samp_Fields>;
  sum?: Maybe<Appraisals_Sum_Fields>;
  var_pop?: Maybe<Appraisals_Var_Pop_Fields>;
  var_samp?: Maybe<Appraisals_Var_Samp_Fields>;
  variance?: Maybe<Appraisals_Variance_Fields>;
};

/** aggregate fields of "appraisals" */
export type Appraisals_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Appraisals_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "appraisals" */
export type Appraisals_Aggregate_Order_By = {
  avg?: Maybe<Appraisals_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Appraisals_Max_Order_By>;
  min?: Maybe<Appraisals_Min_Order_By>;
  stddev?: Maybe<Appraisals_Stddev_Order_By>;
  stddev_pop?: Maybe<Appraisals_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Appraisals_Stddev_Samp_Order_By>;
  sum?: Maybe<Appraisals_Sum_Order_By>;
  var_pop?: Maybe<Appraisals_Var_Pop_Order_By>;
  var_samp?: Maybe<Appraisals_Var_Samp_Order_By>;
  variance?: Maybe<Appraisals_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Appraisals_Avg_Fields = {
  __typename?: 'appraisals_avg_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "appraisals" */
export type Appraisals_Avg_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "appraisals". All fields are combined with a logical 'AND'. */
export type Appraisals_Bool_Exp = {
  _and?: Maybe<Array<Appraisals_Bool_Exp>>;
  _not?: Maybe<Appraisals_Bool_Exp>;
  _or?: Maybe<Array<Appraisals_Bool_Exp>>;
  appraisal_file_number?: Maybe<String_Comparison_Exp>;
  appraisal_notes?: Maybe<String_Comparison_Exp>;
  appraisal_priority?: Maybe<String_Comparison_Exp>;
  appraisal_priority_id?: Maybe<Int_Comparison_Exp>;
  appraisal_purpose_id?: Maybe<Int_Comparison_Exp>;
  appraisal_status?: Maybe<String_Comparison_Exp>;
  appraisal_status_id?: Maybe<Int_Comparison_Exp>;
  assignee_user_account_ids?: Maybe<Jsonb_Comparison_Exp>;
  assignee_user_account_names?: Maybe<Jsonb_Comparison_Exp>;
  canceled_date?: Maybe<Timestamptz_Comparison_Exp>;
  client_file_number?: Maybe<String_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  client_loan_number?: Maybe<String_Comparison_Exp>;
  client_name?: Maybe<String_Comparison_Exp>;
  commercial_building_name?: Maybe<String_Comparison_Exp>;
  commercial_buildings?: Maybe<Int_Comparison_Exp>;
  commercial_floors?: Maybe<Int_Comparison_Exp>;
  commercial_gross_area?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_units?: Maybe<Int_Comparison_Exp>;
  completed_date?: Maybe<Timestamptz_Comparison_Exp>;
  contact_ids?: Maybe<Jsonb_Comparison_Exp>;
  contract_value?: Maybe<Numeric_Comparison_Exp>;
  cost_approach_value?: Maybe<Numeric_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_organization_id?: Maybe<Uuid_Comparison_Exp>;
  created_by_organization_name?: Maybe<String_Comparison_Exp>;
  created_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  due_date?: Maybe<Timestamptz_Comparison_Exp>;
  due_date_in?: Maybe<String_Comparison_Exp>;
  energy_efficient_items?: Maybe<String_Comparison_Exp>;
  engagement_date?: Maybe<Timestamptz_Comparison_Exp>;
  fha_case_number?: Maybe<String_Comparison_Exp>;
  heating_cooling?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  income_approach_value?: Maybe<Numeric_Comparison_Exp>;
  inspection_date?: Maybe<Timestamptz_Comparison_Exp>;
  inspection_date_in?: Maybe<String_Comparison_Exp>;
  loan_type_id?: Maybe<Int_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  on_hold_date?: Maybe<Timestamptz_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  organization_name?: Maybe<String_Comparison_Exp>;
  paid_date?: Maybe<Timestamptz_Comparison_Exp>;
  paid_fee?: Maybe<Numeric_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_notes?: Maybe<String_Comparison_Exp>;
  property_type?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quote_accepted_date?: Maybe<Timestamptz_Comparison_Exp>;
  quote_declined_date?: Maybe<Timestamptz_Comparison_Exp>;
  quote_fee?: Maybe<Numeric_Comparison_Exp>;
  quote_made_date?: Maybe<Timestamptz_Comparison_Exp>;
  report_fee?: Maybe<Numeric_Comparison_Exp>;
  report_type_id?: Maybe<Int_Comparison_Exp>;
  residential_above_grade_bathrooms?: Maybe<Int_Comparison_Exp>;
  residential_above_grade_bedrooms?: Maybe<Int_Comparison_Exp>;
  residential_basement_and_finished?: Maybe<String_Comparison_Exp>;
  residential_below_grade_bathrooms?: Maybe<Int_Comparison_Exp>;
  residential_below_grade_bedrooms?: Maybe<Int_Comparison_Exp>;
  residential_fireplaces?: Maybe<String_Comparison_Exp>;
  residential_form_type_ids?: Maybe<Jsonb_Comparison_Exp>;
  residential_functional_utility?: Maybe<String_Comparison_Exp>;
  residential_garage_carport?: Maybe<String_Comparison_Exp>;
  residential_gross_living_area?: Maybe<Numeric_Comparison_Exp>;
  residential_other?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_porch_patio_deck?: Maybe<String_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  reviewed_date?: Maybe<Timestamptz_Comparison_Exp>;
  revision_request_date?: Maybe<Timestamptz_Comparison_Exp>;
  sales_approach_value?: Maybe<Numeric_Comparison_Exp>;
  site?: Maybe<String_Comparison_Exp>;
  starred?: Maybe<Boolean_Comparison_Exp>;
  subdivision?: Maybe<String_Comparison_Exp>;
  submitted_date?: Maybe<Timestamptz_Comparison_Exp>;
  tax_id?: Maybe<String_Comparison_Exp>;
  total_acres?: Maybe<Numeric_Comparison_Exp>;
  universal_property_identifier?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  usda_case_number?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  va_case_number?: Maybe<String_Comparison_Exp>;
  year_built?: Maybe<Timestamptz_Comparison_Exp>;
  year_renovated?: Maybe<Timestamptz_Comparison_Exp>;
  zoning?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Appraisals_Max_Fields = {
  __typename?: 'appraisals_max_fields';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_notes?: Maybe<Scalars['String']>;
  appraisal_priority?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status?: Maybe<Scalars['String']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  client_name?: Maybe<Scalars['String']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_organization_name?: Maybe<Scalars['String']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  due_date_in?: Maybe<Scalars['String']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  inspection_date_in?: Maybe<Scalars['String']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_notes?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  va_case_number?: Maybe<Scalars['String']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "appraisals" */
export type Appraisals_Max_Order_By = {
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_notes?: Maybe<Order_By>;
  appraisal_priority?: Maybe<Order_By>;
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  canceled_date?: Maybe<Order_By>;
  client_file_number?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_loan_number?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  commercial_building_name?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_organization_id?: Maybe<Order_By>;
  created_by_organization_name?: Maybe<Order_By>;
  created_by_user_account_id?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  due_date_in?: Maybe<Order_By>;
  energy_efficient_items?: Maybe<Order_By>;
  engagement_date?: Maybe<Order_By>;
  fha_case_number?: Maybe<Order_By>;
  heating_cooling?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  inspection_date?: Maybe<Order_By>;
  inspection_date_in?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  on_hold_date?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  organization_name?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_notes?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_accepted_date?: Maybe<Order_By>;
  quote_declined_date?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  quote_made_date?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_basement_and_finished?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_fireplaces?: Maybe<Order_By>;
  residential_functional_utility?: Maybe<Order_By>;
  residential_garage_carport?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_other?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_porch_patio_deck?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  reviewed_date?: Maybe<Order_By>;
  revision_request_date?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  site?: Maybe<Order_By>;
  subdivision?: Maybe<Order_By>;
  submitted_date?: Maybe<Order_By>;
  tax_id?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
  universal_property_identifier?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  usda_case_number?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  va_case_number?: Maybe<Order_By>;
  year_built?: Maybe<Order_By>;
  year_renovated?: Maybe<Order_By>;
  zoning?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Appraisals_Min_Fields = {
  __typename?: 'appraisals_min_fields';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_notes?: Maybe<Scalars['String']>;
  appraisal_priority?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status?: Maybe<Scalars['String']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  client_name?: Maybe<Scalars['String']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_organization_name?: Maybe<Scalars['String']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  due_date_in?: Maybe<Scalars['String']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  inspection_date_in?: Maybe<Scalars['String']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_notes?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  va_case_number?: Maybe<Scalars['String']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "appraisals" */
export type Appraisals_Min_Order_By = {
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_notes?: Maybe<Order_By>;
  appraisal_priority?: Maybe<Order_By>;
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  canceled_date?: Maybe<Order_By>;
  client_file_number?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_loan_number?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  commercial_building_name?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_organization_id?: Maybe<Order_By>;
  created_by_organization_name?: Maybe<Order_By>;
  created_by_user_account_id?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  due_date_in?: Maybe<Order_By>;
  energy_efficient_items?: Maybe<Order_By>;
  engagement_date?: Maybe<Order_By>;
  fha_case_number?: Maybe<Order_By>;
  heating_cooling?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  inspection_date?: Maybe<Order_By>;
  inspection_date_in?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  on_hold_date?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  organization_name?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_notes?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_accepted_date?: Maybe<Order_By>;
  quote_declined_date?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  quote_made_date?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_basement_and_finished?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_fireplaces?: Maybe<Order_By>;
  residential_functional_utility?: Maybe<Order_By>;
  residential_garage_carport?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_other?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_porch_patio_deck?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  reviewed_date?: Maybe<Order_By>;
  revision_request_date?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  site?: Maybe<Order_By>;
  subdivision?: Maybe<Order_By>;
  submitted_date?: Maybe<Order_By>;
  tax_id?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
  universal_property_identifier?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  usda_case_number?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  va_case_number?: Maybe<Order_By>;
  year_built?: Maybe<Order_By>;
  year_renovated?: Maybe<Order_By>;
  zoning?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "appraisals". */
export type Appraisals_Order_By = {
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_notes?: Maybe<Order_By>;
  appraisal_priority?: Maybe<Order_By>;
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  assignee_user_account_ids?: Maybe<Order_By>;
  assignee_user_account_names?: Maybe<Order_By>;
  canceled_date?: Maybe<Order_By>;
  client_file_number?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_loan_number?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  commercial_building_name?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  contact_ids?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_organization_id?: Maybe<Order_By>;
  created_by_organization_name?: Maybe<Order_By>;
  created_by_user_account_id?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  due_date_in?: Maybe<Order_By>;
  energy_efficient_items?: Maybe<Order_By>;
  engagement_date?: Maybe<Order_By>;
  fha_case_number?: Maybe<Order_By>;
  heating_cooling?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  inspection_date?: Maybe<Order_By>;
  inspection_date_in?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  on_hold_date?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  organization_name?: Maybe<Order_By>;
  paid_date?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_notes?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_accepted_date?: Maybe<Order_By>;
  quote_declined_date?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  quote_made_date?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_basement_and_finished?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_fireplaces?: Maybe<Order_By>;
  residential_form_type_ids?: Maybe<Order_By>;
  residential_functional_utility?: Maybe<Order_By>;
  residential_garage_carport?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_other?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_porch_patio_deck?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  reviewed_date?: Maybe<Order_By>;
  revision_request_date?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  site?: Maybe<Order_By>;
  starred?: Maybe<Order_By>;
  subdivision?: Maybe<Order_By>;
  submitted_date?: Maybe<Order_By>;
  tax_id?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
  universal_property_identifier?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  usda_case_number?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  va_case_number?: Maybe<Order_By>;
  year_built?: Maybe<Order_By>;
  year_renovated?: Maybe<Order_By>;
  zoning?: Maybe<Order_By>;
};

/** select columns of table "appraisals" */
export enum Appraisals_Select_Column {
  /** column name */
  AppraisalFileNumber = 'appraisal_file_number',
  /** column name */
  AppraisalNotes = 'appraisal_notes',
  /** column name */
  AppraisalPriority = 'appraisal_priority',
  /** column name */
  AppraisalPriorityId = 'appraisal_priority_id',
  /** column name */
  AppraisalPurposeId = 'appraisal_purpose_id',
  /** column name */
  AppraisalStatus = 'appraisal_status',
  /** column name */
  AppraisalStatusId = 'appraisal_status_id',
  /** column name */
  AssigneeUserAccountIds = 'assignee_user_account_ids',
  /** column name */
  AssigneeUserAccountNames = 'assignee_user_account_names',
  /** column name */
  CanceledDate = 'canceled_date',
  /** column name */
  ClientFileNumber = 'client_file_number',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ClientLoanNumber = 'client_loan_number',
  /** column name */
  ClientName = 'client_name',
  /** column name */
  CommercialBuildingName = 'commercial_building_name',
  /** column name */
  CommercialBuildings = 'commercial_buildings',
  /** column name */
  CommercialFloors = 'commercial_floors',
  /** column name */
  CommercialGrossArea = 'commercial_gross_area',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  CommercialUnits = 'commercial_units',
  /** column name */
  CompletedDate = 'completed_date',
  /** column name */
  ContactIds = 'contact_ids',
  /** column name */
  ContractValue = 'contract_value',
  /** column name */
  CostApproachValue = 'cost_approach_value',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByOrganizationId = 'created_by_organization_id',
  /** column name */
  CreatedByOrganizationName = 'created_by_organization_name',
  /** column name */
  CreatedByUserAccountId = 'created_by_user_account_id',
  /** column name */
  DueDate = 'due_date',
  /** column name */
  DueDateIn = 'due_date_in',
  /** column name */
  EnergyEfficientItems = 'energy_efficient_items',
  /** column name */
  EngagementDate = 'engagement_date',
  /** column name */
  FhaCaseNumber = 'fha_case_number',
  /** column name */
  HeatingCooling = 'heating_cooling',
  /** column name */
  Id = 'id',
  /** column name */
  IncomeApproachValue = 'income_approach_value',
  /** column name */
  InspectionDate = 'inspection_date',
  /** column name */
  InspectionDateIn = 'inspection_date_in',
  /** column name */
  LoanTypeId = 'loan_type_id',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  OnHoldDate = 'on_hold_date',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  OrganizationName = 'organization_name',
  /** column name */
  PaidDate = 'paid_date',
  /** column name */
  PaidFee = 'paid_fee',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyNotes = 'property_notes',
  /** column name */
  PropertyType = 'property_type',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QuoteAcceptedDate = 'quote_accepted_date',
  /** column name */
  QuoteDeclinedDate = 'quote_declined_date',
  /** column name */
  QuoteFee = 'quote_fee',
  /** column name */
  QuoteMadeDate = 'quote_made_date',
  /** column name */
  ReportFee = 'report_fee',
  /** column name */
  ReportTypeId = 'report_type_id',
  /** column name */
  ResidentialAboveGradeBathrooms = 'residential_above_grade_bathrooms',
  /** column name */
  ResidentialAboveGradeBedrooms = 'residential_above_grade_bedrooms',
  /** column name */
  ResidentialBasementAndFinished = 'residential_basement_and_finished',
  /** column name */
  ResidentialBelowGradeBathrooms = 'residential_below_grade_bathrooms',
  /** column name */
  ResidentialBelowGradeBedrooms = 'residential_below_grade_bedrooms',
  /** column name */
  ResidentialFireplaces = 'residential_fireplaces',
  /** column name */
  ResidentialFormTypeIds = 'residential_form_type_ids',
  /** column name */
  ResidentialFunctionalUtility = 'residential_functional_utility',
  /** column name */
  ResidentialGarageCarport = 'residential_garage_carport',
  /** column name */
  ResidentialGrossLivingArea = 'residential_gross_living_area',
  /** column name */
  ResidentialOther = 'residential_other',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialPorchPatioDeck = 'residential_porch_patio_deck',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  ReviewedDate = 'reviewed_date',
  /** column name */
  RevisionRequestDate = 'revision_request_date',
  /** column name */
  SalesApproachValue = 'sales_approach_value',
  /** column name */
  Site = 'site',
  /** column name */
  Starred = 'starred',
  /** column name */
  Subdivision = 'subdivision',
  /** column name */
  SubmittedDate = 'submitted_date',
  /** column name */
  TaxId = 'tax_id',
  /** column name */
  TotalAcres = 'total_acres',
  /** column name */
  UniversalPropertyIdentifier = 'universal_property_identifier',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UsdaCaseNumber = 'usda_case_number',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VaCaseNumber = 'va_case_number',
  /** column name */
  YearBuilt = 'year_built',
  /** column name */
  YearRenovated = 'year_renovated',
  /** column name */
  Zoning = 'zoning',
}

/** aggregate stddev on columns */
export type Appraisals_Stddev_Fields = {
  __typename?: 'appraisals_stddev_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "appraisals" */
export type Appraisals_Stddev_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Appraisals_Stddev_Pop_Fields = {
  __typename?: 'appraisals_stddev_pop_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "appraisals" */
export type Appraisals_Stddev_Pop_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Appraisals_Stddev_Samp_Fields = {
  __typename?: 'appraisals_stddev_samp_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "appraisals" */
export type Appraisals_Stddev_Samp_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** Streaming cursor of the table "appraisals" */
export type Appraisals_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Appraisals_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Appraisals_Stream_Cursor_Value_Input = {
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_notes?: Maybe<Scalars['String']>;
  appraisal_priority?: Maybe<Scalars['String']>;
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status?: Maybe<Scalars['String']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  assignee_user_account_names?: Maybe<Scalars['jsonb']>;
  canceled_date?: Maybe<Scalars['timestamptz']>;
  client_file_number?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_loan_number?: Maybe<Scalars['String']>;
  client_name?: Maybe<Scalars['String']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_organization_name?: Maybe<Scalars['String']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  due_date_in?: Maybe<Scalars['String']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  engagement_date?: Maybe<Scalars['timestamptz']>;
  fha_case_number?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  inspection_date?: Maybe<Scalars['timestamptz']>;
  inspection_date_in?: Maybe<Scalars['String']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  on_hold_date?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  paid_date?: Maybe<Scalars['timestamptz']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_notes?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_accepted_date?: Maybe<Scalars['timestamptz']>;
  quote_declined_date?: Maybe<Scalars['timestamptz']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  quote_made_date?: Maybe<Scalars['timestamptz']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  reviewed_date?: Maybe<Scalars['timestamptz']>;
  revision_request_date?: Maybe<Scalars['timestamptz']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  site?: Maybe<Scalars['String']>;
  starred?: Maybe<Scalars['Boolean']>;
  subdivision?: Maybe<Scalars['String']>;
  submitted_date?: Maybe<Scalars['timestamptz']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  usda_case_number?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  va_case_number?: Maybe<Scalars['String']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Appraisals_Sum_Fields = {
  __typename?: 'appraisals_sum_fields';
  appraisal_priority_id?: Maybe<Scalars['Int']>;
  appraisal_purpose_id?: Maybe<Scalars['Int']>;
  appraisal_status_id?: Maybe<Scalars['Int']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  contract_value?: Maybe<Scalars['numeric']>;
  cost_approach_value?: Maybe<Scalars['numeric']>;
  income_approach_value?: Maybe<Scalars['numeric']>;
  loan_type_id?: Maybe<Scalars['Int']>;
  paid_fee?: Maybe<Scalars['numeric']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quote_fee?: Maybe<Scalars['numeric']>;
  report_fee?: Maybe<Scalars['numeric']>;
  report_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_approach_value?: Maybe<Scalars['numeric']>;
  total_acres?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "appraisals" */
export type Appraisals_Sum_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Appraisals_Var_Pop_Fields = {
  __typename?: 'appraisals_var_pop_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "appraisals" */
export type Appraisals_Var_Pop_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Appraisals_Var_Samp_Fields = {
  __typename?: 'appraisals_var_samp_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "appraisals" */
export type Appraisals_Var_Samp_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Appraisals_Variance_Fields = {
  __typename?: 'appraisals_variance_fields';
  appraisal_priority_id?: Maybe<Scalars['Float']>;
  appraisal_purpose_id?: Maybe<Scalars['Float']>;
  appraisal_status_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  contract_value?: Maybe<Scalars['Float']>;
  cost_approach_value?: Maybe<Scalars['Float']>;
  income_approach_value?: Maybe<Scalars['Float']>;
  loan_type_id?: Maybe<Scalars['Float']>;
  paid_fee?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  quote_fee?: Maybe<Scalars['Float']>;
  report_fee?: Maybe<Scalars['Float']>;
  report_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_approach_value?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "appraisals" */
export type Appraisals_Variance_Order_By = {
  appraisal_priority_id?: Maybe<Order_By>;
  appraisal_purpose_id?: Maybe<Order_By>;
  appraisal_status_id?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  contract_value?: Maybe<Order_By>;
  cost_approach_value?: Maybe<Order_By>;
  income_approach_value?: Maybe<Order_By>;
  loan_type_id?: Maybe<Order_By>;
  paid_fee?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quote_fee?: Maybe<Order_By>;
  report_fee?: Maybe<Order_By>;
  report_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_approach_value?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
};

/** columns and relationships of "assessment" */
export type Assessment = {
  __typename?: 'assessment';
  building_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id: Scalars['uuid'];
  other_value?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  property: Property;
  property_id: Scalars['uuid'];
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['bpchar']>;
  user_account_id: Scalars['uuid'];
  year?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "assessment" */
export type Assessment_Aggregate = {
  __typename?: 'assessment_aggregate';
  aggregate?: Maybe<Assessment_Aggregate_Fields>;
  nodes: Array<Assessment>;
};

/** aggregate fields of "assessment" */
export type Assessment_Aggregate_Fields = {
  __typename?: 'assessment_aggregate_fields';
  avg?: Maybe<Assessment_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Assessment_Max_Fields>;
  min?: Maybe<Assessment_Min_Fields>;
  stddev?: Maybe<Assessment_Stddev_Fields>;
  stddev_pop?: Maybe<Assessment_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Assessment_Stddev_Samp_Fields>;
  sum?: Maybe<Assessment_Sum_Fields>;
  var_pop?: Maybe<Assessment_Var_Pop_Fields>;
  var_samp?: Maybe<Assessment_Var_Samp_Fields>;
  variance?: Maybe<Assessment_Variance_Fields>;
};

/** aggregate fields of "assessment" */
export type Assessment_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Assessment_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "assessment" */
export type Assessment_Aggregate_Order_By = {
  avg?: Maybe<Assessment_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Assessment_Max_Order_By>;
  min?: Maybe<Assessment_Min_Order_By>;
  stddev?: Maybe<Assessment_Stddev_Order_By>;
  stddev_pop?: Maybe<Assessment_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Assessment_Stddev_Samp_Order_By>;
  sum?: Maybe<Assessment_Sum_Order_By>;
  var_pop?: Maybe<Assessment_Var_Pop_Order_By>;
  var_samp?: Maybe<Assessment_Var_Samp_Order_By>;
  variance?: Maybe<Assessment_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "assessment" */
export type Assessment_Arr_Rel_Insert_Input = {
  data: Array<Assessment_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Assessment_On_Conflict>;
};

/** aggregate avg on columns */
export type Assessment_Avg_Fields = {
  __typename?: 'assessment_avg_fields';
  building_value?: Maybe<Scalars['Float']>;
  land_value?: Maybe<Scalars['Float']>;
  millage_rate?: Maybe<Scalars['Float']>;
  other_value?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  taxes?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "assessment" */
export type Assessment_Avg_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "assessment". All fields are combined with a logical 'AND'. */
export type Assessment_Bool_Exp = {
  _and?: Maybe<Array<Assessment_Bool_Exp>>;
  _not?: Maybe<Assessment_Bool_Exp>;
  _or?: Maybe<Array<Assessment_Bool_Exp>>;
  building_value?: Maybe<Numeric_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  land_value?: Maybe<Numeric_Comparison_Exp>;
  millage_rate?: Maybe<Numeric_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  other_value?: Maybe<Numeric_Comparison_Exp>;
  property?: Maybe<Property_Bool_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  taxes?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<Bpchar_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  year?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "assessment" */
export enum Assessment_Constraint {
  /** unique or primary key constraint on columns "id" */
  AssessmentPkey = 'assessment_pkey',
}

/** input type for incrementing numeric columns in table "assessment" */
export type Assessment_Inc_Input = {
  building_value?: Maybe<Scalars['numeric']>;
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  other_value?: Maybe<Scalars['numeric']>;
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "assessment" */
export type Assessment_Insert_Input = {
  building_value?: Maybe<Scalars['numeric']>;
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  other_value?: Maybe<Scalars['numeric']>;
  property?: Maybe<Property_Obj_Rel_Insert_Input>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
  url?: Maybe<Scalars['bpchar']>;
  year?: Maybe<Scalars['timestamptz']>;
};

/** aggregate max on columns */
export type Assessment_Max_Fields = {
  __typename?: 'assessment_max_fields';
  building_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  other_value?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['bpchar']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "assessment" */
export type Assessment_Max_Order_By = {
  building_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  year?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Assessment_Min_Fields = {
  __typename?: 'assessment_min_fields';
  building_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  other_value?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['bpchar']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "assessment" */
export type Assessment_Min_Order_By = {
  building_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  year?: Maybe<Order_By>;
};

/** response of any mutation on the table "assessment" */
export type Assessment_Mutation_Response = {
  __typename?: 'assessment_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Assessment>;
};

/** on_conflict condition type for table "assessment" */
export type Assessment_On_Conflict = {
  constraint: Assessment_Constraint;
  update_columns: Array<Assessment_Update_Column>;
  where?: Maybe<Assessment_Bool_Exp>;
};

/** Ordering options when selecting data from "assessment". */
export type Assessment_Order_By = {
  building_value?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property?: Maybe<Property_Order_By>;
  property_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  year?: Maybe<Order_By>;
};

/** primary key columns input for table: assessment */
export type Assessment_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "assessment" */
export enum Assessment_Select_Column {
  /** column name */
  BuildingValue = 'building_value',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  LandValue = 'land_value',
  /** column name */
  MillageRate = 'millage_rate',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  OtherValue = 'other_value',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  Taxes = 'taxes',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  Year = 'year',
}

/** input type for updating data in table "assessment" */
export type Assessment_Set_Input = {
  building_value?: Maybe<Scalars['numeric']>;
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  other_value?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
  url?: Maybe<Scalars['bpchar']>;
  year?: Maybe<Scalars['timestamptz']>;
};

/** aggregate stddev on columns */
export type Assessment_Stddev_Fields = {
  __typename?: 'assessment_stddev_fields';
  building_value?: Maybe<Scalars['Float']>;
  land_value?: Maybe<Scalars['Float']>;
  millage_rate?: Maybe<Scalars['Float']>;
  other_value?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  taxes?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "assessment" */
export type Assessment_Stddev_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Assessment_Stddev_Pop_Fields = {
  __typename?: 'assessment_stddev_pop_fields';
  building_value?: Maybe<Scalars['Float']>;
  land_value?: Maybe<Scalars['Float']>;
  millage_rate?: Maybe<Scalars['Float']>;
  other_value?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  taxes?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "assessment" */
export type Assessment_Stddev_Pop_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Assessment_Stddev_Samp_Fields = {
  __typename?: 'assessment_stddev_samp_fields';
  building_value?: Maybe<Scalars['Float']>;
  land_value?: Maybe<Scalars['Float']>;
  millage_rate?: Maybe<Scalars['Float']>;
  other_value?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  taxes?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "assessment" */
export type Assessment_Stddev_Samp_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** Streaming cursor of the table "assessment" */
export type Assessment_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Assessment_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Assessment_Stream_Cursor_Value_Input = {
  building_value?: Maybe<Scalars['numeric']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  other_value?: Maybe<Scalars['numeric']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['bpchar']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Assessment_Sum_Fields = {
  __typename?: 'assessment_sum_fields';
  building_value?: Maybe<Scalars['numeric']>;
  land_value?: Maybe<Scalars['numeric']>;
  millage_rate?: Maybe<Scalars['numeric']>;
  other_value?: Maybe<Scalars['numeric']>;
  property_type_id?: Maybe<Scalars['Int']>;
  taxes?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "assessment" */
export type Assessment_Sum_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** update columns of table "assessment" */
export enum Assessment_Update_Column {
  /** column name */
  BuildingValue = 'building_value',
  /** column name */
  LandValue = 'land_value',
  /** column name */
  MillageRate = 'millage_rate',
  /** column name */
  Notes = 'notes',
  /** column name */
  OtherValue = 'other_value',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  Taxes = 'taxes',
  /** column name */
  Url = 'url',
  /** column name */
  Year = 'year',
}

export type Assessment_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Assessment_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Assessment_Set_Input>;
  where: Assessment_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Assessment_Var_Pop_Fields = {
  __typename?: 'assessment_var_pop_fields';
  building_value?: Maybe<Scalars['Float']>;
  land_value?: Maybe<Scalars['Float']>;
  millage_rate?: Maybe<Scalars['Float']>;
  other_value?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  taxes?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "assessment" */
export type Assessment_Var_Pop_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Assessment_Var_Samp_Fields = {
  __typename?: 'assessment_var_samp_fields';
  building_value?: Maybe<Scalars['Float']>;
  land_value?: Maybe<Scalars['Float']>;
  millage_rate?: Maybe<Scalars['Float']>;
  other_value?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  taxes?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "assessment" */
export type Assessment_Var_Samp_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Assessment_Variance_Fields = {
  __typename?: 'assessment_variance_fields';
  building_value?: Maybe<Scalars['Float']>;
  land_value?: Maybe<Scalars['Float']>;
  millage_rate?: Maybe<Scalars['Float']>;
  other_value?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  taxes?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "assessment" */
export type Assessment_Variance_Order_By = {
  building_value?: Maybe<Order_By>;
  land_value?: Maybe<Order_By>;
  millage_rate?: Maybe<Order_By>;
  other_value?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  taxes?: Maybe<Order_By>;
};

/** columns and relationships of "assignee_roles" */
export type Assignee_Roles = {
  __typename?: 'assignee_roles';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "assignee_roles" */
export type Assignee_Roles_Aggregate = {
  __typename?: 'assignee_roles_aggregate';
  aggregate?: Maybe<Assignee_Roles_Aggregate_Fields>;
  nodes: Array<Assignee_Roles>;
};

/** aggregate fields of "assignee_roles" */
export type Assignee_Roles_Aggregate_Fields = {
  __typename?: 'assignee_roles_aggregate_fields';
  avg?: Maybe<Assignee_Roles_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Assignee_Roles_Max_Fields>;
  min?: Maybe<Assignee_Roles_Min_Fields>;
  stddev?: Maybe<Assignee_Roles_Stddev_Fields>;
  stddev_pop?: Maybe<Assignee_Roles_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Assignee_Roles_Stddev_Samp_Fields>;
  sum?: Maybe<Assignee_Roles_Sum_Fields>;
  var_pop?: Maybe<Assignee_Roles_Var_Pop_Fields>;
  var_samp?: Maybe<Assignee_Roles_Var_Samp_Fields>;
  variance?: Maybe<Assignee_Roles_Variance_Fields>;
};

/** aggregate fields of "assignee_roles" */
export type Assignee_Roles_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Assignee_Roles_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Assignee_Roles_Avg_Fields = {
  __typename?: 'assignee_roles_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "assignee_roles". All fields are combined with a logical 'AND'. */
export type Assignee_Roles_Bool_Exp = {
  _and?: Maybe<Array<Assignee_Roles_Bool_Exp>>;
  _not?: Maybe<Assignee_Roles_Bool_Exp>;
  _or?: Maybe<Array<Assignee_Roles_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  role?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Assignee_Roles_Max_Fields = {
  __typename?: 'assignee_roles_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Assignee_Roles_Min_Fields = {
  __typename?: 'assignee_roles_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "assignee_roles". */
export type Assignee_Roles_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "assignee_roles" */
export enum Assignee_Roles_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Role = 'role',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Assignee_Roles_Stddev_Fields = {
  __typename?: 'assignee_roles_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Assignee_Roles_Stddev_Pop_Fields = {
  __typename?: 'assignee_roles_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Assignee_Roles_Stddev_Samp_Fields = {
  __typename?: 'assignee_roles_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "assignee_roles" */
export type Assignee_Roles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Assignee_Roles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Assignee_Roles_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Assignee_Roles_Sum_Fields = {
  __typename?: 'assignee_roles_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Assignee_Roles_Var_Pop_Fields = {
  __typename?: 'assignee_roles_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Assignee_Roles_Var_Samp_Fields = {
  __typename?: 'assignee_roles_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Assignee_Roles_Variance_Fields = {
  __typename?: 'assignee_roles_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'. */
export type Boolean_Comparison_Exp = {
  _eq?: Maybe<Scalars['Boolean']>;
  _gt?: Maybe<Scalars['Boolean']>;
  _gte?: Maybe<Scalars['Boolean']>;
  _in?: Maybe<Array<Scalars['Boolean']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Boolean']>;
  _lte?: Maybe<Scalars['Boolean']>;
  _neq?: Maybe<Scalars['Boolean']>;
  _nin?: Maybe<Array<Scalars['Boolean']>>;
};

/** Boolean expression to compare columns of type "bpchar". All fields are combined with logical 'AND'. */
export type Bpchar_Comparison_Exp = {
  _eq?: Maybe<Scalars['bpchar']>;
  _gt?: Maybe<Scalars['bpchar']>;
  _gte?: Maybe<Scalars['bpchar']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: Maybe<Scalars['bpchar']>;
  _in?: Maybe<Array<Scalars['bpchar']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: Maybe<Scalars['bpchar']>;
  _is_null?: Maybe<Scalars['Boolean']>;
  /** does the column match the given pattern */
  _like?: Maybe<Scalars['bpchar']>;
  _lt?: Maybe<Scalars['bpchar']>;
  _lte?: Maybe<Scalars['bpchar']>;
  _neq?: Maybe<Scalars['bpchar']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: Maybe<Scalars['bpchar']>;
  _nin?: Maybe<Array<Scalars['bpchar']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: Maybe<Scalars['bpchar']>;
  /** does the column NOT match the given pattern */
  _nlike?: Maybe<Scalars['bpchar']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: Maybe<Scalars['bpchar']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: Maybe<Scalars['bpchar']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: Maybe<Scalars['bpchar']>;
  /** does the column match the given SQL regular expression */
  _similar?: Maybe<Scalars['bpchar']>;
};

/** columns and relationships of "client" */
export type Client = {
  __typename?: 'client';
  /** An array relationship */
  appraisals: Array<Appraisal>;
  /** An aggregate relationship */
  appraisals_aggregate: Appraisal_Aggregate;
  appraisals_count: Scalars['Int'];
  /** An array relationship */
  client_activities: Array<Client_Activities>;
  /** An aggregate relationship */
  client_activities_aggregate: Client_Activities_Aggregate;
  client_type_id?: Maybe<Scalars['Int']>;
  /** An array relationship */
  contacts: Array<Contact>;
  /** An aggregate relationship */
  contacts_aggregate: Contact_Aggregate;
  contacts_count: Scalars['Int'];
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  report_requirements?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  /** An object relationship */
  user_account: User_Account;
  user_account_id: Scalars['uuid'];
};

/** columns and relationships of "client" */
export type ClientAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "client" */
export type ClientAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "client" */
export type ClientClient_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Client_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Activities_Order_By>>;
  where?: Maybe<Client_Activities_Bool_Exp>;
};

/** columns and relationships of "client" */
export type ClientClient_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Activities_Order_By>>;
  where?: Maybe<Client_Activities_Bool_Exp>;
};

/** columns and relationships of "client" */
export type ClientContactsArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

/** columns and relationships of "client" */
export type ClientContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

/** columns and relationships of "client" */
export type ClientLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "client_activities" */
export type Client_Activities = {
  __typename?: 'client_activities';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_assignee_ids?: Maybe<Scalars['jsonb']>;
  appraisal_assignees?: Maybe<Scalars['jsonb']>;
  appraisal_contact_ids?: Maybe<Scalars['jsonb']>;
  appraisal_contacts?: Maybe<Scalars['json']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  changes?: Maybe<Scalars['jsonb']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_id?: Maybe<Scalars['uuid']>;
  contact_name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** columns and relationships of "client_activities" */
export type Client_ActivitiesAppraisal_Assignee_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "client_activities" */
export type Client_ActivitiesAppraisal_AssigneesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "client_activities" */
export type Client_ActivitiesAppraisal_Contact_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "client_activities" */
export type Client_ActivitiesAppraisal_ContactsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "client_activities" */
export type Client_ActivitiesChangesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "client_activities" */
export type Client_ActivitiesNotesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "client_activities" */
export type Client_Activities_Aggregate = {
  __typename?: 'client_activities_aggregate';
  aggregate?: Maybe<Client_Activities_Aggregate_Fields>;
  nodes: Array<Client_Activities>;
};

/** aggregate fields of "client_activities" */
export type Client_Activities_Aggregate_Fields = {
  __typename?: 'client_activities_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Client_Activities_Max_Fields>;
  min?: Maybe<Client_Activities_Min_Fields>;
};

/** aggregate fields of "client_activities" */
export type Client_Activities_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Client_Activities_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "client_activities" */
export type Client_Activities_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Client_Activities_Max_Order_By>;
  min?: Maybe<Client_Activities_Min_Order_By>;
};

/** Boolean expression to filter rows from the table "client_activities". All fields are combined with a logical 'AND'. */
export type Client_Activities_Bool_Exp = {
  _and?: Maybe<Array<Client_Activities_Bool_Exp>>;
  _not?: Maybe<Client_Activities_Bool_Exp>;
  _or?: Maybe<Array<Client_Activities_Bool_Exp>>;
  activity?: Maybe<String_Comparison_Exp>;
  activity_id?: Maybe<Uuid_Comparison_Exp>;
  appraisal_assignee_ids?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_assignees?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_contact_ids?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_contacts?: Maybe<Json_Comparison_Exp>;
  appraisal_file_number?: Maybe<String_Comparison_Exp>;
  appraisal_location_address?: Maybe<String_Comparison_Exp>;
  appraisal_status?: Maybe<String_Comparison_Exp>;
  changes?: Maybe<Jsonb_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  client_name?: Maybe<String_Comparison_Exp>;
  commit_timestamp?: Maybe<Timestamptz_Comparison_Exp>;
  contact_id?: Maybe<Uuid_Comparison_Exp>;
  contact_name?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<Jsonb_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  timestamp_group_by?: Maybe<Timestamptz_Comparison_Exp>;
  type?: Maybe<Activity_Type_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_name?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Client_Activities_Max_Fields = {
  __typename?: 'client_activities_max_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_id?: Maybe<Scalars['uuid']>;
  contact_name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "client_activities" */
export type Client_Activities_Max_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_location_address?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  contact_name?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Client_Activities_Min_Fields = {
  __typename?: 'client_activities_min_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_id?: Maybe<Scalars['uuid']>;
  contact_name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "client_activities" */
export type Client_Activities_Min_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_location_address?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  contact_name?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "client_activities". */
export type Client_Activities_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_assignee_ids?: Maybe<Order_By>;
  appraisal_assignees?: Maybe<Order_By>;
  appraisal_contact_ids?: Maybe<Order_By>;
  appraisal_contacts?: Maybe<Order_By>;
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_location_address?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  changes?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  contact_id?: Maybe<Order_By>;
  contact_name?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** select columns of table "client_activities" */
export enum Client_Activities_Select_Column {
  /** column name */
  Activity = 'activity',
  /** column name */
  ActivityId = 'activity_id',
  /** column name */
  AppraisalAssigneeIds = 'appraisal_assignee_ids',
  /** column name */
  AppraisalAssignees = 'appraisal_assignees',
  /** column name */
  AppraisalContactIds = 'appraisal_contact_ids',
  /** column name */
  AppraisalContacts = 'appraisal_contacts',
  /** column name */
  AppraisalFileNumber = 'appraisal_file_number',
  /** column name */
  AppraisalLocationAddress = 'appraisal_location_address',
  /** column name */
  AppraisalStatus = 'appraisal_status',
  /** column name */
  Changes = 'changes',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ClientName = 'client_name',
  /** column name */
  CommitTimestamp = 'commit_timestamp',
  /** column name */
  ContactId = 'contact_id',
  /** column name */
  ContactName = 'contact_name',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  TimestampGroupBy = 'timestamp_group_by',
  /** column name */
  Type = 'type',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  UserAccountName = 'user_account_name',
}

/** Streaming cursor of the table "client_activities" */
export type Client_Activities_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Client_Activities_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Client_Activities_Stream_Cursor_Value_Input = {
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_assignee_ids?: Maybe<Scalars['jsonb']>;
  appraisal_assignees?: Maybe<Scalars['jsonb']>;
  appraisal_contact_ids?: Maybe<Scalars['jsonb']>;
  appraisal_contacts?: Maybe<Scalars['json']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  changes?: Maybe<Scalars['jsonb']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_id?: Maybe<Scalars['uuid']>;
  contact_name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** aggregated selection of "client" */
export type Client_Aggregate = {
  __typename?: 'client_aggregate';
  aggregate?: Maybe<Client_Aggregate_Fields>;
  nodes: Array<Client>;
};

/** aggregate fields of "client" */
export type Client_Aggregate_Fields = {
  __typename?: 'client_aggregate_fields';
  avg?: Maybe<Client_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Client_Max_Fields>;
  min?: Maybe<Client_Min_Fields>;
  stddev?: Maybe<Client_Stddev_Fields>;
  stddev_pop?: Maybe<Client_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Client_Stddev_Samp_Fields>;
  sum?: Maybe<Client_Sum_Fields>;
  var_pop?: Maybe<Client_Var_Pop_Fields>;
  var_samp?: Maybe<Client_Var_Samp_Fields>;
  variance?: Maybe<Client_Variance_Fields>;
};

/** aggregate fields of "client" */
export type Client_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Client_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "client" */
export type Client_Aggregate_Order_By = {
  avg?: Maybe<Client_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Client_Max_Order_By>;
  min?: Maybe<Client_Min_Order_By>;
  stddev?: Maybe<Client_Stddev_Order_By>;
  stddev_pop?: Maybe<Client_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Client_Stddev_Samp_Order_By>;
  sum?: Maybe<Client_Sum_Order_By>;
  var_pop?: Maybe<Client_Var_Pop_Order_By>;
  var_samp?: Maybe<Client_Var_Samp_Order_By>;
  variance?: Maybe<Client_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Client_Append_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** aggregate avg on columns */
export type Client_Avg_Fields = {
  __typename?: 'client_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "client" */
export type Client_Avg_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "client". All fields are combined with a logical 'AND'. */
export type Client_Bool_Exp = {
  _and?: Maybe<Array<Client_Bool_Exp>>;
  _not?: Maybe<Client_Bool_Exp>;
  _or?: Maybe<Array<Client_Bool_Exp>>;
  appraisals?: Maybe<Appraisal_Bool_Exp>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  client_activities?: Maybe<Client_Activities_Bool_Exp>;
  client_type_id?: Maybe<Int_Comparison_Exp>;
  contacts?: Maybe<Contact_Bool_Exp>;
  contacts_count?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  report_requirements?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account?: Maybe<User_Account_Bool_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "client" */
export enum Client_Constraint {
  /** unique or primary key constraint on columns "id" */
  ClientNewIdKey = 'client_new_id_key',
  /** unique or primary key constraint on columns "id" */
  ClientPkey = 'client_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Client_Delete_At_Path_Input = {
  location_components?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Client_Delete_Elem_Input = {
  location_components?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Client_Delete_Key_Input = {
  location_components?: Maybe<Scalars['String']>;
};

/** input type for incrementing numeric columns in table "client" */
export type Client_Inc_Input = {
  client_type_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "client" */
export type Client_Insert_Input = {
  appraisals?: Maybe<Appraisal_Arr_Rel_Insert_Input>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts?: Maybe<Contact_Arr_Rel_Insert_Input>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  report_requirements?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  user_account?: Maybe<User_Account_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Client_Max_Fields = {
  __typename?: 'client_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  report_requirements?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "client" */
export type Client_Max_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  report_requirements?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Client_Min_Fields = {
  __typename?: 'client_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  report_requirements?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "client" */
export type Client_Min_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  report_requirements?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "client" */
export type Client_Mutation_Response = {
  __typename?: 'client_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Client>;
};

/** input type for inserting object relation for remote table "client" */
export type Client_Obj_Rel_Insert_Input = {
  data: Client_Insert_Input;
  /** upsert condition */
  on_conflict?: Maybe<Client_On_Conflict>;
};

/** on_conflict condition type for table "client" */
export type Client_On_Conflict = {
  constraint: Client_Constraint;
  update_columns: Array<Client_Update_Column>;
  where?: Maybe<Client_Bool_Exp>;
};

/** Ordering options when selecting data from "client". */
export type Client_Order_By = {
  appraisals_aggregate?: Maybe<Appraisal_Aggregate_Order_By>;
  appraisals_count?: Maybe<Order_By>;
  client_activities_aggregate?: Maybe<Client_Activities_Aggregate_Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_aggregate?: Maybe<Contact_Aggregate_Order_By>;
  contacts_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  report_requirements?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account?: Maybe<User_Account_Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: client */
export type Client_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Client_Prepend_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "client" */
export enum Client_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  ClientTypeId = 'client_type_id',
  /** column name */
  ContactsCount = 'contacts_count',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Name = 'name',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ReportRequirements = 'report_requirements',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "client" */
export type Client_Set_Input = {
  client_type_id?: Maybe<Scalars['Int']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  report_requirements?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Client_Stddev_Fields = {
  __typename?: 'client_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "client" */
export type Client_Stddev_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Client_Stddev_Pop_Fields = {
  __typename?: 'client_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "client" */
export type Client_Stddev_Pop_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Client_Stddev_Samp_Fields = {
  __typename?: 'client_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "client" */
export type Client_Stddev_Samp_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** Streaming cursor of the table "client" */
export type Client_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Client_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Client_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  report_requirements?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Client_Sum_Fields = {
  __typename?: 'client_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "client" */
export type Client_Sum_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** columns and relationships of "client_types" */
export type Client_Types = {
  __typename?: 'client_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "client_types" */
export type Client_Types_Aggregate = {
  __typename?: 'client_types_aggregate';
  aggregate?: Maybe<Client_Types_Aggregate_Fields>;
  nodes: Array<Client_Types>;
};

/** aggregate fields of "client_types" */
export type Client_Types_Aggregate_Fields = {
  __typename?: 'client_types_aggregate_fields';
  avg?: Maybe<Client_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Client_Types_Max_Fields>;
  min?: Maybe<Client_Types_Min_Fields>;
  stddev?: Maybe<Client_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Client_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Client_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Client_Types_Sum_Fields>;
  var_pop?: Maybe<Client_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Client_Types_Var_Samp_Fields>;
  variance?: Maybe<Client_Types_Variance_Fields>;
};

/** aggregate fields of "client_types" */
export type Client_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Client_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Client_Types_Avg_Fields = {
  __typename?: 'client_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "client_types". All fields are combined with a logical 'AND'. */
export type Client_Types_Bool_Exp = {
  _and?: Maybe<Array<Client_Types_Bool_Exp>>;
  _not?: Maybe<Client_Types_Bool_Exp>;
  _or?: Maybe<Array<Client_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Client_Types_Max_Fields = {
  __typename?: 'client_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Client_Types_Min_Fields = {
  __typename?: 'client_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "client_types". */
export type Client_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "client_types" */
export enum Client_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Client_Types_Stddev_Fields = {
  __typename?: 'client_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Client_Types_Stddev_Pop_Fields = {
  __typename?: 'client_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Client_Types_Stddev_Samp_Fields = {
  __typename?: 'client_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "client_types" */
export type Client_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Client_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Client_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Client_Types_Sum_Fields = {
  __typename?: 'client_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Client_Types_Var_Pop_Fields = {
  __typename?: 'client_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Client_Types_Var_Samp_Fields = {
  __typename?: 'client_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Client_Types_Variance_Fields = {
  __typename?: 'client_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** update columns of table "client" */
export enum Client_Update_Column {
  /** column name */
  ClientTypeId = 'client_type_id',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Name = 'name',
  /** column name */
  Notes = 'notes',
  /** column name */
  ReportRequirements = 'report_requirements',
  /** column name */
  Url = 'url',
}

export type Client_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Client_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Client_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Client_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Client_Delete_Key_Input>;
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Client_Inc_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Client_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Client_Set_Input>;
  where: Client_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Client_Var_Pop_Fields = {
  __typename?: 'client_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "client" */
export type Client_Var_Pop_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Client_Var_Samp_Fields = {
  __typename?: 'client_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "client" */
export type Client_Var_Samp_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Client_Variance_Fields = {
  __typename?: 'client_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "client" */
export type Client_Variance_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_count?: Maybe<Order_By>;
};

/** columns and relationships of "clients" */
export type Clients = {
  __typename?: 'clients';
  /** An array relationship */
  appraisals: Array<Appraisal>;
  /** An aggregate relationship */
  appraisals_aggregate: Appraisal_Aggregate;
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type?: Maybe<Scalars['String']>;
  client_type_id?: Maybe<Scalars['Int']>;
  /** An array relationship */
  contacts: Array<Contact>;
  /** An aggregate relationship */
  contacts_aggregate: Contact_Aggregate;
  contacts_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  report_requirements?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "clients" */
export type ClientsAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "clients" */
export type ClientsAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "clients" */
export type ClientsContactsArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

/** columns and relationships of "clients" */
export type ClientsContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

/** columns and relationships of "clients" */
export type ClientsLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "clients" */
export type Clients_Aggregate = {
  __typename?: 'clients_aggregate';
  aggregate?: Maybe<Clients_Aggregate_Fields>;
  nodes: Array<Clients>;
};

/** aggregate fields of "clients" */
export type Clients_Aggregate_Fields = {
  __typename?: 'clients_aggregate_fields';
  avg?: Maybe<Clients_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Clients_Max_Fields>;
  min?: Maybe<Clients_Min_Fields>;
  stddev?: Maybe<Clients_Stddev_Fields>;
  stddev_pop?: Maybe<Clients_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Clients_Stddev_Samp_Fields>;
  sum?: Maybe<Clients_Sum_Fields>;
  var_pop?: Maybe<Clients_Var_Pop_Fields>;
  var_samp?: Maybe<Clients_Var_Samp_Fields>;
  variance?: Maybe<Clients_Variance_Fields>;
};

/** aggregate fields of "clients" */
export type Clients_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Clients_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Clients_Avg_Fields = {
  __typename?: 'clients_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "clients". All fields are combined with a logical 'AND'. */
export type Clients_Bool_Exp = {
  _and?: Maybe<Array<Clients_Bool_Exp>>;
  _not?: Maybe<Clients_Bool_Exp>;
  _or?: Maybe<Array<Clients_Bool_Exp>>;
  appraisals?: Maybe<Appraisal_Bool_Exp>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  client_type?: Maybe<String_Comparison_Exp>;
  client_type_id?: Maybe<Int_Comparison_Exp>;
  contacts?: Maybe<Contact_Bool_Exp>;
  contacts_count?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_organization_id?: Maybe<Uuid_Comparison_Exp>;
  created_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  organization_name?: Maybe<String_Comparison_Exp>;
  report_requirements?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** aggregate max on columns */
export type Clients_Max_Fields = {
  __typename?: 'clients_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type?: Maybe<Scalars['String']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  report_requirements?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Clients_Min_Fields = {
  __typename?: 'clients_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type?: Maybe<Scalars['String']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  report_requirements?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** Ordering options when selecting data from "clients". */
export type Clients_Order_By = {
  appraisals_aggregate?: Maybe<Appraisal_Aggregate_Order_By>;
  appraisals_count?: Maybe<Order_By>;
  client_type?: Maybe<Order_By>;
  client_type_id?: Maybe<Order_By>;
  contacts_aggregate?: Maybe<Contact_Aggregate_Order_By>;
  contacts_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_organization_id?: Maybe<Order_By>;
  created_by_user_account_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  organization_name?: Maybe<Order_By>;
  report_requirements?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** select columns of table "clients" */
export enum Clients_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  ClientType = 'client_type',
  /** column name */
  ClientTypeId = 'client_type_id',
  /** column name */
  ContactsCount = 'contacts_count',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByOrganizationId = 'created_by_organization_id',
  /** column name */
  CreatedByUserAccountId = 'created_by_user_account_id',
  /** column name */
  Id = 'id',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Name = 'name',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  OrganizationName = 'organization_name',
  /** column name */
  ReportRequirements = 'report_requirements',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** aggregate stddev on columns */
export type Clients_Stddev_Fields = {
  __typename?: 'clients_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Clients_Stddev_Pop_Fields = {
  __typename?: 'clients_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Clients_Stddev_Samp_Fields = {
  __typename?: 'clients_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "clients" */
export type Clients_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Clients_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Clients_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type?: Maybe<Scalars['String']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_organization_id?: Maybe<Scalars['uuid']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  organization_name?: Maybe<Scalars['String']>;
  report_requirements?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Clients_Sum_Fields = {
  __typename?: 'clients_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_type_id?: Maybe<Scalars['Int']>;
  contacts_count?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Clients_Var_Pop_Fields = {
  __typename?: 'clients_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Clients_Var_Samp_Fields = {
  __typename?: 'clients_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Clients_Variance_Fields = {
  __typename?: 'clients_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  client_type_id?: Maybe<Scalars['Float']>;
  contacts_count?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "commercial_building_classes" */
export type Commercial_Building_Classes = {
  __typename?: 'commercial_building_classes';
  class?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "commercial_building_classes" */
export type Commercial_Building_Classes_Aggregate = {
  __typename?: 'commercial_building_classes_aggregate';
  aggregate?: Maybe<Commercial_Building_Classes_Aggregate_Fields>;
  nodes: Array<Commercial_Building_Classes>;
};

/** aggregate fields of "commercial_building_classes" */
export type Commercial_Building_Classes_Aggregate_Fields = {
  __typename?: 'commercial_building_classes_aggregate_fields';
  avg?: Maybe<Commercial_Building_Classes_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Commercial_Building_Classes_Max_Fields>;
  min?: Maybe<Commercial_Building_Classes_Min_Fields>;
  stddev?: Maybe<Commercial_Building_Classes_Stddev_Fields>;
  stddev_pop?: Maybe<Commercial_Building_Classes_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Commercial_Building_Classes_Stddev_Samp_Fields>;
  sum?: Maybe<Commercial_Building_Classes_Sum_Fields>;
  var_pop?: Maybe<Commercial_Building_Classes_Var_Pop_Fields>;
  var_samp?: Maybe<Commercial_Building_Classes_Var_Samp_Fields>;
  variance?: Maybe<Commercial_Building_Classes_Variance_Fields>;
};

/** aggregate fields of "commercial_building_classes" */
export type Commercial_Building_Classes_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Commercial_Building_Classes_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Commercial_Building_Classes_Avg_Fields = {
  __typename?: 'commercial_building_classes_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/**
 * Boolean expression to filter rows from the table "commercial_building_classes".
 * All fields are combined with a logical 'AND'.
 */
export type Commercial_Building_Classes_Bool_Exp = {
  _and?: Maybe<Array<Commercial_Building_Classes_Bool_Exp>>;
  _not?: Maybe<Commercial_Building_Classes_Bool_Exp>;
  _or?: Maybe<Array<Commercial_Building_Classes_Bool_Exp>>;
  class?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Commercial_Building_Classes_Max_Fields = {
  __typename?: 'commercial_building_classes_max_fields';
  class?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Commercial_Building_Classes_Min_Fields = {
  __typename?: 'commercial_building_classes_min_fields';
  class?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "commercial_building_classes". */
export type Commercial_Building_Classes_Order_By = {
  class?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "commercial_building_classes" */
export enum Commercial_Building_Classes_Select_Column {
  /** column name */
  Class = 'class',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Commercial_Building_Classes_Stddev_Fields = {
  __typename?: 'commercial_building_classes_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Commercial_Building_Classes_Stddev_Pop_Fields = {
  __typename?: 'commercial_building_classes_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Commercial_Building_Classes_Stddev_Samp_Fields = {
  __typename?: 'commercial_building_classes_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "commercial_building_classes" */
export type Commercial_Building_Classes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Commercial_Building_Classes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Commercial_Building_Classes_Stream_Cursor_Value_Input = {
  class?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Commercial_Building_Classes_Sum_Fields = {
  __typename?: 'commercial_building_classes_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Commercial_Building_Classes_Var_Pop_Fields = {
  __typename?: 'commercial_building_classes_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Commercial_Building_Classes_Var_Samp_Fields = {
  __typename?: 'commercial_building_classes_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Commercial_Building_Classes_Variance_Fields = {
  __typename?: 'commercial_building_classes_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "commercial_lease_types" */
export type Commercial_Lease_Types = {
  __typename?: 'commercial_lease_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "commercial_lease_types" */
export type Commercial_Lease_Types_Aggregate = {
  __typename?: 'commercial_lease_types_aggregate';
  aggregate?: Maybe<Commercial_Lease_Types_Aggregate_Fields>;
  nodes: Array<Commercial_Lease_Types>;
};

/** aggregate fields of "commercial_lease_types" */
export type Commercial_Lease_Types_Aggregate_Fields = {
  __typename?: 'commercial_lease_types_aggregate_fields';
  avg?: Maybe<Commercial_Lease_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Commercial_Lease_Types_Max_Fields>;
  min?: Maybe<Commercial_Lease_Types_Min_Fields>;
  stddev?: Maybe<Commercial_Lease_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Commercial_Lease_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Commercial_Lease_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Commercial_Lease_Types_Sum_Fields>;
  var_pop?: Maybe<Commercial_Lease_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Commercial_Lease_Types_Var_Samp_Fields>;
  variance?: Maybe<Commercial_Lease_Types_Variance_Fields>;
};

/** aggregate fields of "commercial_lease_types" */
export type Commercial_Lease_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Commercial_Lease_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Commercial_Lease_Types_Avg_Fields = {
  __typename?: 'commercial_lease_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "commercial_lease_types". All fields are combined with a logical 'AND'. */
export type Commercial_Lease_Types_Bool_Exp = {
  _and?: Maybe<Array<Commercial_Lease_Types_Bool_Exp>>;
  _not?: Maybe<Commercial_Lease_Types_Bool_Exp>;
  _or?: Maybe<Array<Commercial_Lease_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Commercial_Lease_Types_Max_Fields = {
  __typename?: 'commercial_lease_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Commercial_Lease_Types_Min_Fields = {
  __typename?: 'commercial_lease_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "commercial_lease_types". */
export type Commercial_Lease_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "commercial_lease_types" */
export enum Commercial_Lease_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Commercial_Lease_Types_Stddev_Fields = {
  __typename?: 'commercial_lease_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Commercial_Lease_Types_Stddev_Pop_Fields = {
  __typename?: 'commercial_lease_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Commercial_Lease_Types_Stddev_Samp_Fields = {
  __typename?: 'commercial_lease_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "commercial_lease_types" */
export type Commercial_Lease_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Commercial_Lease_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Commercial_Lease_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Commercial_Lease_Types_Sum_Fields = {
  __typename?: 'commercial_lease_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Commercial_Lease_Types_Var_Pop_Fields = {
  __typename?: 'commercial_lease_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Commercial_Lease_Types_Var_Samp_Fields = {
  __typename?: 'commercial_lease_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Commercial_Lease_Types_Variance_Fields = {
  __typename?: 'commercial_lease_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "commercial_property_subtype" */
export type Commercial_Property_Subtype = {
  __typename?: 'commercial_property_subtype';
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  created_at: Scalars['timestamptz'];
  id: Scalars['Int'];
  order?: Maybe<Scalars['Int']>;
  /** An object relationship */
  property_type?: Maybe<Commercial_Property_Type>;
  subtype?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
};

/** aggregated selection of "commercial_property_subtype" */
export type Commercial_Property_Subtype_Aggregate = {
  __typename?: 'commercial_property_subtype_aggregate';
  aggregate?: Maybe<Commercial_Property_Subtype_Aggregate_Fields>;
  nodes: Array<Commercial_Property_Subtype>;
};

/** aggregate fields of "commercial_property_subtype" */
export type Commercial_Property_Subtype_Aggregate_Fields = {
  __typename?: 'commercial_property_subtype_aggregate_fields';
  avg?: Maybe<Commercial_Property_Subtype_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Commercial_Property_Subtype_Max_Fields>;
  min?: Maybe<Commercial_Property_Subtype_Min_Fields>;
  stddev?: Maybe<Commercial_Property_Subtype_Stddev_Fields>;
  stddev_pop?: Maybe<Commercial_Property_Subtype_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Commercial_Property_Subtype_Stddev_Samp_Fields>;
  sum?: Maybe<Commercial_Property_Subtype_Sum_Fields>;
  var_pop?: Maybe<Commercial_Property_Subtype_Var_Pop_Fields>;
  var_samp?: Maybe<Commercial_Property_Subtype_Var_Samp_Fields>;
  variance?: Maybe<Commercial_Property_Subtype_Variance_Fields>;
};

/** aggregate fields of "commercial_property_subtype" */
export type Commercial_Property_Subtype_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Commercial_Property_Subtype_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Aggregate_Order_By = {
  avg?: Maybe<Commercial_Property_Subtype_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Commercial_Property_Subtype_Max_Order_By>;
  min?: Maybe<Commercial_Property_Subtype_Min_Order_By>;
  stddev?: Maybe<Commercial_Property_Subtype_Stddev_Order_By>;
  stddev_pop?: Maybe<Commercial_Property_Subtype_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Commercial_Property_Subtype_Stddev_Samp_Order_By>;
  sum?: Maybe<Commercial_Property_Subtype_Sum_Order_By>;
  var_pop?: Maybe<Commercial_Property_Subtype_Var_Pop_Order_By>;
  var_samp?: Maybe<Commercial_Property_Subtype_Var_Samp_Order_By>;
  variance?: Maybe<Commercial_Property_Subtype_Variance_Order_By>;
};

/** aggregate avg on columns */
export type Commercial_Property_Subtype_Avg_Fields = {
  __typename?: 'commercial_property_subtype_avg_fields';
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Avg_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/**
 * Boolean expression to filter rows from the table "commercial_property_subtype".
 * All fields are combined with a logical 'AND'.
 */
export type Commercial_Property_Subtype_Bool_Exp = {
  _and?: Maybe<Array<Commercial_Property_Subtype_Bool_Exp>>;
  _not?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
  _or?: Maybe<Array<Commercial_Property_Subtype_Bool_Exp>>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  property_type?: Maybe<Commercial_Property_Type_Bool_Exp>;
  subtype?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Commercial_Property_Subtype_Max_Fields = {
  __typename?: 'commercial_property_subtype_max_fields';
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  subtype?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Max_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  subtype?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Commercial_Property_Subtype_Min_Fields = {
  __typename?: 'commercial_property_subtype_min_fields';
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  subtype?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Min_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  subtype?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** Ordering options when selecting data from "commercial_property_subtype". */
export type Commercial_Property_Subtype_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  property_type?: Maybe<Commercial_Property_Type_Order_By>;
  subtype?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "commercial_property_subtype" */
export enum Commercial_Property_Subtype_Select_Column {
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Subtype = 'subtype',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Commercial_Property_Subtype_Stddev_Fields = {
  __typename?: 'commercial_property_subtype_stddev_fields';
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Stddev_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Commercial_Property_Subtype_Stddev_Pop_Fields = {
  __typename?: 'commercial_property_subtype_stddev_pop_fields';
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Stddev_Pop_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Commercial_Property_Subtype_Stddev_Samp_Fields = {
  __typename?: 'commercial_property_subtype_stddev_samp_fields';
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Stddev_Samp_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/** Streaming cursor of the table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Commercial_Property_Subtype_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Commercial_Property_Subtype_Stream_Cursor_Value_Input = {
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  subtype?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Commercial_Property_Subtype_Sum_Fields = {
  __typename?: 'commercial_property_subtype_sum_fields';
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Sum_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/** aggregate var_pop on columns */
export type Commercial_Property_Subtype_Var_Pop_Fields = {
  __typename?: 'commercial_property_subtype_var_pop_fields';
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Var_Pop_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Commercial_Property_Subtype_Var_Samp_Fields = {
  __typename?: 'commercial_property_subtype_var_samp_fields';
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Var_Samp_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Commercial_Property_Subtype_Variance_Fields = {
  __typename?: 'commercial_property_subtype_variance_fields';
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "commercial_property_subtype" */
export type Commercial_Property_Subtype_Variance_Order_By = {
  commercial_property_type_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
};

/** columns and relationships of "commercial_property_type" */
export type Commercial_Property_Type = {
  __typename?: 'commercial_property_type';
  created_at: Scalars['timestamptz'];
  id: Scalars['Int'];
  order?: Maybe<Scalars['Int']>;
  /** An array relationship */
  property_subtypes: Array<Commercial_Property_Subtype>;
  /** An aggregate relationship */
  property_subtypes_aggregate: Commercial_Property_Subtype_Aggregate;
  type?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
};

/** columns and relationships of "commercial_property_type" */
export type Commercial_Property_TypeProperty_SubtypesArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Subtype_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Subtype_Order_By>>;
  where?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
};

/** columns and relationships of "commercial_property_type" */
export type Commercial_Property_TypeProperty_Subtypes_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Subtype_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Subtype_Order_By>>;
  where?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
};

/** aggregated selection of "commercial_property_type" */
export type Commercial_Property_Type_Aggregate = {
  __typename?: 'commercial_property_type_aggregate';
  aggregate?: Maybe<Commercial_Property_Type_Aggregate_Fields>;
  nodes: Array<Commercial_Property_Type>;
};

/** aggregate fields of "commercial_property_type" */
export type Commercial_Property_Type_Aggregate_Fields = {
  __typename?: 'commercial_property_type_aggregate_fields';
  avg?: Maybe<Commercial_Property_Type_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Commercial_Property_Type_Max_Fields>;
  min?: Maybe<Commercial_Property_Type_Min_Fields>;
  stddev?: Maybe<Commercial_Property_Type_Stddev_Fields>;
  stddev_pop?: Maybe<Commercial_Property_Type_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Commercial_Property_Type_Stddev_Samp_Fields>;
  sum?: Maybe<Commercial_Property_Type_Sum_Fields>;
  var_pop?: Maybe<Commercial_Property_Type_Var_Pop_Fields>;
  var_samp?: Maybe<Commercial_Property_Type_Var_Samp_Fields>;
  variance?: Maybe<Commercial_Property_Type_Variance_Fields>;
};

/** aggregate fields of "commercial_property_type" */
export type Commercial_Property_Type_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Commercial_Property_Type_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Commercial_Property_Type_Avg_Fields = {
  __typename?: 'commercial_property_type_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "commercial_property_type". All fields are combined with a logical 'AND'. */
export type Commercial_Property_Type_Bool_Exp = {
  _and?: Maybe<Array<Commercial_Property_Type_Bool_Exp>>;
  _not?: Maybe<Commercial_Property_Type_Bool_Exp>;
  _or?: Maybe<Array<Commercial_Property_Type_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  property_subtypes?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Commercial_Property_Type_Max_Fields = {
  __typename?: 'commercial_property_type_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Commercial_Property_Type_Min_Fields = {
  __typename?: 'commercial_property_type_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "commercial_property_type". */
export type Commercial_Property_Type_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  property_subtypes_aggregate?: Maybe<Commercial_Property_Subtype_Aggregate_Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "commercial_property_type" */
export enum Commercial_Property_Type_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Commercial_Property_Type_Stddev_Fields = {
  __typename?: 'commercial_property_type_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Commercial_Property_Type_Stddev_Pop_Fields = {
  __typename?: 'commercial_property_type_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Commercial_Property_Type_Stddev_Samp_Fields = {
  __typename?: 'commercial_property_type_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "commercial_property_type" */
export type Commercial_Property_Type_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Commercial_Property_Type_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Commercial_Property_Type_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Commercial_Property_Type_Sum_Fields = {
  __typename?: 'commercial_property_type_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Commercial_Property_Type_Var_Pop_Fields = {
  __typename?: 'commercial_property_type_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Commercial_Property_Type_Var_Samp_Fields = {
  __typename?: 'commercial_property_type_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Commercial_Property_Type_Variance_Fields = {
  __typename?: 'commercial_property_type_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "commercial_property_types" */
export type Commercial_Property_Types = {
  __typename?: 'commercial_property_types';
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** aggregated selection of "commercial_property_types" */
export type Commercial_Property_Types_Aggregate = {
  __typename?: 'commercial_property_types_aggregate';
  aggregate?: Maybe<Commercial_Property_Types_Aggregate_Fields>;
  nodes: Array<Commercial_Property_Types>;
};

/** aggregate fields of "commercial_property_types" */
export type Commercial_Property_Types_Aggregate_Fields = {
  __typename?: 'commercial_property_types_aggregate_fields';
  avg?: Maybe<Commercial_Property_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Commercial_Property_Types_Max_Fields>;
  min?: Maybe<Commercial_Property_Types_Min_Fields>;
  stddev?: Maybe<Commercial_Property_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Commercial_Property_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Commercial_Property_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Commercial_Property_Types_Sum_Fields>;
  var_pop?: Maybe<Commercial_Property_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Commercial_Property_Types_Var_Samp_Fields>;
  variance?: Maybe<Commercial_Property_Types_Variance_Fields>;
};

/** aggregate fields of "commercial_property_types" */
export type Commercial_Property_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Commercial_Property_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Commercial_Property_Types_Avg_Fields = {
  __typename?: 'commercial_property_types_avg_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "commercial_property_types". All fields are combined with a logical 'AND'. */
export type Commercial_Property_Types_Bool_Exp = {
  _and?: Maybe<Array<Commercial_Property_Types_Bool_Exp>>;
  _not?: Maybe<Commercial_Property_Types_Bool_Exp>;
  _or?: Maybe<Array<Commercial_Property_Types_Bool_Exp>>;
  commercial_property_subtype?: Maybe<String_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
};

/** aggregate max on columns */
export type Commercial_Property_Types_Max_Fields = {
  __typename?: 'commercial_property_types_max_fields';
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** aggregate min on columns */
export type Commercial_Property_Types_Min_Fields = {
  __typename?: 'commercial_property_types_min_fields';
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** Ordering options when selecting data from "commercial_property_types". */
export type Commercial_Property_Types_Order_By = {
  commercial_property_subtype?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
};

/** select columns of table "commercial_property_types" */
export enum Commercial_Property_Types_Select_Column {
  /** column name */
  CommercialPropertySubtype = 'commercial_property_subtype',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyType = 'commercial_property_type',
  /** column name */
  Id = 'id',
}

/** aggregate stddev on columns */
export type Commercial_Property_Types_Stddev_Fields = {
  __typename?: 'commercial_property_types_stddev_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Commercial_Property_Types_Stddev_Pop_Fields = {
  __typename?: 'commercial_property_types_stddev_pop_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Commercial_Property_Types_Stddev_Samp_Fields = {
  __typename?: 'commercial_property_types_stddev_samp_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "commercial_property_types" */
export type Commercial_Property_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Commercial_Property_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Commercial_Property_Types_Stream_Cursor_Value_Input = {
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Commercial_Property_Types_Sum_Fields = {
  __typename?: 'commercial_property_types_sum_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Commercial_Property_Types_Var_Pop_Fields = {
  __typename?: 'commercial_property_types_var_pop_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Commercial_Property_Types_Var_Samp_Fields = {
  __typename?: 'commercial_property_types_var_samp_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Commercial_Property_Types_Variance_Fields = {
  __typename?: 'commercial_property_types_variance_fields';
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "contact" */
export type Contact = {
  __typename?: 'contact';
  appraisals_count: Scalars['Int'];
  /** An object relationship */
  client?: Maybe<Client>;
  client_id?: Maybe<Scalars['uuid']>;
  contact_type_id: Scalars['Int'];
  created_at: Scalars['timestamptz'];
  /** A computed field, executes function "contact_created_by_user_accout_id" */
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id: Scalars['uuid'];
  phone_number?: Maybe<Scalars['String']>;
  primary?: Maybe<Scalars['Boolean']>;
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id: Scalars['uuid'];
};

/** columns and relationships of "contact" */
export type ContactLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "contact_activities" */
export type Contact_Activities = {
  __typename?: 'contact_activities';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  changes?: Maybe<Scalars['jsonb']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** columns and relationships of "contact_activities" */
export type Contact_ActivitiesChangesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "contact_activities" */
export type Contact_ActivitiesContact_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "contact_activities" */
export type Contact_ActivitiesNotesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "contact_activities" */
export type Contact_Activities_Aggregate = {
  __typename?: 'contact_activities_aggregate';
  aggregate?: Maybe<Contact_Activities_Aggregate_Fields>;
  nodes: Array<Contact_Activities>;
};

/** aggregate fields of "contact_activities" */
export type Contact_Activities_Aggregate_Fields = {
  __typename?: 'contact_activities_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Contact_Activities_Max_Fields>;
  min?: Maybe<Contact_Activities_Min_Fields>;
};

/** aggregate fields of "contact_activities" */
export type Contact_Activities_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Activities_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "contact_activities". All fields are combined with a logical 'AND'. */
export type Contact_Activities_Bool_Exp = {
  _and?: Maybe<Array<Contact_Activities_Bool_Exp>>;
  _not?: Maybe<Contact_Activities_Bool_Exp>;
  _or?: Maybe<Array<Contact_Activities_Bool_Exp>>;
  activity?: Maybe<String_Comparison_Exp>;
  activity_id?: Maybe<Uuid_Comparison_Exp>;
  appraisal_file_number?: Maybe<String_Comparison_Exp>;
  appraisal_location_address?: Maybe<String_Comparison_Exp>;
  appraisal_status?: Maybe<String_Comparison_Exp>;
  changes?: Maybe<Jsonb_Comparison_Exp>;
  commit_timestamp?: Maybe<Timestamptz_Comparison_Exp>;
  contact_ids?: Maybe<Jsonb_Comparison_Exp>;
  notes?: Maybe<Jsonb_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  timestamp_group_by?: Maybe<Timestamptz_Comparison_Exp>;
  type?: Maybe<Activity_Type_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_name?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Contact_Activities_Max_Fields = {
  __typename?: 'contact_activities_max_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Contact_Activities_Min_Fields = {
  __typename?: 'contact_activities_min_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "contact_activities". */
export type Contact_Activities_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_location_address?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  changes?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  contact_ids?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** select columns of table "contact_activities" */
export enum Contact_Activities_Select_Column {
  /** column name */
  Activity = 'activity',
  /** column name */
  ActivityId = 'activity_id',
  /** column name */
  AppraisalFileNumber = 'appraisal_file_number',
  /** column name */
  AppraisalLocationAddress = 'appraisal_location_address',
  /** column name */
  AppraisalStatus = 'appraisal_status',
  /** column name */
  Changes = 'changes',
  /** column name */
  CommitTimestamp = 'commit_timestamp',
  /** column name */
  ContactIds = 'contact_ids',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  TimestampGroupBy = 'timestamp_group_by',
  /** column name */
  Type = 'type',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  UserAccountName = 'user_account_name',
}

/** Streaming cursor of the table "contact_activities" */
export type Contact_Activities_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Contact_Activities_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Contact_Activities_Stream_Cursor_Value_Input = {
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  changes?: Maybe<Scalars['jsonb']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_ids?: Maybe<Scalars['jsonb']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** aggregated selection of "contact" */
export type Contact_Aggregate = {
  __typename?: 'contact_aggregate';
  aggregate?: Maybe<Contact_Aggregate_Fields>;
  nodes: Array<Contact>;
};

/** aggregate fields of "contact" */
export type Contact_Aggregate_Fields = {
  __typename?: 'contact_aggregate_fields';
  avg?: Maybe<Contact_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Contact_Max_Fields>;
  min?: Maybe<Contact_Min_Fields>;
  stddev?: Maybe<Contact_Stddev_Fields>;
  stddev_pop?: Maybe<Contact_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Contact_Stddev_Samp_Fields>;
  sum?: Maybe<Contact_Sum_Fields>;
  var_pop?: Maybe<Contact_Var_Pop_Fields>;
  var_samp?: Maybe<Contact_Var_Samp_Fields>;
  variance?: Maybe<Contact_Variance_Fields>;
};

/** aggregate fields of "contact" */
export type Contact_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contact" */
export type Contact_Aggregate_Order_By = {
  avg?: Maybe<Contact_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Contact_Max_Order_By>;
  min?: Maybe<Contact_Min_Order_By>;
  stddev?: Maybe<Contact_Stddev_Order_By>;
  stddev_pop?: Maybe<Contact_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Contact_Stddev_Samp_Order_By>;
  sum?: Maybe<Contact_Sum_Order_By>;
  var_pop?: Maybe<Contact_Var_Pop_Order_By>;
  var_samp?: Maybe<Contact_Var_Samp_Order_By>;
  variance?: Maybe<Contact_Variance_Order_By>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Contact_Append_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** input type for inserting array relation for remote table "contact" */
export type Contact_Arr_Rel_Insert_Input = {
  data: Array<Contact_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Contact_On_Conflict>;
};

/** aggregate avg on columns */
export type Contact_Avg_Fields = {
  __typename?: 'contact_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "contact" */
export type Contact_Avg_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "contact". All fields are combined with a logical 'AND'. */
export type Contact_Bool_Exp = {
  _and?: Maybe<Array<Contact_Bool_Exp>>;
  _not?: Maybe<Contact_Bool_Exp>;
  _or?: Maybe<Array<Contact_Bool_Exp>>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  client?: Maybe<Client_Bool_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  contact_type_id?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  first_name?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  last_name?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  phone_number?: Maybe<String_Comparison_Exp>;
  primary?: Maybe<Boolean_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "contact" */
export enum Contact_Constraint {
  /** unique or primary key constraint on columns "id" */
  ContactPkey = 'contact_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Contact_Delete_At_Path_Input = {
  location_components?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Contact_Delete_Elem_Input = {
  location_components?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Contact_Delete_Key_Input = {
  location_components?: Maybe<Scalars['String']>;
};

/** input type for incrementing numeric columns in table "contact" */
export type Contact_Inc_Input = {
  contact_type_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "contact" */
export type Contact_Insert_Input = {
  client?: Maybe<Client_Obj_Rel_Insert_Input>;
  client_id?: Maybe<Scalars['uuid']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  primary?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Contact_Max_Fields = {
  __typename?: 'contact_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_id?: Maybe<Scalars['uuid']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "contact" */
export type Contact_Max_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  first_name?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_name?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Contact_Min_Fields = {
  __typename?: 'contact_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_id?: Maybe<Scalars['uuid']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "contact" */
export type Contact_Min_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  first_name?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_name?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "contact" */
export type Contact_Mutation_Response = {
  __typename?: 'contact_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contact>;
};

/** on_conflict condition type for table "contact" */
export type Contact_On_Conflict = {
  constraint: Contact_Constraint;
  update_columns: Array<Contact_Update_Column>;
  where?: Maybe<Contact_Bool_Exp>;
};

/** Ordering options when selecting data from "contact". */
export type Contact_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client?: Maybe<Client_Order_By>;
  client_id?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_account_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  first_name?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_name?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  primary?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: contact */
export type Contact_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Contact_Prepend_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "contact" */
export enum Contact_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ContactTypeId = 'contact_type_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  FirstName = 'first_name',
  /** column name */
  Id = 'id',
  /** column name */
  LastName = 'last_name',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  Primary = 'primary',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "contact" */
export type Contact_Set_Input = {
  client_id?: Maybe<Scalars['uuid']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  primary?: Maybe<Scalars['Boolean']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Contact_Stddev_Fields = {
  __typename?: 'contact_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "contact" */
export type Contact_Stddev_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Contact_Stddev_Pop_Fields = {
  __typename?: 'contact_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "contact" */
export type Contact_Stddev_Pop_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Contact_Stddev_Samp_Fields = {
  __typename?: 'contact_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "contact" */
export type Contact_Stddev_Samp_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** Streaming cursor of the table "contact" */
export type Contact_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Contact_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Contact_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  client_id?: Maybe<Scalars['uuid']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  primary?: Maybe<Scalars['Boolean']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Contact_Sum_Fields = {
  __typename?: 'contact_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  contact_type_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "contact" */
export type Contact_Sum_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** columns and relationships of "contact_types" */
export type Contact_Types = {
  __typename?: 'contact_types';
  client_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "contact_types" */
export type Contact_Types_Aggregate = {
  __typename?: 'contact_types_aggregate';
  aggregate?: Maybe<Contact_Types_Aggregate_Fields>;
  nodes: Array<Contact_Types>;
};

/** aggregate fields of "contact_types" */
export type Contact_Types_Aggregate_Fields = {
  __typename?: 'contact_types_aggregate_fields';
  avg?: Maybe<Contact_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Contact_Types_Max_Fields>;
  min?: Maybe<Contact_Types_Min_Fields>;
  stddev?: Maybe<Contact_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Contact_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Contact_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Contact_Types_Sum_Fields>;
  var_pop?: Maybe<Contact_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Contact_Types_Var_Samp_Fields>;
  variance?: Maybe<Contact_Types_Variance_Fields>;
};

/** aggregate fields of "contact_types" */
export type Contact_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contact_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Contact_Types_Avg_Fields = {
  __typename?: 'contact_types_avg_fields';
  client_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "contact_types". All fields are combined with a logical 'AND'. */
export type Contact_Types_Bool_Exp = {
  _and?: Maybe<Array<Contact_Types_Bool_Exp>>;
  _not?: Maybe<Contact_Types_Bool_Exp>;
  _or?: Maybe<Array<Contact_Types_Bool_Exp>>;
  client_type_id?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Contact_Types_Max_Fields = {
  __typename?: 'contact_types_max_fields';
  client_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Contact_Types_Min_Fields = {
  __typename?: 'contact_types_min_fields';
  client_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "contact_types". */
export type Contact_Types_Order_By = {
  client_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "contact_types" */
export enum Contact_Types_Select_Column {
  /** column name */
  ClientTypeId = 'client_type_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Contact_Types_Stddev_Fields = {
  __typename?: 'contact_types_stddev_fields';
  client_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Contact_Types_Stddev_Pop_Fields = {
  __typename?: 'contact_types_stddev_pop_fields';
  client_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Contact_Types_Stddev_Samp_Fields = {
  __typename?: 'contact_types_stddev_samp_fields';
  client_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "contact_types" */
export type Contact_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Contact_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Contact_Types_Stream_Cursor_Value_Input = {
  client_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Contact_Types_Sum_Fields = {
  __typename?: 'contact_types_sum_fields';
  client_type_id?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Contact_Types_Var_Pop_Fields = {
  __typename?: 'contact_types_var_pop_fields';
  client_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Contact_Types_Var_Samp_Fields = {
  __typename?: 'contact_types_var_samp_fields';
  client_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Contact_Types_Variance_Fields = {
  __typename?: 'contact_types_variance_fields';
  client_type_id?: Maybe<Scalars['Float']>;
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** update columns of table "contact" */
export enum Contact_Update_Column {
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ContactTypeId = 'contact_type_id',
  /** column name */
  Email = 'email',
  /** column name */
  FirstName = 'first_name',
  /** column name */
  LastName = 'last_name',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  Primary = 'primary',
  /** column name */
  Url = 'url',
}

export type Contact_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Contact_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Contact_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Contact_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Contact_Delete_Key_Input>;
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Contact_Inc_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Contact_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Contact_Set_Input>;
  where: Contact_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Contact_Var_Pop_Fields = {
  __typename?: 'contact_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "contact" */
export type Contact_Var_Pop_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Contact_Var_Samp_Fields = {
  __typename?: 'contact_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "contact" */
export type Contact_Var_Samp_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Contact_Variance_Fields = {
  __typename?: 'contact_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "contact" */
export type Contact_Variance_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
};

/** columns and relationships of "contacts" */
export type Contacts = {
  __typename?: 'contacts';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  primary?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** columns and relationships of "contacts" */
export type ContactsLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "contacts" */
export type Contacts_Aggregate = {
  __typename?: 'contacts_aggregate';
  aggregate?: Maybe<Contacts_Aggregate_Fields>;
  nodes: Array<Contacts>;
};

/** aggregate fields of "contacts" */
export type Contacts_Aggregate_Fields = {
  __typename?: 'contacts_aggregate_fields';
  avg?: Maybe<Contacts_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Contacts_Max_Fields>;
  min?: Maybe<Contacts_Min_Fields>;
  stddev?: Maybe<Contacts_Stddev_Fields>;
  stddev_pop?: Maybe<Contacts_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Contacts_Stddev_Samp_Fields>;
  sum?: Maybe<Contacts_Sum_Fields>;
  var_pop?: Maybe<Contacts_Var_Pop_Fields>;
  var_samp?: Maybe<Contacts_Var_Samp_Fields>;
  variance?: Maybe<Contacts_Variance_Fields>;
};

/** aggregate fields of "contacts" */
export type Contacts_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Contacts_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Contacts_Avg_Fields = {
  __typename?: 'contacts_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "contacts". All fields are combined with a logical 'AND'. */
export type Contacts_Bool_Exp = {
  _and?: Maybe<Array<Contacts_Bool_Exp>>;
  _not?: Maybe<Contacts_Bool_Exp>;
  _or?: Maybe<Array<Contacts_Bool_Exp>>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  client_id?: Maybe<Uuid_Comparison_Exp>;
  client_name?: Maybe<String_Comparison_Exp>;
  contact_type_id?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  created_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  first_name?: Maybe<String_Comparison_Exp>;
  full_name?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  last_name?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  phone_number?: Maybe<String_Comparison_Exp>;
  primary?: Maybe<Boolean_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Contacts_Max_Fields = {
  __typename?: 'contacts_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Contacts_Min_Fields = {
  __typename?: 'contacts_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "contacts". */
export type Contacts_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  client_id?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  contact_type_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  created_by_user_account_id?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  first_name?: Maybe<Order_By>;
  full_name?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_name?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  primary?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
};

/** select columns of table "contacts" */
export enum Contacts_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  ClientId = 'client_id',
  /** column name */
  ClientName = 'client_name',
  /** column name */
  ContactTypeId = 'contact_type_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  CreatedByUserAccountId = 'created_by_user_account_id',
  /** column name */
  Email = 'email',
  /** column name */
  FirstName = 'first_name',
  /** column name */
  FullName = 'full_name',
  /** column name */
  Id = 'id',
  /** column name */
  LastName = 'last_name',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  Primary = 'primary',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
}

/** aggregate stddev on columns */
export type Contacts_Stddev_Fields = {
  __typename?: 'contacts_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Contacts_Stddev_Pop_Fields = {
  __typename?: 'contacts_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Contacts_Stddev_Samp_Fields = {
  __typename?: 'contacts_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "contacts" */
export type Contacts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Contacts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Contacts_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  client_id?: Maybe<Scalars['uuid']>;
  client_name?: Maybe<Scalars['String']>;
  contact_type_id?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  created_by_user_account_id?: Maybe<Scalars['uuid']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  primary?: Maybe<Scalars['Boolean']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Contacts_Sum_Fields = {
  __typename?: 'contacts_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  contact_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Contacts_Var_Pop_Fields = {
  __typename?: 'contacts_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Contacts_Var_Samp_Fields = {
  __typename?: 'contacts_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Contacts_Variance_Fields = {
  __typename?: 'contacts_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  contact_type_id?: Maybe<Scalars['Float']>;
};

/** ordering argument of a cursor */
export enum Cursor_Ordering {
  /** ascending ordering of the cursor */
  Asc = 'ASC',
  /** descending ordering of the cursor */
  Desc = 'DESC',
}

/** columns and relationships of "expense" */
export type Expense = {
  __typename?: 'expense';
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  description: Scalars['String'];
  expense_date?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  organization_id: Scalars['uuid'];
  quantity: Scalars['Int'];
  rate: Scalars['numeric'];
  total_amount: Scalars['numeric'];
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id: Scalars['uuid'];
};

/** aggregated selection of "expense" */
export type Expense_Aggregate = {
  __typename?: 'expense_aggregate';
  aggregate?: Maybe<Expense_Aggregate_Fields>;
  nodes: Array<Expense>;
};

/** aggregate fields of "expense" */
export type Expense_Aggregate_Fields = {
  __typename?: 'expense_aggregate_fields';
  avg?: Maybe<Expense_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Expense_Max_Fields>;
  min?: Maybe<Expense_Min_Fields>;
  stddev?: Maybe<Expense_Stddev_Fields>;
  stddev_pop?: Maybe<Expense_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Expense_Stddev_Samp_Fields>;
  sum?: Maybe<Expense_Sum_Fields>;
  var_pop?: Maybe<Expense_Var_Pop_Fields>;
  var_samp?: Maybe<Expense_Var_Samp_Fields>;
  variance?: Maybe<Expense_Variance_Fields>;
};

/** aggregate fields of "expense" */
export type Expense_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Expense_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Expense_Avg_Fields = {
  __typename?: 'expense_avg_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "expense". All fields are combined with a logical 'AND'. */
export type Expense_Bool_Exp = {
  _and?: Maybe<Array<Expense_Bool_Exp>>;
  _not?: Maybe<Expense_Bool_Exp>;
  _or?: Maybe<Array<Expense_Bool_Exp>>;
  assigned_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  expense_date?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  quantity?: Maybe<Int_Comparison_Exp>;
  rate?: Maybe<Numeric_Comparison_Exp>;
  total_amount?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "expense" */
export enum Expense_Constraint {
  /** unique or primary key constraint on columns "id" */
  ExpensePkey = 'expense_pkey',
}

/** input type for incrementing numeric columns in table "expense" */
export type Expense_Inc_Input = {
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "expense" */
export type Expense_Insert_Input = {
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
};

/** aggregate max on columns */
export type Expense_Max_Fields = {
  __typename?: 'expense_max_fields';
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Expense_Min_Fields = {
  __typename?: 'expense_min_fields';
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "expense" */
export type Expense_Mutation_Response = {
  __typename?: 'expense_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Expense>;
};

/** on_conflict condition type for table "expense" */
export type Expense_On_Conflict = {
  constraint: Expense_Constraint;
  update_columns: Array<Expense_Update_Column>;
  where?: Maybe<Expense_Bool_Exp>;
};

/** Ordering options when selecting data from "expense". */
export type Expense_Order_By = {
  assigned_user_account_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  expense_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: expense */
export type Expense_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "expense" */
export enum Expense_Select_Column {
  /** column name */
  AssignedUserAccountId = 'assigned_user_account_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  ExpenseDate = 'expense_date',
  /** column name */
  Id = 'id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  TotalAmount = 'total_amount',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "expense" */
export type Expense_Set_Input = {
  description?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
};

/** aggregate stddev on columns */
export type Expense_Stddev_Fields = {
  __typename?: 'expense_stddev_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Expense_Stddev_Pop_Fields = {
  __typename?: 'expense_stddev_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Expense_Stddev_Samp_Fields = {
  __typename?: 'expense_stddev_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "expense" */
export type Expense_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Expense_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Expense_Stream_Cursor_Value_Input = {
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Expense_Sum_Fields = {
  __typename?: 'expense_sum_fields';
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  total_amount?: Maybe<Scalars['numeric']>;
};

/** update columns of table "expense" */
export enum Expense_Update_Column {
  /** column name */
  Description = 'description',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
}

export type Expense_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Expense_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Expense_Set_Input>;
  where: Expense_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Expense_Var_Pop_Fields = {
  __typename?: 'expense_var_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Expense_Var_Samp_Fields = {
  __typename?: 'expense_var_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Expense_Variance_Fields = {
  __typename?: 'expense_variance_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "expenses" */
export type Expenses = {
  __typename?: 'expenses';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  expense_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "expenses" */
export type Expenses_Aggregate = {
  __typename?: 'expenses_aggregate';
  aggregate?: Maybe<Expenses_Aggregate_Fields>;
  nodes: Array<Expenses>;
};

/** aggregate fields of "expenses" */
export type Expenses_Aggregate_Fields = {
  __typename?: 'expenses_aggregate_fields';
  avg?: Maybe<Expenses_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Expenses_Max_Fields>;
  min?: Maybe<Expenses_Min_Fields>;
  stddev?: Maybe<Expenses_Stddev_Fields>;
  stddev_pop?: Maybe<Expenses_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Expenses_Stddev_Samp_Fields>;
  sum?: Maybe<Expenses_Sum_Fields>;
  var_pop?: Maybe<Expenses_Var_Pop_Fields>;
  var_samp?: Maybe<Expenses_Var_Samp_Fields>;
  variance?: Maybe<Expenses_Variance_Fields>;
};

/** aggregate fields of "expenses" */
export type Expenses_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Expenses_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Expenses_Avg_Fields = {
  __typename?: 'expenses_avg_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "expenses". All fields are combined with a logical 'AND'. */
export type Expenses_Bool_Exp = {
  _and?: Maybe<Array<Expenses_Bool_Exp>>;
  _not?: Maybe<Expenses_Bool_Exp>;
  _or?: Maybe<Array<Expenses_Bool_Exp>>;
  appraisal_file_number?: Maybe<String_Comparison_Exp>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  assigned_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  expense_date?: Maybe<Timestamptz_Comparison_Exp>;
  expense_type?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  quantity?: Maybe<Int_Comparison_Exp>;
  rate?: Maybe<Numeric_Comparison_Exp>;
  rate_type_id?: Maybe<Int_Comparison_Exp>;
  total_amount?: Maybe<Numeric_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** aggregate max on columns */
export type Expenses_Max_Fields = {
  __typename?: 'expenses_max_fields';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  expense_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Expenses_Min_Fields = {
  __typename?: 'expenses_min_fields';
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  expense_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** Ordering options when selecting data from "expenses". */
export type Expenses_Order_By = {
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_id?: Maybe<Order_By>;
  assigned_user_account_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  expense_date?: Maybe<Order_By>;
  expense_type?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  quantity?: Maybe<Order_By>;
  rate?: Maybe<Order_By>;
  rate_type_id?: Maybe<Order_By>;
  total_amount?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** select columns of table "expenses" */
export enum Expenses_Select_Column {
  /** column name */
  AppraisalFileNumber = 'appraisal_file_number',
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  AssignedUserAccountId = 'assigned_user_account_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  ExpenseDate = 'expense_date',
  /** column name */
  ExpenseType = 'expense_type',
  /** column name */
  Id = 'id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Quantity = 'quantity',
  /** column name */
  Rate = 'rate',
  /** column name */
  RateTypeId = 'rate_type_id',
  /** column name */
  TotalAmount = 'total_amount',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** aggregate stddev on columns */
export type Expenses_Stddev_Fields = {
  __typename?: 'expenses_stddev_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Expenses_Stddev_Pop_Fields = {
  __typename?: 'expenses_stddev_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Expenses_Stddev_Samp_Fields = {
  __typename?: 'expenses_stddev_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "expenses" */
export type Expenses_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Expenses_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Expenses_Stream_Cursor_Value_Input = {
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  assigned_user_account_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  expense_date?: Maybe<Scalars['timestamptz']>;
  expense_type?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Expenses_Sum_Fields = {
  __typename?: 'expenses_sum_fields';
  quantity?: Maybe<Scalars['Int']>;
  rate?: Maybe<Scalars['numeric']>;
  rate_type_id?: Maybe<Scalars['Int']>;
  total_amount?: Maybe<Scalars['numeric']>;
};

/** aggregate var_pop on columns */
export type Expenses_Var_Pop_Fields = {
  __typename?: 'expenses_var_pop_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Expenses_Var_Samp_Fields = {
  __typename?: 'expenses_var_samp_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Expenses_Variance_Fields = {
  __typename?: 'expenses_variance_fields';
  quantity?: Maybe<Scalars['Float']>;
  rate?: Maybe<Scalars['Float']>;
  rate_type_id?: Maybe<Scalars['Float']>;
  total_amount?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "file" */
export type File = {
  __typename?: 'file';
  created_at: Scalars['timestamptz'];
  filename: Scalars['String'];
  filesize?: Maybe<Scalars['numeric']>;
  filetype: Scalars['String'];
  id: Scalars['uuid'];
  key: Scalars['uuid'];
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  parent: Scalars['parent_type'];
  parent_id: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  user_account: User_Account;
  user_account_id: Scalars['uuid'];
};

/** aggregated selection of "file" */
export type File_Aggregate = {
  __typename?: 'file_aggregate';
  aggregate?: Maybe<File_Aggregate_Fields>;
  nodes: Array<File>;
};

/** aggregate fields of "file" */
export type File_Aggregate_Fields = {
  __typename?: 'file_aggregate_fields';
  avg?: Maybe<File_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<File_Max_Fields>;
  min?: Maybe<File_Min_Fields>;
  stddev?: Maybe<File_Stddev_Fields>;
  stddev_pop?: Maybe<File_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<File_Stddev_Samp_Fields>;
  sum?: Maybe<File_Sum_Fields>;
  var_pop?: Maybe<File_Var_Pop_Fields>;
  var_samp?: Maybe<File_Var_Samp_Fields>;
  variance?: Maybe<File_Variance_Fields>;
};

/** aggregate fields of "file" */
export type File_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<File_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "file" */
export type File_Aggregate_Order_By = {
  avg?: Maybe<File_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<File_Max_Order_By>;
  min?: Maybe<File_Min_Order_By>;
  stddev?: Maybe<File_Stddev_Order_By>;
  stddev_pop?: Maybe<File_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<File_Stddev_Samp_Order_By>;
  sum?: Maybe<File_Sum_Order_By>;
  var_pop?: Maybe<File_Var_Pop_Order_By>;
  var_samp?: Maybe<File_Var_Samp_Order_By>;
  variance?: Maybe<File_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "file" */
export type File_Arr_Rel_Insert_Input = {
  data: Array<File_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<File_On_Conflict>;
};

/** aggregate avg on columns */
export type File_Avg_Fields = {
  __typename?: 'file_avg_fields';
  filesize?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "file" */
export type File_Avg_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "file". All fields are combined with a logical 'AND'. */
export type File_Bool_Exp = {
  _and?: Maybe<Array<File_Bool_Exp>>;
  _not?: Maybe<File_Bool_Exp>;
  _or?: Maybe<Array<File_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  filename?: Maybe<String_Comparison_Exp>;
  filesize?: Maybe<Numeric_Comparison_Exp>;
  filetype?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  key?: Maybe<Uuid_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parent?: Maybe<Parent_Type_Comparison_Exp>;
  parent_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account?: Maybe<User_Account_Bool_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "file" */
export enum File_Constraint {
  /** unique or primary key constraint on columns "key" */
  FileKeyKey = 'file_key_key',
  /** unique or primary key constraint on columns "id" */
  FilePkey = 'file_pkey',
}

/** input type for inserting data into table "file" */
export type File_Insert_Input = {
  filename?: Maybe<Scalars['String']>;
  filesize?: Maybe<Scalars['numeric']>;
  filetype?: Maybe<Scalars['String']>;
  key?: Maybe<Scalars['uuid']>;
  parent?: Maybe<Scalars['parent_type']>;
  parent_id?: Maybe<Scalars['uuid']>;
  user_account?: Maybe<User_Account_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type File_Max_Fields = {
  __typename?: 'file_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  filename?: Maybe<Scalars['String']>;
  filesize?: Maybe<Scalars['numeric']>;
  filetype?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  key?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parent?: Maybe<Scalars['parent_type']>;
  parent_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "file" */
export type File_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  filename?: Maybe<Order_By>;
  filesize?: Maybe<Order_By>;
  filetype?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  key?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parent?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type File_Min_Fields = {
  __typename?: 'file_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  filename?: Maybe<Scalars['String']>;
  filesize?: Maybe<Scalars['numeric']>;
  filetype?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  key?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parent?: Maybe<Scalars['parent_type']>;
  parent_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "file" */
export type File_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  filename?: Maybe<Order_By>;
  filesize?: Maybe<Order_By>;
  filetype?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  key?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parent?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "file" */
export type File_Mutation_Response = {
  __typename?: 'file_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<File>;
};

/** on_conflict condition type for table "file" */
export type File_On_Conflict = {
  constraint: File_Constraint;
  update_columns: Array<File_Update_Column>;
  where?: Maybe<File_Bool_Exp>;
};

/** Ordering options when selecting data from "file". */
export type File_Order_By = {
  created_at?: Maybe<Order_By>;
  filename?: Maybe<Order_By>;
  filesize?: Maybe<Order_By>;
  filetype?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  key?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  parent?: Maybe<Order_By>;
  parent_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account?: Maybe<User_Account_Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: file */
export type File_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "file" */
export enum File_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Filename = 'filename',
  /** column name */
  Filesize = 'filesize',
  /** column name */
  Filetype = 'filetype',
  /** column name */
  Id = 'id',
  /** column name */
  Key = 'key',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Parent = 'parent',
  /** column name */
  ParentId = 'parent_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "file" */
export type File_Set_Input = {
  deleted_at?: Maybe<Scalars['timestamptz']>;
  filename?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type File_Stddev_Fields = {
  __typename?: 'file_stddev_fields';
  filesize?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "file" */
export type File_Stddev_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type File_Stddev_Pop_Fields = {
  __typename?: 'file_stddev_pop_fields';
  filesize?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "file" */
export type File_Stddev_Pop_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type File_Stddev_Samp_Fields = {
  __typename?: 'file_stddev_samp_fields';
  filesize?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "file" */
export type File_Stddev_Samp_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** Streaming cursor of the table "file" */
export type File_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: File_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type File_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  filename?: Maybe<Scalars['String']>;
  filesize?: Maybe<Scalars['numeric']>;
  filetype?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  key?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parent?: Maybe<Scalars['parent_type']>;
  parent_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type File_Sum_Fields = {
  __typename?: 'file_sum_fields';
  filesize?: Maybe<Scalars['numeric']>;
};

/** order by sum() on columns of table "file" */
export type File_Sum_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** update columns of table "file" */
export enum File_Update_Column {
  /** column name */
  DeletedAt = 'deleted_at',
  /** column name */
  Filename = 'filename',
}

export type File_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<File_Set_Input>;
  where: File_Bool_Exp;
};

/** aggregate var_pop on columns */
export type File_Var_Pop_Fields = {
  __typename?: 'file_var_pop_fields';
  filesize?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "file" */
export type File_Var_Pop_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type File_Var_Samp_Fields = {
  __typename?: 'file_var_samp_fields';
  filesize?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "file" */
export type File_Var_Samp_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type File_Variance_Fields = {
  __typename?: 'file_variance_fields';
  filesize?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "file" */
export type File_Variance_Order_By = {
  filesize?: Maybe<Order_By>;
};

/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
export type Float8_Comparison_Exp = {
  _eq?: Maybe<Scalars['float8']>;
  _gt?: Maybe<Scalars['float8']>;
  _gte?: Maybe<Scalars['float8']>;
  _in?: Maybe<Array<Scalars['float8']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['float8']>;
  _lte?: Maybe<Scalars['float8']>;
  _neq?: Maybe<Scalars['float8']>;
  _nin?: Maybe<Array<Scalars['float8']>>;
};

export type Geography_Cast_Exp = {
  geometry?: Maybe<Geometry_Comparison_Exp>;
};

/** Boolean expression to compare columns of type "geography". All fields are combined with logical 'AND'. */
export type Geography_Comparison_Exp = {
  _cast?: Maybe<Geography_Cast_Exp>;
  _eq?: Maybe<Scalars['geography']>;
  _gt?: Maybe<Scalars['geography']>;
  _gte?: Maybe<Scalars['geography']>;
  _in?: Maybe<Array<Scalars['geography']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['geography']>;
  _lte?: Maybe<Scalars['geography']>;
  _neq?: Maybe<Scalars['geography']>;
  _nin?: Maybe<Array<Scalars['geography']>>;
  /** is the column within a given distance from the given geography value */
  _st_d_within?: Maybe<St_D_Within_Geography_Input>;
  /** does the column spatially intersect the given geography value */
  _st_intersects?: Maybe<Scalars['geography']>;
};

export type Geometry_Cast_Exp = {
  geography?: Maybe<Geography_Comparison_Exp>;
};

/** Boolean expression to compare columns of type "geometry". All fields are combined with logical 'AND'. */
export type Geometry_Comparison_Exp = {
  _cast?: Maybe<Geometry_Cast_Exp>;
  _eq?: Maybe<Scalars['geometry']>;
  _gt?: Maybe<Scalars['geometry']>;
  _gte?: Maybe<Scalars['geometry']>;
  _in?: Maybe<Array<Scalars['geometry']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['geometry']>;
  _lte?: Maybe<Scalars['geometry']>;
  _neq?: Maybe<Scalars['geometry']>;
  _nin?: Maybe<Array<Scalars['geometry']>>;
  /** is the column within a given 3D distance from the given geometry value */
  _st_3d_d_within?: Maybe<St_D_Within_Input>;
  /** does the column spatially intersect the given geometry value in 3D */
  _st_3d_intersects?: Maybe<Scalars['geometry']>;
  /** does the column contain the given geometry value */
  _st_contains?: Maybe<Scalars['geometry']>;
  /** does the column cross the given geometry value */
  _st_crosses?: Maybe<Scalars['geometry']>;
  /** is the column within a given distance from the given geometry value */
  _st_d_within?: Maybe<St_D_Within_Input>;
  /** is the column equal to given geometry value (directionality is ignored) */
  _st_equals?: Maybe<Scalars['geometry']>;
  /** does the column spatially intersect the given geometry value */
  _st_intersects?: Maybe<Scalars['geometry']>;
  /** does the column 'spatially overlap' (intersect but not completely contain) the given geometry value */
  _st_overlaps?: Maybe<Scalars['geometry']>;
  /** does the column have atleast one point in common with the given geometry value */
  _st_touches?: Maybe<Scalars['geometry']>;
  /** is the column contained in the given geometry value */
  _st_within?: Maybe<Scalars['geometry']>;
};

/** columns and relationships of "insights" */
export type Insights = {
  __typename?: 'insights';
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  average_time_to_pay?: Maybe<Scalars['float8']>;
  average_turn_around?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "insights" */
export type InsightsAssignee_User_Account_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "insights" */
export type Insights_Aggregate = {
  __typename?: 'insights_aggregate';
  aggregate?: Maybe<Insights_Aggregate_Fields>;
  nodes: Array<Insights>;
};

/** aggregate fields of "insights" */
export type Insights_Aggregate_Fields = {
  __typename?: 'insights_aggregate_fields';
  avg?: Maybe<Insights_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Insights_Max_Fields>;
  min?: Maybe<Insights_Min_Fields>;
  stddev?: Maybe<Insights_Stddev_Fields>;
  stddev_pop?: Maybe<Insights_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Insights_Stddev_Samp_Fields>;
  sum?: Maybe<Insights_Sum_Fields>;
  var_pop?: Maybe<Insights_Var_Pop_Fields>;
  var_samp?: Maybe<Insights_Var_Samp_Fields>;
  variance?: Maybe<Insights_Variance_Fields>;
};

/** aggregate fields of "insights" */
export type Insights_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Insights_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Insights_Avg_Fields = {
  __typename?: 'insights_avg_fields';
  average_time_to_pay?: Maybe<Scalars['Float']>;
  average_turn_around?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "insights". All fields are combined with a logical 'AND'. */
export type Insights_Bool_Exp = {
  _and?: Maybe<Array<Insights_Bool_Exp>>;
  _not?: Maybe<Insights_Bool_Exp>;
  _or?: Maybe<Array<Insights_Bool_Exp>>;
  assignee_user_account_ids?: Maybe<Jsonb_Comparison_Exp>;
  average_time_to_pay?: Maybe<Float8_Comparison_Exp>;
  average_turn_around?: Maybe<Float8_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** aggregate max on columns */
export type Insights_Max_Fields = {
  __typename?: 'insights_max_fields';
  average_time_to_pay?: Maybe<Scalars['float8']>;
  average_turn_around?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Insights_Min_Fields = {
  __typename?: 'insights_min_fields';
  average_time_to_pay?: Maybe<Scalars['float8']>;
  average_turn_around?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** Ordering options when selecting data from "insights". */
export type Insights_Order_By = {
  assignee_user_account_ids?: Maybe<Order_By>;
  average_time_to_pay?: Maybe<Order_By>;
  average_turn_around?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** select columns of table "insights" */
export enum Insights_Select_Column {
  /** column name */
  AssigneeUserAccountIds = 'assignee_user_account_ids',
  /** column name */
  AverageTimeToPay = 'average_time_to_pay',
  /** column name */
  AverageTurnAround = 'average_turn_around',
  /** column name */
  Id = 'id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** aggregate stddev on columns */
export type Insights_Stddev_Fields = {
  __typename?: 'insights_stddev_fields';
  average_time_to_pay?: Maybe<Scalars['Float']>;
  average_turn_around?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Insights_Stddev_Pop_Fields = {
  __typename?: 'insights_stddev_pop_fields';
  average_time_to_pay?: Maybe<Scalars['Float']>;
  average_turn_around?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Insights_Stddev_Samp_Fields = {
  __typename?: 'insights_stddev_samp_fields';
  average_time_to_pay?: Maybe<Scalars['Float']>;
  average_turn_around?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "insights" */
export type Insights_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Insights_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Insights_Stream_Cursor_Value_Input = {
  assignee_user_account_ids?: Maybe<Scalars['jsonb']>;
  average_time_to_pay?: Maybe<Scalars['float8']>;
  average_turn_around?: Maybe<Scalars['float8']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Insights_Sum_Fields = {
  __typename?: 'insights_sum_fields';
  average_time_to_pay?: Maybe<Scalars['float8']>;
  average_turn_around?: Maybe<Scalars['float8']>;
};

/** aggregate var_pop on columns */
export type Insights_Var_Pop_Fields = {
  __typename?: 'insights_var_pop_fields';
  average_time_to_pay?: Maybe<Scalars['Float']>;
  average_turn_around?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Insights_Var_Samp_Fields = {
  __typename?: 'insights_var_samp_fields';
  average_time_to_pay?: Maybe<Scalars['Float']>;
  average_turn_around?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Insights_Variance_Fields = {
  __typename?: 'insights_variance_fields';
  average_time_to_pay?: Maybe<Scalars['Float']>;
  average_turn_around?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: Maybe<Scalars['Int']>;
  _gt?: Maybe<Scalars['Int']>;
  _gte?: Maybe<Scalars['Int']>;
  _in?: Maybe<Array<Scalars['Int']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['Int']>;
  _lte?: Maybe<Scalars['Int']>;
  _neq?: Maybe<Scalars['Int']>;
  _nin?: Maybe<Array<Scalars['Int']>>;
};

/** columns and relationships of "integration_authentication" */
export type Integration_Authentication = {
  __typename?: 'integration_authentication';
  active: Scalars['Boolean'];
  auth_id: Scalars['String'];
  created_at: Scalars['timestamptz'];
  event_subscribe: Scalars['Boolean'];
  id: Scalars['uuid'];
  integration_id: Scalars['Int'];
  integration_type: Scalars['integration_type'];
  organization_id: Scalars['uuid'];
  preferences?: Maybe<Scalars['jsonb']>;
  resource_key?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  user_account_id: Scalars['uuid'];
};

/** columns and relationships of "integration_authentication" */
export type Integration_AuthenticationPreferencesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "integration_authentication" */
export type Integration_Authentication_Aggregate = {
  __typename?: 'integration_authentication_aggregate';
  aggregate?: Maybe<Integration_Authentication_Aggregate_Fields>;
  nodes: Array<Integration_Authentication>;
};

/** aggregate fields of "integration_authentication" */
export type Integration_Authentication_Aggregate_Fields = {
  __typename?: 'integration_authentication_aggregate_fields';
  avg?: Maybe<Integration_Authentication_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Integration_Authentication_Max_Fields>;
  min?: Maybe<Integration_Authentication_Min_Fields>;
  stddev?: Maybe<Integration_Authentication_Stddev_Fields>;
  stddev_pop?: Maybe<Integration_Authentication_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Integration_Authentication_Stddev_Samp_Fields>;
  sum?: Maybe<Integration_Authentication_Sum_Fields>;
  var_pop?: Maybe<Integration_Authentication_Var_Pop_Fields>;
  var_samp?: Maybe<Integration_Authentication_Var_Samp_Fields>;
  variance?: Maybe<Integration_Authentication_Variance_Fields>;
};

/** aggregate fields of "integration_authentication" */
export type Integration_Authentication_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Integration_Authentication_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Integration_Authentication_Append_Input = {
  preferences?: Maybe<Scalars['jsonb']>;
};

/** aggregate avg on columns */
export type Integration_Authentication_Avg_Fields = {
  __typename?: 'integration_authentication_avg_fields';
  integration_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "integration_authentication". All fields are combined with a logical 'AND'. */
export type Integration_Authentication_Bool_Exp = {
  _and?: Maybe<Array<Integration_Authentication_Bool_Exp>>;
  _not?: Maybe<Integration_Authentication_Bool_Exp>;
  _or?: Maybe<Array<Integration_Authentication_Bool_Exp>>;
  active?: Maybe<Boolean_Comparison_Exp>;
  auth_id?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  event_subscribe?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  integration_id?: Maybe<Int_Comparison_Exp>;
  integration_type?: Maybe<Integration_Type_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  preferences?: Maybe<Jsonb_Comparison_Exp>;
  resource_key?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "integration_authentication" */
export enum Integration_Authentication_Constraint {
  /** unique or primary key constraint on columns "id" */
  IntegrationAuthenticationPkey = 'integration_authentication_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Integration_Authentication_Delete_At_Path_Input = {
  preferences?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Integration_Authentication_Delete_Elem_Input = {
  preferences?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Integration_Authentication_Delete_Key_Input = {
  preferences?: Maybe<Scalars['String']>;
};

/** input type for incrementing numeric columns in table "integration_authentication" */
export type Integration_Authentication_Inc_Input = {
  integration_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "integration_authentication" */
export type Integration_Authentication_Insert_Input = {
  auth_id?: Maybe<Scalars['String']>;
  integration_id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  preferences?: Maybe<Scalars['jsonb']>;
  resource_key?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Integration_Authentication_Max_Fields = {
  __typename?: 'integration_authentication_max_fields';
  auth_id?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  integration_id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  organization_id?: Maybe<Scalars['uuid']>;
  resource_key?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Integration_Authentication_Min_Fields = {
  __typename?: 'integration_authentication_min_fields';
  auth_id?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  integration_id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  organization_id?: Maybe<Scalars['uuid']>;
  resource_key?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "integration_authentication" */
export type Integration_Authentication_Mutation_Response = {
  __typename?: 'integration_authentication_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Integration_Authentication>;
};

/** on_conflict condition type for table "integration_authentication" */
export type Integration_Authentication_On_Conflict = {
  constraint: Integration_Authentication_Constraint;
  update_columns: Array<Integration_Authentication_Update_Column>;
  where?: Maybe<Integration_Authentication_Bool_Exp>;
};

/** Ordering options when selecting data from "integration_authentication". */
export type Integration_Authentication_Order_By = {
  active?: Maybe<Order_By>;
  auth_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  event_subscribe?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  integration_id?: Maybe<Order_By>;
  integration_type?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  preferences?: Maybe<Order_By>;
  resource_key?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: integration_authentication */
export type Integration_Authentication_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Integration_Authentication_Prepend_Input = {
  preferences?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "integration_authentication" */
export enum Integration_Authentication_Select_Column {
  /** column name */
  Active = 'active',
  /** column name */
  AuthId = 'auth_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EventSubscribe = 'event_subscribe',
  /** column name */
  Id = 'id',
  /** column name */
  IntegrationId = 'integration_id',
  /** column name */
  IntegrationType = 'integration_type',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Preferences = 'preferences',
  /** column name */
  ResourceKey = 'resource_key',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "integration_authentication" */
export type Integration_Authentication_Set_Input = {
  auth_id?: Maybe<Scalars['String']>;
  integration_id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  preferences?: Maybe<Scalars['jsonb']>;
  resource_key?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Integration_Authentication_Stddev_Fields = {
  __typename?: 'integration_authentication_stddev_fields';
  integration_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Integration_Authentication_Stddev_Pop_Fields = {
  __typename?: 'integration_authentication_stddev_pop_fields';
  integration_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Integration_Authentication_Stddev_Samp_Fields = {
  __typename?: 'integration_authentication_stddev_samp_fields';
  integration_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "integration_authentication" */
export type Integration_Authentication_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Integration_Authentication_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Integration_Authentication_Stream_Cursor_Value_Input = {
  active?: Maybe<Scalars['Boolean']>;
  auth_id?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  event_subscribe?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  integration_id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  organization_id?: Maybe<Scalars['uuid']>;
  preferences?: Maybe<Scalars['jsonb']>;
  resource_key?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Integration_Authentication_Sum_Fields = {
  __typename?: 'integration_authentication_sum_fields';
  integration_id?: Maybe<Scalars['Int']>;
};

/** update columns of table "integration_authentication" */
export enum Integration_Authentication_Update_Column {
  /** column name */
  AuthId = 'auth_id',
  /** column name */
  IntegrationId = 'integration_id',
  /** column name */
  IntegrationType = 'integration_type',
  /** column name */
  Preferences = 'preferences',
  /** column name */
  ResourceKey = 'resource_key',
}

export type Integration_Authentication_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Integration_Authentication_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Integration_Authentication_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Integration_Authentication_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Integration_Authentication_Delete_Key_Input>;
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Integration_Authentication_Inc_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Integration_Authentication_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Integration_Authentication_Set_Input>;
  where: Integration_Authentication_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Integration_Authentication_Var_Pop_Fields = {
  __typename?: 'integration_authentication_var_pop_fields';
  integration_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Integration_Authentication_Var_Samp_Fields = {
  __typename?: 'integration_authentication_var_samp_fields';
  integration_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Integration_Authentication_Variance_Fields = {
  __typename?: 'integration_authentication_variance_fields';
  integration_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "integration_type". All fields are combined with logical 'AND'. */
export type Integration_Type_Comparison_Exp = {
  _eq?: Maybe<Scalars['integration_type']>;
  _gt?: Maybe<Scalars['integration_type']>;
  _gte?: Maybe<Scalars['integration_type']>;
  _in?: Maybe<Array<Scalars['integration_type']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['integration_type']>;
  _lte?: Maybe<Scalars['integration_type']>;
  _neq?: Maybe<Scalars['integration_type']>;
  _nin?: Maybe<Array<Scalars['integration_type']>>;
};

/** columns and relationships of "integrations" */
export type Integrations = {
  __typename?: 'integrations';
  active?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  name?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "integrations" */
export type Integrations_Aggregate = {
  __typename?: 'integrations_aggregate';
  aggregate?: Maybe<Integrations_Aggregate_Fields>;
  nodes: Array<Integrations>;
};

/** aggregate fields of "integrations" */
export type Integrations_Aggregate_Fields = {
  __typename?: 'integrations_aggregate_fields';
  avg?: Maybe<Integrations_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Integrations_Max_Fields>;
  min?: Maybe<Integrations_Min_Fields>;
  stddev?: Maybe<Integrations_Stddev_Fields>;
  stddev_pop?: Maybe<Integrations_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Integrations_Stddev_Samp_Fields>;
  sum?: Maybe<Integrations_Sum_Fields>;
  var_pop?: Maybe<Integrations_Var_Pop_Fields>;
  var_samp?: Maybe<Integrations_Var_Samp_Fields>;
  variance?: Maybe<Integrations_Variance_Fields>;
};

/** aggregate fields of "integrations" */
export type Integrations_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Integrations_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Integrations_Avg_Fields = {
  __typename?: 'integrations_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "integrations". All fields are combined with a logical 'AND'. */
export type Integrations_Bool_Exp = {
  _and?: Maybe<Array<Integrations_Bool_Exp>>;
  _not?: Maybe<Integrations_Bool_Exp>;
  _or?: Maybe<Array<Integrations_Bool_Exp>>;
  active?: Maybe<Boolean_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  integration_type?: Maybe<Integration_Type_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Integrations_Max_Fields = {
  __typename?: 'integrations_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  name?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Integrations_Min_Fields = {
  __typename?: 'integrations_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  name?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "integrations". */
export type Integrations_Order_By = {
  active?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  integration_type?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "integrations" */
export enum Integrations_Select_Column {
  /** column name */
  Active = 'active',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Id = 'id',
  /** column name */
  IntegrationType = 'integration_type',
  /** column name */
  Name = 'name',
  /** column name */
  Order = 'order',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Integrations_Stddev_Fields = {
  __typename?: 'integrations_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Integrations_Stddev_Pop_Fields = {
  __typename?: 'integrations_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Integrations_Stddev_Samp_Fields = {
  __typename?: 'integrations_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "integrations" */
export type Integrations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Integrations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Integrations_Stream_Cursor_Value_Input = {
  active?: Maybe<Scalars['Boolean']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  integration_type?: Maybe<Scalars['integration_type']>;
  name?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Integrations_Sum_Fields = {
  __typename?: 'integrations_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Integrations_Var_Pop_Fields = {
  __typename?: 'integrations_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Integrations_Var_Samp_Fields = {
  __typename?: 'integrations_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Integrations_Variance_Fields = {
  __typename?: 'integrations_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "interval". All fields are combined with logical 'AND'. */
export type Interval_Comparison_Exp = {
  _eq?: Maybe<Scalars['interval']>;
  _gt?: Maybe<Scalars['interval']>;
  _gte?: Maybe<Scalars['interval']>;
  _in?: Maybe<Array<Scalars['interval']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['interval']>;
  _lte?: Maybe<Scalars['interval']>;
  _neq?: Maybe<Scalars['interval']>;
  _nin?: Maybe<Array<Scalars['interval']>>;
};

/** Boolean expression to compare columns of type "json". All fields are combined with logical 'AND'. */
export type Json_Comparison_Exp = {
  _eq?: Maybe<Scalars['json']>;
  _gt?: Maybe<Scalars['json']>;
  _gte?: Maybe<Scalars['json']>;
  _in?: Maybe<Array<Scalars['json']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['json']>;
  _lte?: Maybe<Scalars['json']>;
  _neq?: Maybe<Scalars['json']>;
  _nin?: Maybe<Array<Scalars['json']>>;
};

export type Jsonb_Cast_Exp = {
  String?: Maybe<String_Comparison_Exp>;
};

/** Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'. */
export type Jsonb_Comparison_Exp = {
  _cast?: Maybe<Jsonb_Cast_Exp>;
  /** is the column contained in the given json value */
  _contained_in?: Maybe<Scalars['jsonb']>;
  /** does the column contain the given json value at the top level */
  _contains?: Maybe<Scalars['jsonb']>;
  _eq?: Maybe<Scalars['jsonb']>;
  _gt?: Maybe<Scalars['jsonb']>;
  _gte?: Maybe<Scalars['jsonb']>;
  /** does the string exist as a top-level key in the column */
  _has_key?: Maybe<Scalars['String']>;
  /** do all of these strings exist as top-level keys in the column */
  _has_keys_all?: Maybe<Array<Scalars['String']>>;
  /** do any of these strings exist as top-level keys in the column */
  _has_keys_any?: Maybe<Array<Scalars['String']>>;
  _in?: Maybe<Array<Scalars['jsonb']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['jsonb']>;
  _lte?: Maybe<Scalars['jsonb']>;
  _neq?: Maybe<Scalars['jsonb']>;
  _nin?: Maybe<Array<Scalars['jsonb']>>;
};

/** columns and relationships of "lease_comps" */
export type Lease_Comps = {
  __typename?: 'lease_comps';
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregated selection of "lease_comps" */
export type Lease_Comps_Aggregate = {
  __typename?: 'lease_comps_aggregate';
  aggregate?: Maybe<Lease_Comps_Aggregate_Fields>;
  nodes: Array<Lease_Comps>;
};

/** aggregate fields of "lease_comps" */
export type Lease_Comps_Aggregate_Fields = {
  __typename?: 'lease_comps_aggregate_fields';
  avg?: Maybe<Lease_Comps_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Lease_Comps_Max_Fields>;
  min?: Maybe<Lease_Comps_Min_Fields>;
  stddev?: Maybe<Lease_Comps_Stddev_Fields>;
  stddev_pop?: Maybe<Lease_Comps_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Lease_Comps_Stddev_Samp_Fields>;
  sum?: Maybe<Lease_Comps_Sum_Fields>;
  var_pop?: Maybe<Lease_Comps_Var_Pop_Fields>;
  var_samp?: Maybe<Lease_Comps_Var_Samp_Fields>;
  variance?: Maybe<Lease_Comps_Variance_Fields>;
};

/** aggregate fields of "lease_comps" */
export type Lease_Comps_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Lease_Comps_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Lease_Comps_Avg_Fields = {
  __typename?: 'lease_comps_avg_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "lease_comps". All fields are combined with a logical 'AND'. */
export type Lease_Comps_Bool_Exp = {
  _and?: Maybe<Array<Lease_Comps_Bool_Exp>>;
  _not?: Maybe<Lease_Comps_Bool_Exp>;
  _or?: Maybe<Array<Lease_Comps_Bool_Exp>>;
  commercial_lease_type?: Maybe<String_Comparison_Exp>;
  commercial_lease_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_occupancy_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype?: Maybe<String_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<String_Comparison_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  concessions?: Maybe<String_Comparison_Exp>;
  condition?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  data_sources?: Maybe<String_Comparison_Exp>;
  deed_book?: Maybe<String_Comparison_Exp>;
  deed_page?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  instrument?: Maybe<String_Comparison_Exp>;
  lease_date_end?: Maybe<Timestamptz_Comparison_Exp>;
  lease_date_start?: Maybe<Timestamptz_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_interest_id?: Maybe<Int_Comparison_Exp>;
  property_type?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quality_of_construction?: Maybe<String_Comparison_Exp>;
  residential_lease_type?: Maybe<String_Comparison_Exp>;
  residential_lease_type_id?: Maybe<Int_Comparison_Exp>;
  residential_monthly_rent?: Maybe<Numeric_Comparison_Exp>;
  residential_ownership_type?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  tenant?: Maybe<String_Comparison_Exp>;
  tenant_id?: Maybe<Uuid_Comparison_Exp>;
  transaction_type?: Maybe<String_Comparison_Exp>;
  transaction_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  verification_sources?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Lease_Comps_Max_Fields = {
  __typename?: 'lease_comps_max_fields';
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Lease_Comps_Min_Fields = {
  __typename?: 'lease_comps_min_fields';
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "lease_comps". */
export type Lease_Comps_Order_By = {
  commercial_lease_type?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_property_subtype?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  lease_date_end?: Maybe<Order_By>;
  lease_date_start?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_lease_type?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  residential_ownership_type?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  tenant?: Maybe<Order_By>;
  tenant_id?: Maybe<Order_By>;
  transaction_type?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** select columns of table "lease_comps" */
export enum Lease_Comps_Select_Column {
  /** column name */
  CommercialLeaseType = 'commercial_lease_type',
  /** column name */
  CommercialLeaseTypeId = 'commercial_lease_type_id',
  /** column name */
  CommercialOccupancyRate = 'commercial_occupancy_rate',
  /** column name */
  CommercialPropertySubtype = 'commercial_property_subtype',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyType = 'commercial_property_type',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  Concessions = 'concessions',
  /** column name */
  Condition = 'condition',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataSources = 'data_sources',
  /** column name */
  DeedBook = 'deed_book',
  /** column name */
  DeedPage = 'deed_page',
  /** column name */
  Id = 'id',
  /** column name */
  Instrument = 'instrument',
  /** column name */
  LeaseDateEnd = 'lease_date_end',
  /** column name */
  LeaseDateStart = 'lease_date_start',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyInterestId = 'property_interest_id',
  /** column name */
  PropertyType = 'property_type',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QualityOfConstruction = 'quality_of_construction',
  /** column name */
  ResidentialLeaseType = 'residential_lease_type',
  /** column name */
  ResidentialLeaseTypeId = 'residential_lease_type_id',
  /** column name */
  ResidentialMonthlyRent = 'residential_monthly_rent',
  /** column name */
  ResidentialOwnershipType = 'residential_ownership_type',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  Tenant = 'tenant',
  /** column name */
  TenantId = 'tenant_id',
  /** column name */
  TransactionType = 'transaction_type',
  /** column name */
  TransactionTypeId = 'transaction_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VerificationSources = 'verification_sources',
}

/** aggregate stddev on columns */
export type Lease_Comps_Stddev_Fields = {
  __typename?: 'lease_comps_stddev_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Lease_Comps_Stddev_Pop_Fields = {
  __typename?: 'lease_comps_stddev_pop_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Lease_Comps_Stddev_Samp_Fields = {
  __typename?: 'lease_comps_stddev_samp_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "lease_comps" */
export type Lease_Comps_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Lease_Comps_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Lease_Comps_Stream_Cursor_Value_Input = {
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Lease_Comps_Sum_Fields = {
  __typename?: 'lease_comps_sum_fields';
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Lease_Comps_Var_Pop_Fields = {
  __typename?: 'lease_comps_var_pop_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Lease_Comps_Var_Samp_Fields = {
  __typename?: 'lease_comps_var_samp_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Lease_Comps_Variance_Fields = {
  __typename?: 'lease_comps_variance_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "lease_transactions" */
export type Lease_Transactions = {
  __typename?: 'lease_transactions';
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregated selection of "lease_transactions" */
export type Lease_Transactions_Aggregate = {
  __typename?: 'lease_transactions_aggregate';
  aggregate?: Maybe<Lease_Transactions_Aggregate_Fields>;
  nodes: Array<Lease_Transactions>;
};

/** aggregate fields of "lease_transactions" */
export type Lease_Transactions_Aggregate_Fields = {
  __typename?: 'lease_transactions_aggregate_fields';
  avg?: Maybe<Lease_Transactions_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Lease_Transactions_Max_Fields>;
  min?: Maybe<Lease_Transactions_Min_Fields>;
  stddev?: Maybe<Lease_Transactions_Stddev_Fields>;
  stddev_pop?: Maybe<Lease_Transactions_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Lease_Transactions_Stddev_Samp_Fields>;
  sum?: Maybe<Lease_Transactions_Sum_Fields>;
  var_pop?: Maybe<Lease_Transactions_Var_Pop_Fields>;
  var_samp?: Maybe<Lease_Transactions_Var_Samp_Fields>;
  variance?: Maybe<Lease_Transactions_Variance_Fields>;
};

/** aggregate fields of "lease_transactions" */
export type Lease_Transactions_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Lease_Transactions_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Lease_Transactions_Avg_Fields = {
  __typename?: 'lease_transactions_avg_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "lease_transactions". All fields are combined with a logical 'AND'. */
export type Lease_Transactions_Bool_Exp = {
  _and?: Maybe<Array<Lease_Transactions_Bool_Exp>>;
  _not?: Maybe<Lease_Transactions_Bool_Exp>;
  _or?: Maybe<Array<Lease_Transactions_Bool_Exp>>;
  commercial_lease_type?: Maybe<String_Comparison_Exp>;
  commercial_lease_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_occupancy_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype?: Maybe<String_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<String_Comparison_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  concessions?: Maybe<String_Comparison_Exp>;
  condition?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  data_sources?: Maybe<String_Comparison_Exp>;
  deed_book?: Maybe<String_Comparison_Exp>;
  deed_page?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  instrument?: Maybe<String_Comparison_Exp>;
  lease_date_end?: Maybe<Timestamptz_Comparison_Exp>;
  lease_date_start?: Maybe<Timestamptz_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_interest_id?: Maybe<Int_Comparison_Exp>;
  property_type?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quality_of_construction?: Maybe<String_Comparison_Exp>;
  residential_lease_type?: Maybe<String_Comparison_Exp>;
  residential_lease_type_id?: Maybe<Int_Comparison_Exp>;
  residential_monthly_rent?: Maybe<Numeric_Comparison_Exp>;
  residential_ownership_type?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  tenant?: Maybe<String_Comparison_Exp>;
  tenant_id?: Maybe<Uuid_Comparison_Exp>;
  transaction_type?: Maybe<String_Comparison_Exp>;
  transaction_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  verification_sources?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Lease_Transactions_Max_Fields = {
  __typename?: 'lease_transactions_max_fields';
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Lease_Transactions_Min_Fields = {
  __typename?: 'lease_transactions_min_fields';
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "lease_transactions". */
export type Lease_Transactions_Order_By = {
  commercial_lease_type?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_property_subtype?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  lease_date_end?: Maybe<Order_By>;
  lease_date_start?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_lease_type?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  residential_ownership_type?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  tenant?: Maybe<Order_By>;
  tenant_id?: Maybe<Order_By>;
  transaction_type?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** select columns of table "lease_transactions" */
export enum Lease_Transactions_Select_Column {
  /** column name */
  CommercialLeaseType = 'commercial_lease_type',
  /** column name */
  CommercialLeaseTypeId = 'commercial_lease_type_id',
  /** column name */
  CommercialOccupancyRate = 'commercial_occupancy_rate',
  /** column name */
  CommercialPropertySubtype = 'commercial_property_subtype',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyType = 'commercial_property_type',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  Concessions = 'concessions',
  /** column name */
  Condition = 'condition',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataSources = 'data_sources',
  /** column name */
  DeedBook = 'deed_book',
  /** column name */
  DeedPage = 'deed_page',
  /** column name */
  Id = 'id',
  /** column name */
  Instrument = 'instrument',
  /** column name */
  LeaseDateEnd = 'lease_date_end',
  /** column name */
  LeaseDateStart = 'lease_date_start',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyInterestId = 'property_interest_id',
  /** column name */
  PropertyType = 'property_type',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QualityOfConstruction = 'quality_of_construction',
  /** column name */
  ResidentialLeaseType = 'residential_lease_type',
  /** column name */
  ResidentialLeaseTypeId = 'residential_lease_type_id',
  /** column name */
  ResidentialMonthlyRent = 'residential_monthly_rent',
  /** column name */
  ResidentialOwnershipType = 'residential_ownership_type',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  Tenant = 'tenant',
  /** column name */
  TenantId = 'tenant_id',
  /** column name */
  TransactionType = 'transaction_type',
  /** column name */
  TransactionTypeId = 'transaction_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VerificationSources = 'verification_sources',
}

/** aggregate stddev on columns */
export type Lease_Transactions_Stddev_Fields = {
  __typename?: 'lease_transactions_stddev_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Lease_Transactions_Stddev_Pop_Fields = {
  __typename?: 'lease_transactions_stddev_pop_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Lease_Transactions_Stddev_Samp_Fields = {
  __typename?: 'lease_transactions_stddev_samp_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "lease_transactions" */
export type Lease_Transactions_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Lease_Transactions_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Lease_Transactions_Stream_Cursor_Value_Input = {
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Lease_Transactions_Sum_Fields = {
  __typename?: 'lease_transactions_sum_fields';
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Lease_Transactions_Var_Pop_Fields = {
  __typename?: 'lease_transactions_var_pop_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Lease_Transactions_Var_Samp_Fields = {
  __typename?: 'lease_transactions_var_samp_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Lease_Transactions_Variance_Fields = {
  __typename?: 'lease_transactions_variance_fields';
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "loan_types" */
export type Loan_Types = {
  __typename?: 'loan_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "loan_types" */
export type Loan_Types_Aggregate = {
  __typename?: 'loan_types_aggregate';
  aggregate?: Maybe<Loan_Types_Aggregate_Fields>;
  nodes: Array<Loan_Types>;
};

/** aggregate fields of "loan_types" */
export type Loan_Types_Aggregate_Fields = {
  __typename?: 'loan_types_aggregate_fields';
  avg?: Maybe<Loan_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Loan_Types_Max_Fields>;
  min?: Maybe<Loan_Types_Min_Fields>;
  stddev?: Maybe<Loan_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Loan_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Loan_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Loan_Types_Sum_Fields>;
  var_pop?: Maybe<Loan_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Loan_Types_Var_Samp_Fields>;
  variance?: Maybe<Loan_Types_Variance_Fields>;
};

/** aggregate fields of "loan_types" */
export type Loan_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Loan_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Loan_Types_Avg_Fields = {
  __typename?: 'loan_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "loan_types". All fields are combined with a logical 'AND'. */
export type Loan_Types_Bool_Exp = {
  _and?: Maybe<Array<Loan_Types_Bool_Exp>>;
  _not?: Maybe<Loan_Types_Bool_Exp>;
  _or?: Maybe<Array<Loan_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Loan_Types_Max_Fields = {
  __typename?: 'loan_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Loan_Types_Min_Fields = {
  __typename?: 'loan_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "loan_types". */
export type Loan_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "loan_types" */
export enum Loan_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Loan_Types_Stddev_Fields = {
  __typename?: 'loan_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Loan_Types_Stddev_Pop_Fields = {
  __typename?: 'loan_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Loan_Types_Stddev_Samp_Fields = {
  __typename?: 'loan_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "loan_types" */
export type Loan_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Loan_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Loan_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Loan_Types_Sum_Fields = {
  __typename?: 'loan_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Loan_Types_Var_Pop_Fields = {
  __typename?: 'loan_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Loan_Types_Var_Samp_Fields = {
  __typename?: 'loan_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Loan_Types_Variance_Fields = {
  __typename?: 'loan_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "message" */
export type Message = {
  __typename?: 'message';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  message: Scalars['String'];
  /** An object relationship */
  message_thread: Message_Thread;
  message_thread_id: Scalars['uuid'];
  notified: Scalars['Boolean'];
  organization_id: Scalars['uuid'];
  read: Scalars['Boolean'];
  recipients?: Maybe<Scalars['jsonb']>;
  sender_id: Scalars['uuid'];
  sender_type: Scalars['message_user_type'];
  source: Scalars['message_source'];
  updated_at: Scalars['timestamptz'];
};

/** columns and relationships of "message" */
export type MessageRecipientsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "message" */
export type Message_Aggregate = {
  __typename?: 'message_aggregate';
  aggregate?: Maybe<Message_Aggregate_Fields>;
  nodes: Array<Message>;
};

/** aggregate fields of "message" */
export type Message_Aggregate_Fields = {
  __typename?: 'message_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Message_Max_Fields>;
  min?: Maybe<Message_Min_Fields>;
};

/** aggregate fields of "message" */
export type Message_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Message_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "message" */
export type Message_Aggregate_Order_By = {
  count?: Maybe<Order_By>;
  max?: Maybe<Message_Max_Order_By>;
  min?: Maybe<Message_Min_Order_By>;
};

/** input type for inserting array relation for remote table "message" */
export type Message_Arr_Rel_Insert_Input = {
  data: Array<Message_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Message_On_Conflict>;
};

/** Boolean expression to filter rows from the table "message". All fields are combined with a logical 'AND'. */
export type Message_Bool_Exp = {
  _and?: Maybe<Array<Message_Bool_Exp>>;
  _not?: Maybe<Message_Bool_Exp>;
  _or?: Maybe<Array<Message_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  message?: Maybe<String_Comparison_Exp>;
  message_thread?: Maybe<Message_Thread_Bool_Exp>;
  message_thread_id?: Maybe<Uuid_Comparison_Exp>;
  notified?: Maybe<Boolean_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  read?: Maybe<Boolean_Comparison_Exp>;
  recipients?: Maybe<Jsonb_Comparison_Exp>;
  sender_id?: Maybe<Uuid_Comparison_Exp>;
  sender_type?: Maybe<Message_User_Type_Comparison_Exp>;
  source?: Maybe<Message_Source_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "message" */
export enum Message_Constraint {
  /** unique or primary key constraint on columns "id" */
  MessagePkey = 'message_pkey',
}

/** input type for inserting data into table "message" */
export type Message_Insert_Input = {
  message?: Maybe<Scalars['String']>;
  message_thread?: Maybe<Message_Thread_Obj_Rel_Insert_Input>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
};

export type Message_Mark_Notified_Args = {
  message_id?: Maybe<Scalars['String']>;
  recipient_id?: Maybe<Scalars['String']>;
};

export type Message_Mark_Read_Args = {
  message_id?: Maybe<Scalars['String']>;
  read_where?: Maybe<Scalars['String']>;
  recipient_id?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Message_Max_Fields = {
  __typename?: 'message_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "message" */
export type Message_Max_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  message_thread_id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  sender_id?: Maybe<Order_By>;
  sender_type?: Maybe<Order_By>;
  source?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Message_Min_Fields = {
  __typename?: 'message_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "message" */
export type Message_Min_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  message_thread_id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  sender_id?: Maybe<Order_By>;
  sender_type?: Maybe<Order_By>;
  source?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "message" */
export type Message_Mutation_Response = {
  __typename?: 'message_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Message>;
};

/** on_conflict condition type for table "message" */
export type Message_On_Conflict = {
  constraint: Message_Constraint;
  update_columns: Array<Message_Update_Column>;
  where?: Maybe<Message_Bool_Exp>;
};

/** Ordering options when selecting data from "message". */
export type Message_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  message_thread?: Maybe<Message_Thread_Order_By>;
  message_thread_id?: Maybe<Order_By>;
  notified?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  read?: Maybe<Order_By>;
  recipients?: Maybe<Order_By>;
  sender_id?: Maybe<Order_By>;
  sender_type?: Maybe<Order_By>;
  source?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: message */
export type Message_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "message" */
export enum Message_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Message = 'message',
  /** column name */
  MessageThreadId = 'message_thread_id',
  /** column name */
  Notified = 'notified',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Read = 'read',
  /** column name */
  Recipients = 'recipients',
  /** column name */
  SenderId = 'sender_id',
  /** column name */
  SenderType = 'sender_type',
  /** column name */
  Source = 'source',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** input type for updating data in table "message" */
export type Message_Set_Input = {
  message?: Maybe<Scalars['String']>;
};

/** Boolean expression to compare columns of type "message_source". All fields are combined with logical 'AND'. */
export type Message_Source_Comparison_Exp = {
  _eq?: Maybe<Scalars['message_source']>;
  _gt?: Maybe<Scalars['message_source']>;
  _gte?: Maybe<Scalars['message_source']>;
  _in?: Maybe<Array<Scalars['message_source']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['message_source']>;
  _lte?: Maybe<Scalars['message_source']>;
  _neq?: Maybe<Scalars['message_source']>;
  _nin?: Maybe<Array<Scalars['message_source']>>;
};

/** Streaming cursor of the table "message" */
export type Message_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Message_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Message_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  notified?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  read?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<Scalars['jsonb']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Boolean expression to compare columns of type "message_subtopic_type". All fields are combined with logical 'AND'. */
export type Message_Subtopic_Type_Comparison_Exp = {
  _eq?: Maybe<Scalars['message_subtopic_type']>;
  _gt?: Maybe<Scalars['message_subtopic_type']>;
  _gte?: Maybe<Scalars['message_subtopic_type']>;
  _in?: Maybe<Array<Scalars['message_subtopic_type']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['message_subtopic_type']>;
  _lte?: Maybe<Scalars['message_subtopic_type']>;
  _neq?: Maybe<Scalars['message_subtopic_type']>;
  _nin?: Maybe<Array<Scalars['message_subtopic_type']>>;
};

/** columns and relationships of "message_thread" */
export type Message_Thread = {
  __typename?: 'message_thread';
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  key?: Maybe<Scalars['String']>;
  message_subtopic: Scalars['message_subtopic_type'];
  message_topic: Scalars['message_topic_type'];
  message_topic_id: Scalars['uuid'];
  /** An array relationship */
  messages: Array<Message>;
  /** An aggregate relationship */
  messages_aggregate: Message_Aggregate;
  messages_count: Scalars['Int'];
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  participants?: Maybe<Scalars['jsonb']>;
  updated_at: Scalars['timestamptz'];
};

/** columns and relationships of "message_thread" */
export type Message_ThreadMessagesArgs = {
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

/** columns and relationships of "message_thread" */
export type Message_ThreadMessages_AggregateArgs = {
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

/** columns and relationships of "message_thread" */
export type Message_ThreadParticipantsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "message_thread" */
export type Message_Thread_Aggregate = {
  __typename?: 'message_thread_aggregate';
  aggregate?: Maybe<Message_Thread_Aggregate_Fields>;
  nodes: Array<Message_Thread>;
};

/** aggregate fields of "message_thread" */
export type Message_Thread_Aggregate_Fields = {
  __typename?: 'message_thread_aggregate_fields';
  avg?: Maybe<Message_Thread_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Message_Thread_Max_Fields>;
  min?: Maybe<Message_Thread_Min_Fields>;
  stddev?: Maybe<Message_Thread_Stddev_Fields>;
  stddev_pop?: Maybe<Message_Thread_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Message_Thread_Stddev_Samp_Fields>;
  sum?: Maybe<Message_Thread_Sum_Fields>;
  var_pop?: Maybe<Message_Thread_Var_Pop_Fields>;
  var_samp?: Maybe<Message_Thread_Var_Samp_Fields>;
  variance?: Maybe<Message_Thread_Variance_Fields>;
};

/** aggregate fields of "message_thread" */
export type Message_Thread_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Message_Thread_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Message_Thread_Append_Input = {
  participants?: Maybe<Scalars['jsonb']>;
};

/** aggregate avg on columns */
export type Message_Thread_Avg_Fields = {
  __typename?: 'message_thread_avg_fields';
  messages_count?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "message_thread". All fields are combined with a logical 'AND'. */
export type Message_Thread_Bool_Exp = {
  _and?: Maybe<Array<Message_Thread_Bool_Exp>>;
  _not?: Maybe<Message_Thread_Bool_Exp>;
  _or?: Maybe<Array<Message_Thread_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  key?: Maybe<String_Comparison_Exp>;
  message_subtopic?: Maybe<Message_Subtopic_Type_Comparison_Exp>;
  message_topic?: Maybe<Message_Topic_Type_Comparison_Exp>;
  message_topic_id?: Maybe<Uuid_Comparison_Exp>;
  messages?: Maybe<Message_Bool_Exp>;
  messages_count?: Maybe<Int_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  participants?: Maybe<Jsonb_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "message_thread" */
export enum Message_Thread_Constraint {
  /** unique or primary key constraint on columns "id" */
  MessageThreadPkey = 'message_thread_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Message_Thread_Delete_At_Path_Input = {
  participants?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Message_Thread_Delete_Elem_Input = {
  participants?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Message_Thread_Delete_Key_Input = {
  participants?: Maybe<Scalars['String']>;
};

/** input type for inserting data into table "message_thread" */
export type Message_Thread_Insert_Input = {
  message_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_topic?: Maybe<Scalars['message_topic_type']>;
  message_topic_id?: Maybe<Scalars['uuid']>;
  messages?: Maybe<Message_Arr_Rel_Insert_Input>;
  participants?: Maybe<Scalars['jsonb']>;
};

/** aggregate max on columns */
export type Message_Thread_Max_Fields = {
  __typename?: 'message_thread_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  key?: Maybe<Scalars['String']>;
  message_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_topic?: Maybe<Scalars['message_topic_type']>;
  message_topic_id?: Maybe<Scalars['uuid']>;
  messages_count?: Maybe<Scalars['Int']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Message_Thread_Min_Fields = {
  __typename?: 'message_thread_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  key?: Maybe<Scalars['String']>;
  message_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_topic?: Maybe<Scalars['message_topic_type']>;
  message_topic_id?: Maybe<Scalars['uuid']>;
  messages_count?: Maybe<Scalars['Int']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** response of any mutation on the table "message_thread" */
export type Message_Thread_Mutation_Response = {
  __typename?: 'message_thread_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Message_Thread>;
};

/** input type for inserting object relation for remote table "message_thread" */
export type Message_Thread_Obj_Rel_Insert_Input = {
  data: Message_Thread_Insert_Input;
  /** upsert condition */
  on_conflict?: Maybe<Message_Thread_On_Conflict>;
};

/** on_conflict condition type for table "message_thread" */
export type Message_Thread_On_Conflict = {
  constraint: Message_Thread_Constraint;
  update_columns: Array<Message_Thread_Update_Column>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

/** Ordering options when selecting data from "message_thread". */
export type Message_Thread_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  key?: Maybe<Order_By>;
  message_subtopic?: Maybe<Order_By>;
  message_topic?: Maybe<Order_By>;
  message_topic_id?: Maybe<Order_By>;
  messages_aggregate?: Maybe<Message_Aggregate_Order_By>;
  messages_count?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  participants?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** primary key columns input for table: message_thread */
export type Message_Thread_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Message_Thread_Prepend_Input = {
  participants?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "message_thread" */
export enum Message_Thread_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Key = 'key',
  /** column name */
  MessageSubtopic = 'message_subtopic',
  /** column name */
  MessageTopic = 'message_topic',
  /** column name */
  MessageTopicId = 'message_topic_id',
  /** column name */
  MessagesCount = 'messages_count',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Participants = 'participants',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** input type for updating data in table "message_thread" */
export type Message_Thread_Set_Input = {
  participants?: Maybe<Scalars['jsonb']>;
};

/** aggregate stddev on columns */
export type Message_Thread_Stddev_Fields = {
  __typename?: 'message_thread_stddev_fields';
  messages_count?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Message_Thread_Stddev_Pop_Fields = {
  __typename?: 'message_thread_stddev_pop_fields';
  messages_count?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Message_Thread_Stddev_Samp_Fields = {
  __typename?: 'message_thread_stddev_samp_fields';
  messages_count?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "message_thread" */
export type Message_Thread_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Message_Thread_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Message_Thread_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  key?: Maybe<Scalars['String']>;
  message_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_topic?: Maybe<Scalars['message_topic_type']>;
  message_topic_id?: Maybe<Scalars['uuid']>;
  messages_count?: Maybe<Scalars['Int']>;
  organization_id?: Maybe<Scalars['uuid']>;
  participants?: Maybe<Scalars['jsonb']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

export type Message_Thread_Subscribe_Args = {
  message_thread_id?: Maybe<Scalars['String']>;
  participant_id?: Maybe<Scalars['String']>;
  participant_type?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Message_Thread_Sum_Fields = {
  __typename?: 'message_thread_sum_fields';
  messages_count?: Maybe<Scalars['Int']>;
};

export type Message_Thread_Unsubscribe_Args = {
  message_thread_id?: Maybe<Scalars['String']>;
  participant_id?: Maybe<Scalars['String']>;
  participant_type?: Maybe<Scalars['String']>;
};

/** update columns of table "message_thread" */
export enum Message_Thread_Update_Column {
  /** column name */
  Participants = 'participants',
}

export type Message_Thread_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Message_Thread_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Message_Thread_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Message_Thread_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Message_Thread_Delete_Key_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Message_Thread_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Message_Thread_Set_Input>;
  where: Message_Thread_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Message_Thread_Var_Pop_Fields = {
  __typename?: 'message_thread_var_pop_fields';
  messages_count?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Message_Thread_Var_Samp_Fields = {
  __typename?: 'message_thread_var_samp_fields';
  messages_count?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Message_Thread_Variance_Fields = {
  __typename?: 'message_thread_variance_fields';
  messages_count?: Maybe<Scalars['Float']>;
};

/** Boolean expression to compare columns of type "message_topic_type". All fields are combined with logical 'AND'. */
export type Message_Topic_Type_Comparison_Exp = {
  _eq?: Maybe<Scalars['message_topic_type']>;
  _gt?: Maybe<Scalars['message_topic_type']>;
  _gte?: Maybe<Scalars['message_topic_type']>;
  _in?: Maybe<Array<Scalars['message_topic_type']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['message_topic_type']>;
  _lte?: Maybe<Scalars['message_topic_type']>;
  _neq?: Maybe<Scalars['message_topic_type']>;
  _nin?: Maybe<Array<Scalars['message_topic_type']>>;
};

/** update columns of table "message" */
export enum Message_Update_Column {
  /** column name */
  Message = 'message',
}

export type Message_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Message_Set_Input>;
  where: Message_Bool_Exp;
};

/** Boolean expression to compare columns of type "message_user_type". All fields are combined with logical 'AND'. */
export type Message_User_Type_Comparison_Exp = {
  _eq?: Maybe<Scalars['message_user_type']>;
  _gt?: Maybe<Scalars['message_user_type']>;
  _gte?: Maybe<Scalars['message_user_type']>;
  _in?: Maybe<Array<Scalars['message_user_type']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['message_user_type']>;
  _lte?: Maybe<Scalars['message_user_type']>;
  _neq?: Maybe<Scalars['message_user_type']>;
  _nin?: Maybe<Array<Scalars['message_user_type']>>;
};

/** columns and relationships of "messages" */
export type Messages = {
  __typename?: 'messages';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  message_thread_key?: Maybe<Scalars['String']>;
  message_thread_participants?: Maybe<Scalars['jsonb']>;
  message_thread_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_thread_topic?: Maybe<Scalars['message_topic_type']>;
  message_thread_topic_id?: Maybe<Scalars['uuid']>;
  notified?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  read?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<Scalars['jsonb']>;
  sender_full_name?: Maybe<Scalars['String']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "messages" */
export type MessagesMessage_Thread_ParticipantsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "messages" */
export type MessagesRecipientsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "messages" */
export type Messages_Aggregate = {
  __typename?: 'messages_aggregate';
  aggregate?: Maybe<Messages_Aggregate_Fields>;
  nodes: Array<Messages>;
};

/** aggregate fields of "messages" */
export type Messages_Aggregate_Fields = {
  __typename?: 'messages_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Messages_Max_Fields>;
  min?: Maybe<Messages_Min_Fields>;
};

/** aggregate fields of "messages" */
export type Messages_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Messages_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "messages". All fields are combined with a logical 'AND'. */
export type Messages_Bool_Exp = {
  _and?: Maybe<Array<Messages_Bool_Exp>>;
  _not?: Maybe<Messages_Bool_Exp>;
  _or?: Maybe<Array<Messages_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  message?: Maybe<String_Comparison_Exp>;
  message_thread_id?: Maybe<Uuid_Comparison_Exp>;
  message_thread_key?: Maybe<String_Comparison_Exp>;
  message_thread_participants?: Maybe<Jsonb_Comparison_Exp>;
  message_thread_subtopic?: Maybe<Message_Subtopic_Type_Comparison_Exp>;
  message_thread_topic?: Maybe<Message_Topic_Type_Comparison_Exp>;
  message_thread_topic_id?: Maybe<Uuid_Comparison_Exp>;
  notified?: Maybe<Boolean_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  read?: Maybe<Boolean_Comparison_Exp>;
  recipients?: Maybe<Jsonb_Comparison_Exp>;
  sender_full_name?: Maybe<String_Comparison_Exp>;
  sender_id?: Maybe<Uuid_Comparison_Exp>;
  sender_type?: Maybe<Message_User_Type_Comparison_Exp>;
  source?: Maybe<Message_Source_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Messages_Max_Fields = {
  __typename?: 'messages_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  message_thread_key?: Maybe<Scalars['String']>;
  message_thread_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_thread_topic?: Maybe<Scalars['message_topic_type']>;
  message_thread_topic_id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  sender_full_name?: Maybe<Scalars['String']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Messages_Min_Fields = {
  __typename?: 'messages_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  message_thread_key?: Maybe<Scalars['String']>;
  message_thread_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_thread_topic?: Maybe<Scalars['message_topic_type']>;
  message_thread_topic_id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  sender_full_name?: Maybe<Scalars['String']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "messages". */
export type Messages_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  message?: Maybe<Order_By>;
  message_thread_id?: Maybe<Order_By>;
  message_thread_key?: Maybe<Order_By>;
  message_thread_participants?: Maybe<Order_By>;
  message_thread_subtopic?: Maybe<Order_By>;
  message_thread_topic?: Maybe<Order_By>;
  message_thread_topic_id?: Maybe<Order_By>;
  notified?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  read?: Maybe<Order_By>;
  recipients?: Maybe<Order_By>;
  sender_full_name?: Maybe<Order_By>;
  sender_id?: Maybe<Order_By>;
  sender_type?: Maybe<Order_By>;
  source?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "messages" */
export enum Messages_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Message = 'message',
  /** column name */
  MessageThreadId = 'message_thread_id',
  /** column name */
  MessageThreadKey = 'message_thread_key',
  /** column name */
  MessageThreadParticipants = 'message_thread_participants',
  /** column name */
  MessageThreadSubtopic = 'message_thread_subtopic',
  /** column name */
  MessageThreadTopic = 'message_thread_topic',
  /** column name */
  MessageThreadTopicId = 'message_thread_topic_id',
  /** column name */
  Notified = 'notified',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  Read = 'read',
  /** column name */
  Recipients = 'recipients',
  /** column name */
  SenderFullName = 'sender_full_name',
  /** column name */
  SenderId = 'sender_id',
  /** column name */
  SenderType = 'sender_type',
  /** column name */
  Source = 'source',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** Streaming cursor of the table "messages" */
export type Messages_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Messages_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Messages_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  message?: Maybe<Scalars['String']>;
  message_thread_id?: Maybe<Scalars['uuid']>;
  message_thread_key?: Maybe<Scalars['String']>;
  message_thread_participants?: Maybe<Scalars['jsonb']>;
  message_thread_subtopic?: Maybe<Scalars['message_subtopic_type']>;
  message_thread_topic?: Maybe<Scalars['message_topic_type']>;
  message_thread_topic_id?: Maybe<Scalars['uuid']>;
  notified?: Maybe<Scalars['Boolean']>;
  organization_id?: Maybe<Scalars['uuid']>;
  read?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<Scalars['jsonb']>;
  sender_full_name?: Maybe<Scalars['String']>;
  sender_id?: Maybe<Scalars['uuid']>;
  sender_type?: Maybe<Scalars['message_user_type']>;
  source?: Maybe<Scalars['message_source']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  /** execute VOLATILE function "account_sign_out" which returns "user_session" */
  account_sign_out: Array<User_Session>;
  /** delete data from the table: "appraisal" */
  delete_appraisal?: Maybe<Appraisal_Mutation_Response>;
  /** delete single row from the table: "appraisal" */
  delete_appraisal_by_pk?: Maybe<Appraisal>;
  /** delete data from the table: "appraisal_commission" */
  delete_appraisal_commission?: Maybe<Appraisal_Commission_Mutation_Response>;
  /** delete single row from the table: "appraisal_commission" */
  delete_appraisal_commission_by_pk?: Maybe<Appraisal_Commission>;
  /** delete data from the table: "appraisal_expense" */
  delete_appraisal_expense?: Maybe<Appraisal_Expense_Mutation_Response>;
  /** delete single row from the table: "appraisal_expense" */
  delete_appraisal_expense_by_pk?: Maybe<Appraisal_Expense>;
  /** delete data from the table: "appraisal_fee" */
  delete_appraisal_fee?: Maybe<Appraisal_Fee_Mutation_Response>;
  /** delete single row from the table: "appraisal_fee" */
  delete_appraisal_fee_by_pk?: Maybe<Appraisal_Fee>;
  /** delete data from the table: "assessment" */
  delete_assessment?: Maybe<Assessment_Mutation_Response>;
  /** delete single row from the table: "assessment" */
  delete_assessment_by_pk?: Maybe<Assessment>;
  /** delete data from the table: "client" */
  delete_client?: Maybe<Client_Mutation_Response>;
  /** delete single row from the table: "client" */
  delete_client_by_pk?: Maybe<Client>;
  /** delete data from the table: "contact" */
  delete_contact?: Maybe<Contact_Mutation_Response>;
  /** delete single row from the table: "contact" */
  delete_contact_by_pk?: Maybe<Contact>;
  /** delete data from the table: "expense" */
  delete_expense?: Maybe<Expense_Mutation_Response>;
  /** delete single row from the table: "expense" */
  delete_expense_by_pk?: Maybe<Expense>;
  /** delete data from the table: "integration_authentication" */
  delete_integration_authentication?: Maybe<Integration_Authentication_Mutation_Response>;
  /** delete single row from the table: "integration_authentication" */
  delete_integration_authentication_by_pk?: Maybe<Integration_Authentication>;
  /** delete data from the table: "message" */
  delete_message?: Maybe<Message_Mutation_Response>;
  /** delete single row from the table: "message" */
  delete_message_by_pk?: Maybe<Message>;
  /** delete data from the table: "message_thread" */
  delete_message_thread?: Maybe<Message_Thread_Mutation_Response>;
  /** delete single row from the table: "message_thread" */
  delete_message_thread_by_pk?: Maybe<Message_Thread>;
  /** delete data from the table: "property" */
  delete_property?: Maybe<Property_Mutation_Response>;
  /** delete single row from the table: "property" */
  delete_property_by_pk?: Maybe<Property>;
  /** delete data from the table: "task" */
  delete_task?: Maybe<Task_Mutation_Response>;
  /** delete single row from the table: "task" */
  delete_task_by_pk?: Maybe<Task>;
  /** delete data from the table: "tasklist" */
  delete_tasklist?: Maybe<Tasklist_Mutation_Response>;
  /** delete single row from the table: "tasklist" */
  delete_tasklist_by_pk?: Maybe<Tasklist>;
  /** delete data from the table: "transaction" */
  delete_transaction?: Maybe<Transaction_Mutation_Response>;
  /** delete single row from the table: "transaction" */
  delete_transaction_by_pk?: Maybe<Transaction>;
  /** delete data from the table: "user_account" */
  delete_user_account?: Maybe<User_Account_Mutation_Response>;
  /** delete single row from the table: "user_account" */
  delete_user_account_by_pk?: Maybe<User_Account>;
  /** delete data from the table: "user_profile" */
  delete_user_profile?: Maybe<User_Profile_Mutation_Response>;
  /** delete single row from the table: "user_profile" */
  delete_user_profile_by_pk?: Maybe<User_Profile>;
  /** insert data into the table: "appraisal" */
  insert_appraisal?: Maybe<Appraisal_Mutation_Response>;
  /** insert data into the table: "appraisal_commission" */
  insert_appraisal_commission?: Maybe<Appraisal_Commission_Mutation_Response>;
  /** insert a single row into the table: "appraisal_commission" */
  insert_appraisal_commission_one?: Maybe<Appraisal_Commission>;
  /** insert data into the table: "appraisal_expense" */
  insert_appraisal_expense?: Maybe<Appraisal_Expense_Mutation_Response>;
  /** insert a single row into the table: "appraisal_expense" */
  insert_appraisal_expense_one?: Maybe<Appraisal_Expense>;
  /** insert data into the table: "appraisal_fee" */
  insert_appraisal_fee?: Maybe<Appraisal_Fee_Mutation_Response>;
  /** insert a single row into the table: "appraisal_fee" */
  insert_appraisal_fee_one?: Maybe<Appraisal_Fee>;
  /** insert a single row into the table: "appraisal" */
  insert_appraisal_one?: Maybe<Appraisal>;
  /** insert data into the table: "assessment" */
  insert_assessment?: Maybe<Assessment_Mutation_Response>;
  /** insert a single row into the table: "assessment" */
  insert_assessment_one?: Maybe<Assessment>;
  /** insert data into the table: "client" */
  insert_client?: Maybe<Client_Mutation_Response>;
  /** insert a single row into the table: "client" */
  insert_client_one?: Maybe<Client>;
  /** insert data into the table: "contact" */
  insert_contact?: Maybe<Contact_Mutation_Response>;
  /** insert a single row into the table: "contact" */
  insert_contact_one?: Maybe<Contact>;
  /** insert data into the table: "expense" */
  insert_expense?: Maybe<Expense_Mutation_Response>;
  /** insert a single row into the table: "expense" */
  insert_expense_one?: Maybe<Expense>;
  /** insert data into the table: "file" */
  insert_file?: Maybe<File_Mutation_Response>;
  /** insert a single row into the table: "file" */
  insert_file_one?: Maybe<File>;
  /** insert data into the table: "integration_authentication" */
  insert_integration_authentication?: Maybe<Integration_Authentication_Mutation_Response>;
  /** insert a single row into the table: "integration_authentication" */
  insert_integration_authentication_one?: Maybe<Integration_Authentication>;
  /** insert data into the table: "message" */
  insert_message?: Maybe<Message_Mutation_Response>;
  /** insert a single row into the table: "message" */
  insert_message_one?: Maybe<Message>;
  /** insert data into the table: "message_thread" */
  insert_message_thread?: Maybe<Message_Thread_Mutation_Response>;
  /** insert a single row into the table: "message_thread" */
  insert_message_thread_one?: Maybe<Message_Thread>;
  /** insert data into the table: "property" */
  insert_property?: Maybe<Property_Mutation_Response>;
  /** insert a single row into the table: "property" */
  insert_property_one?: Maybe<Property>;
  /** insert data into the table: "task" */
  insert_task?: Maybe<Task_Mutation_Response>;
  /** insert a single row into the table: "task" */
  insert_task_one?: Maybe<Task>;
  /** insert data into the table: "tasklist" */
  insert_tasklist?: Maybe<Tasklist_Mutation_Response>;
  /** insert a single row into the table: "tasklist" */
  insert_tasklist_one?: Maybe<Tasklist>;
  /** insert data into the table: "transaction" */
  insert_transaction?: Maybe<Transaction_Mutation_Response>;
  /** insert a single row into the table: "transaction" */
  insert_transaction_one?: Maybe<Transaction>;
  /** insert data into the table: "user_account" */
  insert_user_account?: Maybe<User_Account_Mutation_Response>;
  /** insert a single row into the table: "user_account" */
  insert_user_account_one?: Maybe<User_Account>;
  /** insert data into the table: "user_profile" */
  insert_user_profile?: Maybe<User_Profile_Mutation_Response>;
  /** insert a single row into the table: "user_profile" */
  insert_user_profile_one?: Maybe<User_Profile>;
  /** execute VOLATILE function "message_mark_notified" which returns "message" */
  message_mark_notified: Array<Message>;
  /** execute VOLATILE function "message_mark_read" which returns "message" */
  message_mark_read: Array<Message>;
  /** execute VOLATILE function "message_thread_subscribe" which returns "message_thread" */
  message_thread_subscribe: Array<Message_Thread>;
  /** execute VOLATILE function "message_thread_unsubscribe" which returns "message_thread" */
  message_thread_unsubscribe: Array<Message_Thread>;
  /** update data of the table: "appraisal" */
  update_appraisal?: Maybe<Appraisal_Mutation_Response>;
  /** update single row of the table: "appraisal" */
  update_appraisal_by_pk?: Maybe<Appraisal>;
  /** update data of the table: "appraisal_commission" */
  update_appraisal_commission?: Maybe<Appraisal_Commission_Mutation_Response>;
  /** update single row of the table: "appraisal_commission" */
  update_appraisal_commission_by_pk?: Maybe<Appraisal_Commission>;
  /** update multiples rows of table: "appraisal_commission" */
  update_appraisal_commission_many?: Maybe<Array<Maybe<Appraisal_Commission_Mutation_Response>>>;
  /** update data of the table: "appraisal_expense" */
  update_appraisal_expense?: Maybe<Appraisal_Expense_Mutation_Response>;
  /** update single row of the table: "appraisal_expense" */
  update_appraisal_expense_by_pk?: Maybe<Appraisal_Expense>;
  /** update multiples rows of table: "appraisal_expense" */
  update_appraisal_expense_many?: Maybe<Array<Maybe<Appraisal_Expense_Mutation_Response>>>;
  /** update data of the table: "appraisal_fee" */
  update_appraisal_fee?: Maybe<Appraisal_Fee_Mutation_Response>;
  /** update single row of the table: "appraisal_fee" */
  update_appraisal_fee_by_pk?: Maybe<Appraisal_Fee>;
  /** update multiples rows of table: "appraisal_fee" */
  update_appraisal_fee_many?: Maybe<Array<Maybe<Appraisal_Fee_Mutation_Response>>>;
  /** update multiples rows of table: "appraisal" */
  update_appraisal_many?: Maybe<Array<Maybe<Appraisal_Mutation_Response>>>;
  /** update data of the table: "assessment" */
  update_assessment?: Maybe<Assessment_Mutation_Response>;
  /** update single row of the table: "assessment" */
  update_assessment_by_pk?: Maybe<Assessment>;
  /** update multiples rows of table: "assessment" */
  update_assessment_many?: Maybe<Array<Maybe<Assessment_Mutation_Response>>>;
  /** update data of the table: "client" */
  update_client?: Maybe<Client_Mutation_Response>;
  /** update single row of the table: "client" */
  update_client_by_pk?: Maybe<Client>;
  /** update multiples rows of table: "client" */
  update_client_many?: Maybe<Array<Maybe<Client_Mutation_Response>>>;
  /** update data of the table: "contact" */
  update_contact?: Maybe<Contact_Mutation_Response>;
  /** update single row of the table: "contact" */
  update_contact_by_pk?: Maybe<Contact>;
  /** update multiples rows of table: "contact" */
  update_contact_many?: Maybe<Array<Maybe<Contact_Mutation_Response>>>;
  /** update data of the table: "expense" */
  update_expense?: Maybe<Expense_Mutation_Response>;
  /** update single row of the table: "expense" */
  update_expense_by_pk?: Maybe<Expense>;
  /** update multiples rows of table: "expense" */
  update_expense_many?: Maybe<Array<Maybe<Expense_Mutation_Response>>>;
  /** update data of the table: "file" */
  update_file?: Maybe<File_Mutation_Response>;
  /** update single row of the table: "file" */
  update_file_by_pk?: Maybe<File>;
  /** update multiples rows of table: "file" */
  update_file_many?: Maybe<Array<Maybe<File_Mutation_Response>>>;
  /** update data of the table: "integration_authentication" */
  update_integration_authentication?: Maybe<Integration_Authentication_Mutation_Response>;
  /** update single row of the table: "integration_authentication" */
  update_integration_authentication_by_pk?: Maybe<Integration_Authentication>;
  /** update multiples rows of table: "integration_authentication" */
  update_integration_authentication_many?: Maybe<Array<Maybe<Integration_Authentication_Mutation_Response>>>;
  /** update data of the table: "message" */
  update_message?: Maybe<Message_Mutation_Response>;
  /** update single row of the table: "message" */
  update_message_by_pk?: Maybe<Message>;
  /** update multiples rows of table: "message" */
  update_message_many?: Maybe<Array<Maybe<Message_Mutation_Response>>>;
  /** update data of the table: "message_thread" */
  update_message_thread?: Maybe<Message_Thread_Mutation_Response>;
  /** update single row of the table: "message_thread" */
  update_message_thread_by_pk?: Maybe<Message_Thread>;
  /** update multiples rows of table: "message_thread" */
  update_message_thread_many?: Maybe<Array<Maybe<Message_Thread_Mutation_Response>>>;
  /** update data of the table: "organization" */
  update_organization?: Maybe<Organization_Mutation_Response>;
  /** update single row of the table: "organization" */
  update_organization_by_pk?: Maybe<Organization>;
  /** update multiples rows of table: "organization" */
  update_organization_many?: Maybe<Array<Maybe<Organization_Mutation_Response>>>;
  /** update data of the table: "property" */
  update_property?: Maybe<Property_Mutation_Response>;
  /** update single row of the table: "property" */
  update_property_by_pk?: Maybe<Property>;
  /** update multiples rows of table: "property" */
  update_property_many?: Maybe<Array<Maybe<Property_Mutation_Response>>>;
  /** update data of the table: "task" */
  update_task?: Maybe<Task_Mutation_Response>;
  /** update single row of the table: "task" */
  update_task_by_pk?: Maybe<Task>;
  /** update multiples rows of table: "task" */
  update_task_many?: Maybe<Array<Maybe<Task_Mutation_Response>>>;
  /** update data of the table: "tasklist" */
  update_tasklist?: Maybe<Tasklist_Mutation_Response>;
  /** update single row of the table: "tasklist" */
  update_tasklist_by_pk?: Maybe<Tasklist>;
  /** update multiples rows of table: "tasklist" */
  update_tasklist_many?: Maybe<Array<Maybe<Tasklist_Mutation_Response>>>;
  /** update data of the table: "transaction" */
  update_transaction?: Maybe<Transaction_Mutation_Response>;
  /** update single row of the table: "transaction" */
  update_transaction_by_pk?: Maybe<Transaction>;
  /** update multiples rows of table: "transaction" */
  update_transaction_many?: Maybe<Array<Maybe<Transaction_Mutation_Response>>>;
  /** update data of the table: "user_account" */
  update_user_account?: Maybe<User_Account_Mutation_Response>;
  /** update single row of the table: "user_account" */
  update_user_account_by_pk?: Maybe<User_Account>;
  /** update multiples rows of table: "user_account" */
  update_user_account_many?: Maybe<Array<Maybe<User_Account_Mutation_Response>>>;
  /** update data of the table: "user_preference_notification" */
  update_user_preference_notification?: Maybe<User_Preference_Notification_Mutation_Response>;
  /** update single row of the table: "user_preference_notification" */
  update_user_preference_notification_by_pk?: Maybe<User_Preference_Notification>;
  /** update multiples rows of table: "user_preference_notification" */
  update_user_preference_notification_many?: Maybe<Array<Maybe<User_Preference_Notification_Mutation_Response>>>;
  /** update data of the table: "user_profile" */
  update_user_profile?: Maybe<User_Profile_Mutation_Response>;
  /** update single row of the table: "user_profile" */
  update_user_profile_by_pk?: Maybe<User_Profile>;
  /** update multiples rows of table: "user_profile" */
  update_user_profile_many?: Maybe<Array<Maybe<User_Profile_Mutation_Response>>>;
};

/** mutation root */
export type Mutation_RootAccount_Sign_OutArgs = {
  args: Account_Sign_Out_Args;
  distinct_on?: Maybe<Array<User_Session_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Session_Order_By>>;
  where?: Maybe<User_Session_Bool_Exp>;
};

/** mutation root */
export type Mutation_RootDelete_AppraisalArgs = {
  where: Appraisal_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Appraisal_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_Appraisal_CommissionArgs = {
  where: Appraisal_Commission_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Appraisal_Commission_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_Appraisal_ExpenseArgs = {
  where: Appraisal_Expense_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Appraisal_Expense_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_Appraisal_FeeArgs = {
  where: Appraisal_Fee_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Appraisal_Fee_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_AssessmentArgs = {
  where: Assessment_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Assessment_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_ClientArgs = {
  where: Client_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Client_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_ContactArgs = {
  where: Contact_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Contact_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_ExpenseArgs = {
  where: Expense_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Expense_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_Integration_AuthenticationArgs = {
  where: Integration_Authentication_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Integration_Authentication_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_MessageArgs = {
  where: Message_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Message_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_Message_ThreadArgs = {
  where: Message_Thread_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Message_Thread_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_PropertyArgs = {
  where: Property_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Property_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_TaskArgs = {
  where: Task_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Task_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_TasklistArgs = {
  where: Tasklist_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Tasklist_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_TransactionArgs = {
  where: Transaction_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_Transaction_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_User_AccountArgs = {
  where: User_Account_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_User_Account_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootDelete_User_ProfileArgs = {
  where: User_Profile_Bool_Exp;
};

/** mutation root */
export type Mutation_RootDelete_User_Profile_By_PkArgs = {
  id: Scalars['uuid'];
};

/** mutation root */
export type Mutation_RootInsert_AppraisalArgs = {
  objects: Array<Appraisal_Insert_Input>;
  on_conflict?: Maybe<Appraisal_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Appraisal_CommissionArgs = {
  objects: Array<Appraisal_Commission_Insert_Input>;
  on_conflict?: Maybe<Appraisal_Commission_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Appraisal_Commission_OneArgs = {
  object: Appraisal_Commission_Insert_Input;
  on_conflict?: Maybe<Appraisal_Commission_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Appraisal_ExpenseArgs = {
  objects: Array<Appraisal_Expense_Insert_Input>;
  on_conflict?: Maybe<Appraisal_Expense_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Appraisal_Expense_OneArgs = {
  object: Appraisal_Expense_Insert_Input;
  on_conflict?: Maybe<Appraisal_Expense_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Appraisal_FeeArgs = {
  objects: Array<Appraisal_Fee_Insert_Input>;
  on_conflict?: Maybe<Appraisal_Fee_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Appraisal_Fee_OneArgs = {
  object: Appraisal_Fee_Insert_Input;
  on_conflict?: Maybe<Appraisal_Fee_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Appraisal_OneArgs = {
  object: Appraisal_Insert_Input;
  on_conflict?: Maybe<Appraisal_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_AssessmentArgs = {
  objects: Array<Assessment_Insert_Input>;
  on_conflict?: Maybe<Assessment_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Assessment_OneArgs = {
  object: Assessment_Insert_Input;
  on_conflict?: Maybe<Assessment_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_ClientArgs = {
  objects: Array<Client_Insert_Input>;
  on_conflict?: Maybe<Client_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Client_OneArgs = {
  object: Client_Insert_Input;
  on_conflict?: Maybe<Client_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_ContactArgs = {
  objects: Array<Contact_Insert_Input>;
  on_conflict?: Maybe<Contact_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Contact_OneArgs = {
  object: Contact_Insert_Input;
  on_conflict?: Maybe<Contact_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_ExpenseArgs = {
  objects: Array<Expense_Insert_Input>;
  on_conflict?: Maybe<Expense_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Expense_OneArgs = {
  object: Expense_Insert_Input;
  on_conflict?: Maybe<Expense_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_FileArgs = {
  objects: Array<File_Insert_Input>;
  on_conflict?: Maybe<File_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_File_OneArgs = {
  object: File_Insert_Input;
  on_conflict?: Maybe<File_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Integration_AuthenticationArgs = {
  objects: Array<Integration_Authentication_Insert_Input>;
  on_conflict?: Maybe<Integration_Authentication_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Integration_Authentication_OneArgs = {
  object: Integration_Authentication_Insert_Input;
  on_conflict?: Maybe<Integration_Authentication_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_MessageArgs = {
  objects: Array<Message_Insert_Input>;
  on_conflict?: Maybe<Message_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Message_OneArgs = {
  object: Message_Insert_Input;
  on_conflict?: Maybe<Message_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Message_ThreadArgs = {
  objects: Array<Message_Thread_Insert_Input>;
  on_conflict?: Maybe<Message_Thread_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Message_Thread_OneArgs = {
  object: Message_Thread_Insert_Input;
  on_conflict?: Maybe<Message_Thread_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_PropertyArgs = {
  objects: Array<Property_Insert_Input>;
  on_conflict?: Maybe<Property_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Property_OneArgs = {
  object: Property_Insert_Input;
  on_conflict?: Maybe<Property_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_TaskArgs = {
  objects: Array<Task_Insert_Input>;
  on_conflict?: Maybe<Task_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Task_OneArgs = {
  object: Task_Insert_Input;
  on_conflict?: Maybe<Task_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_TasklistArgs = {
  objects: Array<Tasklist_Insert_Input>;
  on_conflict?: Maybe<Tasklist_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Tasklist_OneArgs = {
  object: Tasklist_Insert_Input;
  on_conflict?: Maybe<Tasklist_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_TransactionArgs = {
  objects: Array<Transaction_Insert_Input>;
  on_conflict?: Maybe<Transaction_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_Transaction_OneArgs = {
  object: Transaction_Insert_Input;
  on_conflict?: Maybe<Transaction_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_User_AccountArgs = {
  objects: Array<User_Account_Insert_Input>;
  on_conflict?: Maybe<User_Account_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_User_Account_OneArgs = {
  object: User_Account_Insert_Input;
  on_conflict?: Maybe<User_Account_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_User_ProfileArgs = {
  objects: Array<User_Profile_Insert_Input>;
  on_conflict?: Maybe<User_Profile_On_Conflict>;
};

/** mutation root */
export type Mutation_RootInsert_User_Profile_OneArgs = {
  object: User_Profile_Insert_Input;
  on_conflict?: Maybe<User_Profile_On_Conflict>;
};

/** mutation root */
export type Mutation_RootMessage_Mark_NotifiedArgs = {
  args: Message_Mark_Notified_Args;
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

/** mutation root */
export type Mutation_RootMessage_Mark_ReadArgs = {
  args: Message_Mark_Read_Args;
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

/** mutation root */
export type Mutation_RootMessage_Thread_SubscribeArgs = {
  args: Message_Thread_Subscribe_Args;
  distinct_on?: Maybe<Array<Message_Thread_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Thread_Order_By>>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

/** mutation root */
export type Mutation_RootMessage_Thread_UnsubscribeArgs = {
  args: Message_Thread_Unsubscribe_Args;
  distinct_on?: Maybe<Array<Message_Thread_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Thread_Order_By>>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

/** mutation root */
export type Mutation_RootUpdate_AppraisalArgs = {
  _append?: Maybe<Appraisal_Append_Input>;
  _delete_at_path?: Maybe<Appraisal_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Appraisal_Delete_Elem_Input>;
  _delete_key?: Maybe<Appraisal_Delete_Key_Input>;
  _inc?: Maybe<Appraisal_Inc_Input>;
  _prepend?: Maybe<Appraisal_Prepend_Input>;
  _set?: Maybe<Appraisal_Set_Input>;
  where: Appraisal_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_By_PkArgs = {
  _append?: Maybe<Appraisal_Append_Input>;
  _delete_at_path?: Maybe<Appraisal_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Appraisal_Delete_Elem_Input>;
  _delete_key?: Maybe<Appraisal_Delete_Key_Input>;
  _inc?: Maybe<Appraisal_Inc_Input>;
  _prepend?: Maybe<Appraisal_Prepend_Input>;
  _set?: Maybe<Appraisal_Set_Input>;
  pk_columns: Appraisal_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_CommissionArgs = {
  _append?: Maybe<Appraisal_Commission_Append_Input>;
  _delete_at_path?: Maybe<Appraisal_Commission_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Appraisal_Commission_Delete_Elem_Input>;
  _delete_key?: Maybe<Appraisal_Commission_Delete_Key_Input>;
  _inc?: Maybe<Appraisal_Commission_Inc_Input>;
  _prepend?: Maybe<Appraisal_Commission_Prepend_Input>;
  _set?: Maybe<Appraisal_Commission_Set_Input>;
  where: Appraisal_Commission_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_Commission_By_PkArgs = {
  _append?: Maybe<Appraisal_Commission_Append_Input>;
  _delete_at_path?: Maybe<Appraisal_Commission_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Appraisal_Commission_Delete_Elem_Input>;
  _delete_key?: Maybe<Appraisal_Commission_Delete_Key_Input>;
  _inc?: Maybe<Appraisal_Commission_Inc_Input>;
  _prepend?: Maybe<Appraisal_Commission_Prepend_Input>;
  _set?: Maybe<Appraisal_Commission_Set_Input>;
  pk_columns: Appraisal_Commission_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_Commission_ManyArgs = {
  updates: Array<Appraisal_Commission_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_ExpenseArgs = {
  _inc?: Maybe<Appraisal_Expense_Inc_Input>;
  _set?: Maybe<Appraisal_Expense_Set_Input>;
  where: Appraisal_Expense_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_Expense_By_PkArgs = {
  _inc?: Maybe<Appraisal_Expense_Inc_Input>;
  _set?: Maybe<Appraisal_Expense_Set_Input>;
  pk_columns: Appraisal_Expense_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_Expense_ManyArgs = {
  updates: Array<Appraisal_Expense_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_FeeArgs = {
  _inc?: Maybe<Appraisal_Fee_Inc_Input>;
  _set?: Maybe<Appraisal_Fee_Set_Input>;
  where: Appraisal_Fee_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_Fee_By_PkArgs = {
  _inc?: Maybe<Appraisal_Fee_Inc_Input>;
  _set?: Maybe<Appraisal_Fee_Set_Input>;
  pk_columns: Appraisal_Fee_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_Fee_ManyArgs = {
  updates: Array<Appraisal_Fee_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_Appraisal_ManyArgs = {
  updates: Array<Appraisal_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_AssessmentArgs = {
  _inc?: Maybe<Assessment_Inc_Input>;
  _set?: Maybe<Assessment_Set_Input>;
  where: Assessment_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Assessment_By_PkArgs = {
  _inc?: Maybe<Assessment_Inc_Input>;
  _set?: Maybe<Assessment_Set_Input>;
  pk_columns: Assessment_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Assessment_ManyArgs = {
  updates: Array<Assessment_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_ClientArgs = {
  _append?: Maybe<Client_Append_Input>;
  _delete_at_path?: Maybe<Client_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Client_Delete_Elem_Input>;
  _delete_key?: Maybe<Client_Delete_Key_Input>;
  _inc?: Maybe<Client_Inc_Input>;
  _prepend?: Maybe<Client_Prepend_Input>;
  _set?: Maybe<Client_Set_Input>;
  where: Client_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Client_By_PkArgs = {
  _append?: Maybe<Client_Append_Input>;
  _delete_at_path?: Maybe<Client_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Client_Delete_Elem_Input>;
  _delete_key?: Maybe<Client_Delete_Key_Input>;
  _inc?: Maybe<Client_Inc_Input>;
  _prepend?: Maybe<Client_Prepend_Input>;
  _set?: Maybe<Client_Set_Input>;
  pk_columns: Client_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Client_ManyArgs = {
  updates: Array<Client_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_ContactArgs = {
  _append?: Maybe<Contact_Append_Input>;
  _delete_at_path?: Maybe<Contact_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Contact_Delete_Elem_Input>;
  _delete_key?: Maybe<Contact_Delete_Key_Input>;
  _inc?: Maybe<Contact_Inc_Input>;
  _prepend?: Maybe<Contact_Prepend_Input>;
  _set?: Maybe<Contact_Set_Input>;
  where: Contact_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Contact_By_PkArgs = {
  _append?: Maybe<Contact_Append_Input>;
  _delete_at_path?: Maybe<Contact_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Contact_Delete_Elem_Input>;
  _delete_key?: Maybe<Contact_Delete_Key_Input>;
  _inc?: Maybe<Contact_Inc_Input>;
  _prepend?: Maybe<Contact_Prepend_Input>;
  _set?: Maybe<Contact_Set_Input>;
  pk_columns: Contact_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Contact_ManyArgs = {
  updates: Array<Contact_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_ExpenseArgs = {
  _inc?: Maybe<Expense_Inc_Input>;
  _set?: Maybe<Expense_Set_Input>;
  where: Expense_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Expense_By_PkArgs = {
  _inc?: Maybe<Expense_Inc_Input>;
  _set?: Maybe<Expense_Set_Input>;
  pk_columns: Expense_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Expense_ManyArgs = {
  updates: Array<Expense_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_FileArgs = {
  _set?: Maybe<File_Set_Input>;
  where: File_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_File_By_PkArgs = {
  _set?: Maybe<File_Set_Input>;
  pk_columns: File_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_File_ManyArgs = {
  updates: Array<File_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_Integration_AuthenticationArgs = {
  _append?: Maybe<Integration_Authentication_Append_Input>;
  _delete_at_path?: Maybe<Integration_Authentication_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Integration_Authentication_Delete_Elem_Input>;
  _delete_key?: Maybe<Integration_Authentication_Delete_Key_Input>;
  _inc?: Maybe<Integration_Authentication_Inc_Input>;
  _prepend?: Maybe<Integration_Authentication_Prepend_Input>;
  _set?: Maybe<Integration_Authentication_Set_Input>;
  where: Integration_Authentication_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Integration_Authentication_By_PkArgs = {
  _append?: Maybe<Integration_Authentication_Append_Input>;
  _delete_at_path?: Maybe<Integration_Authentication_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Integration_Authentication_Delete_Elem_Input>;
  _delete_key?: Maybe<Integration_Authentication_Delete_Key_Input>;
  _inc?: Maybe<Integration_Authentication_Inc_Input>;
  _prepend?: Maybe<Integration_Authentication_Prepend_Input>;
  _set?: Maybe<Integration_Authentication_Set_Input>;
  pk_columns: Integration_Authentication_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Integration_Authentication_ManyArgs = {
  updates: Array<Integration_Authentication_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_MessageArgs = {
  _set?: Maybe<Message_Set_Input>;
  where: Message_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Message_By_PkArgs = {
  _set?: Maybe<Message_Set_Input>;
  pk_columns: Message_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Message_ManyArgs = {
  updates: Array<Message_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_Message_ThreadArgs = {
  _append?: Maybe<Message_Thread_Append_Input>;
  _delete_at_path?: Maybe<Message_Thread_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Message_Thread_Delete_Elem_Input>;
  _delete_key?: Maybe<Message_Thread_Delete_Key_Input>;
  _prepend?: Maybe<Message_Thread_Prepend_Input>;
  _set?: Maybe<Message_Thread_Set_Input>;
  where: Message_Thread_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Message_Thread_By_PkArgs = {
  _append?: Maybe<Message_Thread_Append_Input>;
  _delete_at_path?: Maybe<Message_Thread_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Message_Thread_Delete_Elem_Input>;
  _delete_key?: Maybe<Message_Thread_Delete_Key_Input>;
  _prepend?: Maybe<Message_Thread_Prepend_Input>;
  _set?: Maybe<Message_Thread_Set_Input>;
  pk_columns: Message_Thread_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Message_Thread_ManyArgs = {
  updates: Array<Message_Thread_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_OrganizationArgs = {
  _append?: Maybe<Organization_Append_Input>;
  _delete_at_path?: Maybe<Organization_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Organization_Delete_Elem_Input>;
  _delete_key?: Maybe<Organization_Delete_Key_Input>;
  _prepend?: Maybe<Organization_Prepend_Input>;
  _set?: Maybe<Organization_Set_Input>;
  where: Organization_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Organization_By_PkArgs = {
  _append?: Maybe<Organization_Append_Input>;
  _delete_at_path?: Maybe<Organization_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Organization_Delete_Elem_Input>;
  _delete_key?: Maybe<Organization_Delete_Key_Input>;
  _prepend?: Maybe<Organization_Prepend_Input>;
  _set?: Maybe<Organization_Set_Input>;
  pk_columns: Organization_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Organization_ManyArgs = {
  updates: Array<Organization_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_PropertyArgs = {
  _append?: Maybe<Property_Append_Input>;
  _delete_at_path?: Maybe<Property_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Property_Delete_Elem_Input>;
  _delete_key?: Maybe<Property_Delete_Key_Input>;
  _inc?: Maybe<Property_Inc_Input>;
  _prepend?: Maybe<Property_Prepend_Input>;
  _set?: Maybe<Property_Set_Input>;
  where: Property_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Property_By_PkArgs = {
  _append?: Maybe<Property_Append_Input>;
  _delete_at_path?: Maybe<Property_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Property_Delete_Elem_Input>;
  _delete_key?: Maybe<Property_Delete_Key_Input>;
  _inc?: Maybe<Property_Inc_Input>;
  _prepend?: Maybe<Property_Prepend_Input>;
  _set?: Maybe<Property_Set_Input>;
  pk_columns: Property_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Property_ManyArgs = {
  updates: Array<Property_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_TaskArgs = {
  _inc?: Maybe<Task_Inc_Input>;
  _set?: Maybe<Task_Set_Input>;
  where: Task_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Task_By_PkArgs = {
  _inc?: Maybe<Task_Inc_Input>;
  _set?: Maybe<Task_Set_Input>;
  pk_columns: Task_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Task_ManyArgs = {
  updates: Array<Task_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_TasklistArgs = {
  _append?: Maybe<Tasklist_Append_Input>;
  _delete_at_path?: Maybe<Tasklist_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Tasklist_Delete_Elem_Input>;
  _delete_key?: Maybe<Tasklist_Delete_Key_Input>;
  _inc?: Maybe<Tasklist_Inc_Input>;
  _prepend?: Maybe<Tasklist_Prepend_Input>;
  _set?: Maybe<Tasklist_Set_Input>;
  where: Tasklist_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Tasklist_By_PkArgs = {
  _append?: Maybe<Tasklist_Append_Input>;
  _delete_at_path?: Maybe<Tasklist_Delete_At_Path_Input>;
  _delete_elem?: Maybe<Tasklist_Delete_Elem_Input>;
  _delete_key?: Maybe<Tasklist_Delete_Key_Input>;
  _inc?: Maybe<Tasklist_Inc_Input>;
  _prepend?: Maybe<Tasklist_Prepend_Input>;
  _set?: Maybe<Tasklist_Set_Input>;
  pk_columns: Tasklist_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Tasklist_ManyArgs = {
  updates: Array<Tasklist_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_TransactionArgs = {
  _inc?: Maybe<Transaction_Inc_Input>;
  _set?: Maybe<Transaction_Set_Input>;
  where: Transaction_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_Transaction_By_PkArgs = {
  _inc?: Maybe<Transaction_Inc_Input>;
  _set?: Maybe<Transaction_Set_Input>;
  pk_columns: Transaction_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_Transaction_ManyArgs = {
  updates: Array<Transaction_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_User_AccountArgs = {
  _inc?: Maybe<User_Account_Inc_Input>;
  _set?: Maybe<User_Account_Set_Input>;
  where: User_Account_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_User_Account_By_PkArgs = {
  _inc?: Maybe<User_Account_Inc_Input>;
  _set?: Maybe<User_Account_Set_Input>;
  pk_columns: User_Account_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_User_Account_ManyArgs = {
  updates: Array<User_Account_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_User_Preference_NotificationArgs = {
  _set?: Maybe<User_Preference_Notification_Set_Input>;
  where: User_Preference_Notification_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_User_Preference_Notification_By_PkArgs = {
  _set?: Maybe<User_Preference_Notification_Set_Input>;
  pk_columns: User_Preference_Notification_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_User_Preference_Notification_ManyArgs = {
  updates: Array<User_Preference_Notification_Updates>;
};

/** mutation root */
export type Mutation_RootUpdate_User_ProfileArgs = {
  _append?: Maybe<User_Profile_Append_Input>;
  _delete_at_path?: Maybe<User_Profile_Delete_At_Path_Input>;
  _delete_elem?: Maybe<User_Profile_Delete_Elem_Input>;
  _delete_key?: Maybe<User_Profile_Delete_Key_Input>;
  _prepend?: Maybe<User_Profile_Prepend_Input>;
  _set?: Maybe<User_Profile_Set_Input>;
  where: User_Profile_Bool_Exp;
};

/** mutation root */
export type Mutation_RootUpdate_User_Profile_By_PkArgs = {
  _append?: Maybe<User_Profile_Append_Input>;
  _delete_at_path?: Maybe<User_Profile_Delete_At_Path_Input>;
  _delete_elem?: Maybe<User_Profile_Delete_Elem_Input>;
  _delete_key?: Maybe<User_Profile_Delete_Key_Input>;
  _prepend?: Maybe<User_Profile_Prepend_Input>;
  _set?: Maybe<User_Profile_Set_Input>;
  pk_columns: User_Profile_Pk_Columns_Input;
};

/** mutation root */
export type Mutation_RootUpdate_User_Profile_ManyArgs = {
  updates: Array<User_Profile_Updates>;
};

/** Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'. */
export type Numeric_Comparison_Exp = {
  _eq?: Maybe<Scalars['numeric']>;
  _gt?: Maybe<Scalars['numeric']>;
  _gte?: Maybe<Scalars['numeric']>;
  _in?: Maybe<Array<Scalars['numeric']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['numeric']>;
  _lte?: Maybe<Scalars['numeric']>;
  _neq?: Maybe<Scalars['numeric']>;
  _nin?: Maybe<Array<Scalars['numeric']>>;
};

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc = 'desc',
  /** in descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast = 'desc_nulls_last',
}

/** columns and relationships of "organization" */
export type Organization = {
  __typename?: 'organization';
  /** An array relationship */
  appraisals: Array<Appraisal>;
  /** An aggregate relationship */
  appraisals_aggregate: Appraisal_Aggregate;
  appraisals_count: Scalars['Int'];
  /** An array relationship */
  clients: Array<Client>;
  /** An aggregate relationship */
  clients_aggregate: Client_Aggregate;
  /** An array relationship */
  contacts: Array<Contact>;
  /** An aggregate relationship */
  contacts_aggregate: Contact_Aggregate;
  created_at: Scalars['timestamptz'];
  enabled: Scalars['Boolean'];
  id: Scalars['uuid'];
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  organization_role_id: Scalars['Int'];
  phone_number?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  time_zone?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  url?: Maybe<Scalars['String']>;
  /** An array relationship */
  user_accounts: Array<User_Account>;
  user_accounts_active_count: Scalars['Int'];
  /** An aggregate relationship */
  user_accounts_aggregate: User_Account_Aggregate;
  user_accounts_count?: Maybe<Scalars['Int']>;
  user_accounts_inactive_count: Scalars['Int'];
};

/** columns and relationships of "organization" */
export type OrganizationAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "organization" */
export type OrganizationAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "organization" */
export type OrganizationClientsArgs = {
  distinct_on?: Maybe<Array<Client_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Order_By>>;
  where?: Maybe<Client_Bool_Exp>;
};

/** columns and relationships of "organization" */
export type OrganizationClients_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Order_By>>;
  where?: Maybe<Client_Bool_Exp>;
};

/** columns and relationships of "organization" */
export type OrganizationContactsArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

/** columns and relationships of "organization" */
export type OrganizationContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

/** columns and relationships of "organization" */
export type OrganizationLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "organization" */
export type OrganizationUser_AccountsArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

/** columns and relationships of "organization" */
export type OrganizationUser_Accounts_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Organization_Append_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** Boolean expression to filter rows from the table "organization". All fields are combined with a logical 'AND'. */
export type Organization_Bool_Exp = {
  _and?: Maybe<Array<Organization_Bool_Exp>>;
  _not?: Maybe<Organization_Bool_Exp>;
  _or?: Maybe<Array<Organization_Bool_Exp>>;
  appraisals?: Maybe<Appraisal_Bool_Exp>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  clients?: Maybe<Client_Bool_Exp>;
  contacts?: Maybe<Contact_Bool_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  enabled?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  organization_role_id?: Maybe<Int_Comparison_Exp>;
  phone_number?: Maybe<String_Comparison_Exp>;
  tax_id?: Maybe<String_Comparison_Exp>;
  time_zone?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_accounts?: Maybe<User_Account_Bool_Exp>;
  user_accounts_active_count?: Maybe<Int_Comparison_Exp>;
  user_accounts_count?: Maybe<Int_Comparison_Exp>;
  user_accounts_inactive_count?: Maybe<Int_Comparison_Exp>;
};

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Organization_Delete_At_Path_Input = {
  location_components?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Organization_Delete_Elem_Input = {
  location_components?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Organization_Delete_Key_Input = {
  location_components?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "organization" */
export type Organization_Mutation_Response = {
  __typename?: 'organization_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Organization>;
};

/** Ordering options when selecting data from "organization". */
export type Organization_Order_By = {
  appraisals_aggregate?: Maybe<Appraisal_Aggregate_Order_By>;
  appraisals_count?: Maybe<Order_By>;
  clients_aggregate?: Maybe<Client_Aggregate_Order_By>;
  contacts_aggregate?: Maybe<Contact_Aggregate_Order_By>;
  created_at?: Maybe<Order_By>;
  enabled?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  organization_role_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  tax_id?: Maybe<Order_By>;
  time_zone?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_accounts_active_count?: Maybe<Order_By>;
  user_accounts_aggregate?: Maybe<User_Account_Aggregate_Order_By>;
  user_accounts_count?: Maybe<Order_By>;
  user_accounts_inactive_count?: Maybe<Order_By>;
};

/** primary key columns input for table: organization */
export type Organization_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Organization_Prepend_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "organization" */
export enum Organization_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Enabled = 'enabled',
  /** column name */
  Id = 'id',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Name = 'name',
  /** column name */
  OrganizationRoleId = 'organization_role_id',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  TaxId = 'tax_id',
  /** column name */
  TimeZone = 'time_zone',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountsActiveCount = 'user_accounts_active_count',
  /** column name */
  UserAccountsCount = 'user_accounts_count',
  /** column name */
  UserAccountsInactiveCount = 'user_accounts_inactive_count',
}

/** input type for updating data in table "organization" */
export type Organization_Set_Input = {
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  time_zone?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** Streaming cursor of the table "organization" */
export type Organization_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Organization_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Organization_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  enabled?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  organization_role_id?: Maybe<Scalars['Int']>;
  phone_number?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  time_zone?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_accounts_active_count?: Maybe<Scalars['Int']>;
  user_accounts_count?: Maybe<Scalars['Int']>;
  user_accounts_inactive_count?: Maybe<Scalars['Int']>;
};

export type Organization_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Organization_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Organization_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Organization_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Organization_Delete_Key_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Organization_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Organization_Set_Input>;
  where: Organization_Bool_Exp;
};

/** Boolean expression to compare columns of type "parent_type". All fields are combined with logical 'AND'. */
export type Parent_Type_Comparison_Exp = {
  _eq?: Maybe<Scalars['parent_type']>;
  _gt?: Maybe<Scalars['parent_type']>;
  _gte?: Maybe<Scalars['parent_type']>;
  _in?: Maybe<Array<Scalars['parent_type']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['parent_type']>;
  _lte?: Maybe<Scalars['parent_type']>;
  _neq?: Maybe<Scalars['parent_type']>;
  _nin?: Maybe<Array<Scalars['parent_type']>>;
};

export type PresignUrlInput = {
  key: Scalars['String'];
  parent: Scalars['String'];
  parent_id: Scalars['String'];
};

export type PresignUrlOutput = {
  __typename?: 'presignUrlOutput';
  signed_url: Scalars['String'];
};

/** columns and relationships of "properties" */
export type Properties = {
  __typename?: 'properties';
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** columns and relationships of "properties" */
export type PropertiesLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "properties" */
export type Properties_Aggregate = {
  __typename?: 'properties_aggregate';
  aggregate?: Maybe<Properties_Aggregate_Fields>;
  nodes: Array<Properties>;
};

/** aggregate fields of "properties" */
export type Properties_Aggregate_Fields = {
  __typename?: 'properties_aggregate_fields';
  avg?: Maybe<Properties_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Properties_Max_Fields>;
  min?: Maybe<Properties_Min_Fields>;
  stddev?: Maybe<Properties_Stddev_Fields>;
  stddev_pop?: Maybe<Properties_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Properties_Stddev_Samp_Fields>;
  sum?: Maybe<Properties_Sum_Fields>;
  var_pop?: Maybe<Properties_Var_Pop_Fields>;
  var_samp?: Maybe<Properties_Var_Samp_Fields>;
  variance?: Maybe<Properties_Variance_Fields>;
};

/** aggregate fields of "properties" */
export type Properties_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Properties_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Properties_Avg_Fields = {
  __typename?: 'properties_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "properties". All fields are combined with a logical 'AND'. */
export type Properties_Bool_Exp = {
  _and?: Maybe<Array<Properties_Bool_Exp>>;
  _not?: Maybe<Properties_Bool_Exp>;
  _or?: Maybe<Array<Properties_Bool_Exp>>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  commercial_building_name?: Maybe<String_Comparison_Exp>;
  commercial_buildings?: Maybe<Int_Comparison_Exp>;
  commercial_floors?: Maybe<Int_Comparison_Exp>;
  commercial_gross_area?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype?: Maybe<String_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<String_Comparison_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_units?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  energy_efficient_items?: Maybe<String_Comparison_Exp>;
  heating_cooling?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  lease_comps_count?: Maybe<Int_Comparison_Exp>;
  legal_description?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_type?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  residential_above_grade_bathrooms?: Maybe<Int_Comparison_Exp>;
  residential_above_grade_bedrooms?: Maybe<Int_Comparison_Exp>;
  residential_basement_and_finished?: Maybe<String_Comparison_Exp>;
  residential_below_grade_bathrooms?: Maybe<Int_Comparison_Exp>;
  residential_below_grade_bedrooms?: Maybe<Int_Comparison_Exp>;
  residential_fireplaces?: Maybe<String_Comparison_Exp>;
  residential_functional_utility?: Maybe<String_Comparison_Exp>;
  residential_garage_carport?: Maybe<String_Comparison_Exp>;
  residential_gross_living_area?: Maybe<Numeric_Comparison_Exp>;
  residential_other?: Maybe<String_Comparison_Exp>;
  residential_ownership_type?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_porch_patio_deck?: Maybe<String_Comparison_Exp>;
  residential_style?: Maybe<String_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  sales_comps_count?: Maybe<Int_Comparison_Exp>;
  site?: Maybe<String_Comparison_Exp>;
  subdivision?: Maybe<String_Comparison_Exp>;
  tax_id?: Maybe<String_Comparison_Exp>;
  total_acres?: Maybe<Numeric_Comparison_Exp>;
  universal_property_identifier?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  year_built?: Maybe<Timestamptz_Comparison_Exp>;
  year_renovated?: Maybe<Timestamptz_Comparison_Exp>;
  zoning?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Properties_Max_Fields = {
  __typename?: 'properties_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Properties_Min_Fields = {
  __typename?: 'properties_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "properties". */
export type Properties_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  commercial_building_name?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  energy_efficient_items?: Maybe<Order_By>;
  heating_cooling?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lease_comps_count?: Maybe<Order_By>;
  legal_description?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_basement_and_finished?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_fireplaces?: Maybe<Order_By>;
  residential_functional_utility?: Maybe<Order_By>;
  residential_garage_carport?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_other?: Maybe<Order_By>;
  residential_ownership_type?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_porch_patio_deck?: Maybe<Order_By>;
  residential_style?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_comps_count?: Maybe<Order_By>;
  site?: Maybe<Order_By>;
  subdivision?: Maybe<Order_By>;
  tax_id?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
  universal_property_identifier?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  year_built?: Maybe<Order_By>;
  year_renovated?: Maybe<Order_By>;
  zoning?: Maybe<Order_By>;
};

/** select columns of table "properties" */
export enum Properties_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  CommercialBuildingName = 'commercial_building_name',
  /** column name */
  CommercialBuildings = 'commercial_buildings',
  /** column name */
  CommercialFloors = 'commercial_floors',
  /** column name */
  CommercialGrossArea = 'commercial_gross_area',
  /** column name */
  CommercialPropertySubtype = 'commercial_property_subtype',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyType = 'commercial_property_type',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  CommercialUnits = 'commercial_units',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EnergyEfficientItems = 'energy_efficient_items',
  /** column name */
  HeatingCooling = 'heating_cooling',
  /** column name */
  Id = 'id',
  /** column name */
  LeaseCompsCount = 'lease_comps_count',
  /** column name */
  LegalDescription = 'legal_description',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyType = 'property_type',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  ResidentialAboveGradeBathrooms = 'residential_above_grade_bathrooms',
  /** column name */
  ResidentialAboveGradeBedrooms = 'residential_above_grade_bedrooms',
  /** column name */
  ResidentialBasementAndFinished = 'residential_basement_and_finished',
  /** column name */
  ResidentialBelowGradeBathrooms = 'residential_below_grade_bathrooms',
  /** column name */
  ResidentialBelowGradeBedrooms = 'residential_below_grade_bedrooms',
  /** column name */
  ResidentialFireplaces = 'residential_fireplaces',
  /** column name */
  ResidentialFunctionalUtility = 'residential_functional_utility',
  /** column name */
  ResidentialGarageCarport = 'residential_garage_carport',
  /** column name */
  ResidentialGrossLivingArea = 'residential_gross_living_area',
  /** column name */
  ResidentialOther = 'residential_other',
  /** column name */
  ResidentialOwnershipType = 'residential_ownership_type',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialPorchPatioDeck = 'residential_porch_patio_deck',
  /** column name */
  ResidentialStyle = 'residential_style',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  SalesCompsCount = 'sales_comps_count',
  /** column name */
  Site = 'site',
  /** column name */
  Subdivision = 'subdivision',
  /** column name */
  TaxId = 'tax_id',
  /** column name */
  TotalAcres = 'total_acres',
  /** column name */
  UniversalPropertyIdentifier = 'universal_property_identifier',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  YearBuilt = 'year_built',
  /** column name */
  YearRenovated = 'year_renovated',
  /** column name */
  Zoning = 'zoning',
}

/** aggregate stddev on columns */
export type Properties_Stddev_Fields = {
  __typename?: 'properties_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Properties_Stddev_Pop_Fields = {
  __typename?: 'properties_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Properties_Stddev_Samp_Fields = {
  __typename?: 'properties_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "properties" */
export type Properties_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Properties_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Properties_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Properties_Sum_Fields = {
  __typename?: 'properties_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  total_acres?: Maybe<Scalars['numeric']>;
};

/** aggregate var_pop on columns */
export type Properties_Var_Pop_Fields = {
  __typename?: 'properties_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Properties_Var_Samp_Fields = {
  __typename?: 'properties_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Properties_Variance_Fields = {
  __typename?: 'properties_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "property" */
export type Property = {
  __typename?: 'property';
  /** An array relationship */
  appraisals: Array<Appraisal>;
  /** An aggregate relationship */
  appraisals_aggregate: Appraisal_Aggregate;
  appraisals_count?: Maybe<Scalars['Int']>;
  /** An array relationship */
  assessments: Array<Assessment>;
  /** An aggregate relationship */
  assessments_aggregate: Assessment_Aggregate;
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  /** An object relationship */
  commercial_property_subtype?: Maybe<Commercial_Property_Subtype>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  /** An object relationship */
  commercial_property_type?: Maybe<Commercial_Property_Type>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at: Scalars['timestamptz'];
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  parcel_number?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  /** An array relationship */
  transactions: Array<Transaction>;
  /** An aggregate relationship */
  transactions_aggregate: Transaction_Aggregate;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  /** An object relationship */
  user_account: User_Account;
  user_account_id: Scalars['uuid'];
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** columns and relationships of "property" */
export type PropertyAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "property" */
export type PropertyAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "property" */
export type PropertyAssessmentsArgs = {
  distinct_on?: Maybe<Array<Assessment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assessment_Order_By>>;
  where?: Maybe<Assessment_Bool_Exp>;
};

/** columns and relationships of "property" */
export type PropertyAssessments_AggregateArgs = {
  distinct_on?: Maybe<Array<Assessment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assessment_Order_By>>;
  where?: Maybe<Assessment_Bool_Exp>;
};

/** columns and relationships of "property" */
export type PropertyLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "property" */
export type PropertyTransactionsArgs = {
  distinct_on?: Maybe<Array<Transaction_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Order_By>>;
  where?: Maybe<Transaction_Bool_Exp>;
};

/** columns and relationships of "property" */
export type PropertyTransactions_AggregateArgs = {
  distinct_on?: Maybe<Array<Transaction_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Order_By>>;
  where?: Maybe<Transaction_Bool_Exp>;
};

/** aggregated selection of "property" */
export type Property_Aggregate = {
  __typename?: 'property_aggregate';
  aggregate?: Maybe<Property_Aggregate_Fields>;
  nodes: Array<Property>;
};

/** aggregate fields of "property" */
export type Property_Aggregate_Fields = {
  __typename?: 'property_aggregate_fields';
  avg?: Maybe<Property_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Property_Max_Fields>;
  min?: Maybe<Property_Min_Fields>;
  stddev?: Maybe<Property_Stddev_Fields>;
  stddev_pop?: Maybe<Property_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Property_Stddev_Samp_Fields>;
  sum?: Maybe<Property_Sum_Fields>;
  var_pop?: Maybe<Property_Var_Pop_Fields>;
  var_samp?: Maybe<Property_Var_Samp_Fields>;
  variance?: Maybe<Property_Variance_Fields>;
};

/** aggregate fields of "property" */
export type Property_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Property_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Property_Append_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** aggregate avg on columns */
export type Property_Avg_Fields = {
  __typename?: 'property_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_building_class_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "property". All fields are combined with a logical 'AND'. */
export type Property_Bool_Exp = {
  _and?: Maybe<Array<Property_Bool_Exp>>;
  _not?: Maybe<Property_Bool_Exp>;
  _or?: Maybe<Array<Property_Bool_Exp>>;
  appraisals?: Maybe<Appraisal_Bool_Exp>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  assessments?: Maybe<Assessment_Bool_Exp>;
  commercial_building_class_id?: Maybe<Int_Comparison_Exp>;
  commercial_building_name?: Maybe<String_Comparison_Exp>;
  commercial_buildings?: Maybe<Int_Comparison_Exp>;
  commercial_floors?: Maybe<Int_Comparison_Exp>;
  commercial_gross_area?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<Commercial_Property_Type_Bool_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_units?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  energy_efficient_items?: Maybe<String_Comparison_Exp>;
  heating_cooling?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  lease_comps_count?: Maybe<Int_Comparison_Exp>;
  legal_description?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  residential_above_grade_bathrooms?: Maybe<Int_Comparison_Exp>;
  residential_above_grade_bedrooms?: Maybe<Int_Comparison_Exp>;
  residential_basement_and_finished?: Maybe<String_Comparison_Exp>;
  residential_below_grade_bathrooms?: Maybe<Int_Comparison_Exp>;
  residential_below_grade_bedrooms?: Maybe<Int_Comparison_Exp>;
  residential_fireplaces?: Maybe<String_Comparison_Exp>;
  residential_functional_utility?: Maybe<String_Comparison_Exp>;
  residential_garage_carport?: Maybe<String_Comparison_Exp>;
  residential_gross_living_area?: Maybe<Numeric_Comparison_Exp>;
  residential_other?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_porch_patio_deck?: Maybe<String_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  sales_comps_count?: Maybe<Int_Comparison_Exp>;
  site?: Maybe<String_Comparison_Exp>;
  subdivision?: Maybe<String_Comparison_Exp>;
  tax_id?: Maybe<String_Comparison_Exp>;
  total_acres?: Maybe<Numeric_Comparison_Exp>;
  transactions?: Maybe<Transaction_Bool_Exp>;
  universal_property_identifier?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account?: Maybe<User_Account_Bool_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  year_built?: Maybe<Timestamptz_Comparison_Exp>;
  year_renovated?: Maybe<Timestamptz_Comparison_Exp>;
  zoning?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "property" */
export enum Property_Constraint {
  /** unique or primary key constraint on columns "id" */
  PropertyPkey = 'property_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Property_Delete_At_Path_Input = {
  location_components?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Property_Delete_Elem_Input = {
  location_components?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Property_Delete_Key_Input = {
  location_components?: Maybe<Scalars['String']>;
};

/** input type for incrementing numeric columns in table "property" */
export type Property_Inc_Input = {
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  total_acres?: Maybe<Scalars['numeric']>;
};

/** input type for inserting data into table "property" */
export type Property_Insert_Input = {
  appraisals?: Maybe<Appraisal_Arr_Rel_Insert_Input>;
  assessments?: Maybe<Assessment_Arr_Rel_Insert_Input>;
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  transactions?: Maybe<Transaction_Arr_Rel_Insert_Input>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  user_account?: Maybe<User_Account_Obj_Rel_Insert_Input>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** columns and relationships of "property_interests" */
export type Property_Interests = {
  __typename?: 'property_interests';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  interest?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "property_interests" */
export type Property_Interests_Aggregate = {
  __typename?: 'property_interests_aggregate';
  aggregate?: Maybe<Property_Interests_Aggregate_Fields>;
  nodes: Array<Property_Interests>;
};

/** aggregate fields of "property_interests" */
export type Property_Interests_Aggregate_Fields = {
  __typename?: 'property_interests_aggregate_fields';
  avg?: Maybe<Property_Interests_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Property_Interests_Max_Fields>;
  min?: Maybe<Property_Interests_Min_Fields>;
  stddev?: Maybe<Property_Interests_Stddev_Fields>;
  stddev_pop?: Maybe<Property_Interests_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Property_Interests_Stddev_Samp_Fields>;
  sum?: Maybe<Property_Interests_Sum_Fields>;
  var_pop?: Maybe<Property_Interests_Var_Pop_Fields>;
  var_samp?: Maybe<Property_Interests_Var_Samp_Fields>;
  variance?: Maybe<Property_Interests_Variance_Fields>;
};

/** aggregate fields of "property_interests" */
export type Property_Interests_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Property_Interests_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Property_Interests_Avg_Fields = {
  __typename?: 'property_interests_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "property_interests". All fields are combined with a logical 'AND'. */
export type Property_Interests_Bool_Exp = {
  _and?: Maybe<Array<Property_Interests_Bool_Exp>>;
  _not?: Maybe<Property_Interests_Bool_Exp>;
  _or?: Maybe<Array<Property_Interests_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  interest?: Maybe<String_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Property_Interests_Max_Fields = {
  __typename?: 'property_interests_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  interest?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Property_Interests_Min_Fields = {
  __typename?: 'property_interests_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  interest?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "property_interests". */
export type Property_Interests_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  interest?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "property_interests" */
export enum Property_Interests_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Interest = 'interest',
  /** column name */
  Order = 'order',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Property_Interests_Stddev_Fields = {
  __typename?: 'property_interests_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Property_Interests_Stddev_Pop_Fields = {
  __typename?: 'property_interests_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Property_Interests_Stddev_Samp_Fields = {
  __typename?: 'property_interests_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "property_interests" */
export type Property_Interests_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Property_Interests_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Property_Interests_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  interest?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Property_Interests_Sum_Fields = {
  __typename?: 'property_interests_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Property_Interests_Var_Pop_Fields = {
  __typename?: 'property_interests_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Property_Interests_Var_Samp_Fields = {
  __typename?: 'property_interests_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Property_Interests_Variance_Fields = {
  __typename?: 'property_interests_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate max on columns */
export type Property_Max_Fields = {
  __typename?: 'property_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Property_Min_Fields = {
  __typename?: 'property_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "property" */
export type Property_Mutation_Response = {
  __typename?: 'property_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Property>;
};

/** input type for inserting object relation for remote table "property" */
export type Property_Obj_Rel_Insert_Input = {
  data: Property_Insert_Input;
  /** upsert condition */
  on_conflict?: Maybe<Property_On_Conflict>;
};

/** on_conflict condition type for table "property" */
export type Property_On_Conflict = {
  constraint: Property_Constraint;
  update_columns: Array<Property_Update_Column>;
  where?: Maybe<Property_Bool_Exp>;
};

/** Ordering options when selecting data from "property". */
export type Property_Order_By = {
  appraisals_aggregate?: Maybe<Appraisal_Aggregate_Order_By>;
  appraisals_count?: Maybe<Order_By>;
  assessments_aggregate?: Maybe<Assessment_Aggregate_Order_By>;
  commercial_building_class_id?: Maybe<Order_By>;
  commercial_building_name?: Maybe<Order_By>;
  commercial_buildings?: Maybe<Order_By>;
  commercial_floors?: Maybe<Order_By>;
  commercial_gross_area?: Maybe<Order_By>;
  commercial_property_subtype?: Maybe<Commercial_Property_Subtype_Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Commercial_Property_Type_Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_units?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  energy_efficient_items?: Maybe<Order_By>;
  heating_cooling?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  lease_comps_count?: Maybe<Order_By>;
  legal_description?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_above_grade_bathrooms?: Maybe<Order_By>;
  residential_above_grade_bedrooms?: Maybe<Order_By>;
  residential_basement_and_finished?: Maybe<Order_By>;
  residential_below_grade_bathrooms?: Maybe<Order_By>;
  residential_below_grade_bedrooms?: Maybe<Order_By>;
  residential_fireplaces?: Maybe<Order_By>;
  residential_functional_utility?: Maybe<Order_By>;
  residential_garage_carport?: Maybe<Order_By>;
  residential_gross_living_area?: Maybe<Order_By>;
  residential_other?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_porch_patio_deck?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sales_comps_count?: Maybe<Order_By>;
  site?: Maybe<Order_By>;
  subdivision?: Maybe<Order_By>;
  tax_id?: Maybe<Order_By>;
  total_acres?: Maybe<Order_By>;
  transactions_aggregate?: Maybe<Transaction_Aggregate_Order_By>;
  universal_property_identifier?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account?: Maybe<User_Account_Order_By>;
  user_account_id?: Maybe<Order_By>;
  year_built?: Maybe<Order_By>;
  year_renovated?: Maybe<Order_By>;
  zoning?: Maybe<Order_By>;
};

/** primary key columns input for table: property */
export type Property_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Property_Prepend_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "property" */
export enum Property_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  CommercialBuildingClassId = 'commercial_building_class_id',
  /** column name */
  CommercialBuildingName = 'commercial_building_name',
  /** column name */
  CommercialBuildings = 'commercial_buildings',
  /** column name */
  CommercialFloors = 'commercial_floors',
  /** column name */
  CommercialGrossArea = 'commercial_gross_area',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  CommercialUnits = 'commercial_units',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EnergyEfficientItems = 'energy_efficient_items',
  /** column name */
  HeatingCooling = 'heating_cooling',
  /** column name */
  Id = 'id',
  /** column name */
  LeaseCompsCount = 'lease_comps_count',
  /** column name */
  LegalDescription = 'legal_description',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  ResidentialAboveGradeBathrooms = 'residential_above_grade_bathrooms',
  /** column name */
  ResidentialAboveGradeBedrooms = 'residential_above_grade_bedrooms',
  /** column name */
  ResidentialBasementAndFinished = 'residential_basement_and_finished',
  /** column name */
  ResidentialBelowGradeBathrooms = 'residential_below_grade_bathrooms',
  /** column name */
  ResidentialBelowGradeBedrooms = 'residential_below_grade_bedrooms',
  /** column name */
  ResidentialFireplaces = 'residential_fireplaces',
  /** column name */
  ResidentialFunctionalUtility = 'residential_functional_utility',
  /** column name */
  ResidentialGarageCarport = 'residential_garage_carport',
  /** column name */
  ResidentialGrossLivingArea = 'residential_gross_living_area',
  /** column name */
  ResidentialOther = 'residential_other',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialPorchPatioDeck = 'residential_porch_patio_deck',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  SalesCompsCount = 'sales_comps_count',
  /** column name */
  Site = 'site',
  /** column name */
  Subdivision = 'subdivision',
  /** column name */
  TaxId = 'tax_id',
  /** column name */
  TotalAcres = 'total_acres',
  /** column name */
  UniversalPropertyIdentifier = 'universal_property_identifier',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  YearBuilt = 'year_built',
  /** column name */
  YearRenovated = 'year_renovated',
  /** column name */
  Zoning = 'zoning',
}

/** input type for updating data in table "property" */
export type Property_Set_Input = {
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Property_Stddev_Fields = {
  __typename?: 'property_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_building_class_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Property_Stddev_Pop_Fields = {
  __typename?: 'property_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_building_class_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Property_Stddev_Samp_Fields = {
  __typename?: 'property_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_building_class_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "property" */
export type Property_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Property_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Property_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_building_name?: Maybe<Scalars['String']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  energy_efficient_items?: Maybe<Scalars['String']>;
  heating_cooling?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  legal_description?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_basement_and_finished?: Maybe<Scalars['String']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_fireplaces?: Maybe<Scalars['String']>;
  residential_functional_utility?: Maybe<Scalars['String']>;
  residential_garage_carport?: Maybe<Scalars['String']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_other?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_porch_patio_deck?: Maybe<Scalars['String']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  site?: Maybe<Scalars['String']>;
  subdivision?: Maybe<Scalars['String']>;
  tax_id?: Maybe<Scalars['String']>;
  total_acres?: Maybe<Scalars['numeric']>;
  universal_property_identifier?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  year_built?: Maybe<Scalars['timestamptz']>;
  year_renovated?: Maybe<Scalars['timestamptz']>;
  zoning?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Property_Sum_Fields = {
  __typename?: 'property_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  commercial_building_class_id?: Maybe<Scalars['Int']>;
  commercial_buildings?: Maybe<Scalars['Int']>;
  commercial_floors?: Maybe<Scalars['Int']>;
  commercial_gross_area?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_units?: Maybe<Scalars['Int']>;
  lease_comps_count?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Int']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Int']>;
  residential_gross_living_area?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sales_comps_count?: Maybe<Scalars['Int']>;
  total_acres?: Maybe<Scalars['numeric']>;
};

/** columns and relationships of "property_types" */
export type Property_Types = {
  __typename?: 'property_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "property_types" */
export type Property_Types_Aggregate = {
  __typename?: 'property_types_aggregate';
  aggregate?: Maybe<Property_Types_Aggregate_Fields>;
  nodes: Array<Property_Types>;
};

/** aggregate fields of "property_types" */
export type Property_Types_Aggregate_Fields = {
  __typename?: 'property_types_aggregate_fields';
  avg?: Maybe<Property_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Property_Types_Max_Fields>;
  min?: Maybe<Property_Types_Min_Fields>;
  stddev?: Maybe<Property_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Property_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Property_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Property_Types_Sum_Fields>;
  var_pop?: Maybe<Property_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Property_Types_Var_Samp_Fields>;
  variance?: Maybe<Property_Types_Variance_Fields>;
};

/** aggregate fields of "property_types" */
export type Property_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Property_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Property_Types_Avg_Fields = {
  __typename?: 'property_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "property_types". All fields are combined with a logical 'AND'. */
export type Property_Types_Bool_Exp = {
  _and?: Maybe<Array<Property_Types_Bool_Exp>>;
  _not?: Maybe<Property_Types_Bool_Exp>;
  _or?: Maybe<Array<Property_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Property_Types_Max_Fields = {
  __typename?: 'property_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Property_Types_Min_Fields = {
  __typename?: 'property_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "property_types". */
export type Property_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "property_types" */
export enum Property_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Property_Types_Stddev_Fields = {
  __typename?: 'property_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Property_Types_Stddev_Pop_Fields = {
  __typename?: 'property_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Property_Types_Stddev_Samp_Fields = {
  __typename?: 'property_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "property_types" */
export type Property_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Property_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Property_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Property_Types_Sum_Fields = {
  __typename?: 'property_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Property_Types_Var_Pop_Fields = {
  __typename?: 'property_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Property_Types_Var_Samp_Fields = {
  __typename?: 'property_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Property_Types_Variance_Fields = {
  __typename?: 'property_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** update columns of table "property" */
export enum Property_Update_Column {
  /** column name */
  CommercialBuildingClassId = 'commercial_building_class_id',
  /** column name */
  CommercialBuildingName = 'commercial_building_name',
  /** column name */
  CommercialBuildings = 'commercial_buildings',
  /** column name */
  CommercialFloors = 'commercial_floors',
  /** column name */
  CommercialGrossArea = 'commercial_gross_area',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  CommercialUnits = 'commercial_units',
  /** column name */
  EnergyEfficientItems = 'energy_efficient_items',
  /** column name */
  HeatingCooling = 'heating_cooling',
  /** column name */
  LegalDescription = 'legal_description',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  ResidentialAboveGradeBathrooms = 'residential_above_grade_bathrooms',
  /** column name */
  ResidentialAboveGradeBedrooms = 'residential_above_grade_bedrooms',
  /** column name */
  ResidentialBasementAndFinished = 'residential_basement_and_finished',
  /** column name */
  ResidentialBelowGradeBathrooms = 'residential_below_grade_bathrooms',
  /** column name */
  ResidentialBelowGradeBedrooms = 'residential_below_grade_bedrooms',
  /** column name */
  ResidentialFireplaces = 'residential_fireplaces',
  /** column name */
  ResidentialFunctionalUtility = 'residential_functional_utility',
  /** column name */
  ResidentialGarageCarport = 'residential_garage_carport',
  /** column name */
  ResidentialGrossLivingArea = 'residential_gross_living_area',
  /** column name */
  ResidentialOther = 'residential_other',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialPorchPatioDeck = 'residential_porch_patio_deck',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  Site = 'site',
  /** column name */
  Subdivision = 'subdivision',
  /** column name */
  TaxId = 'tax_id',
  /** column name */
  TotalAcres = 'total_acres',
  /** column name */
  UniversalPropertyIdentifier = 'universal_property_identifier',
  /** column name */
  YearBuilt = 'year_built',
  /** column name */
  YearRenovated = 'year_renovated',
  /** column name */
  Zoning = 'zoning',
}

export type Property_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Property_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Property_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Property_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Property_Delete_Key_Input>;
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Property_Inc_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Property_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Property_Set_Input>;
  where: Property_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Property_Var_Pop_Fields = {
  __typename?: 'property_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_building_class_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Property_Var_Samp_Fields = {
  __typename?: 'property_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_building_class_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Property_Variance_Fields = {
  __typename?: 'property_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  commercial_building_class_id?: Maybe<Scalars['Float']>;
  commercial_buildings?: Maybe<Scalars['Float']>;
  commercial_floors?: Maybe<Scalars['Float']>;
  commercial_gross_area?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_units?: Maybe<Scalars['Float']>;
  lease_comps_count?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_above_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_above_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bathrooms?: Maybe<Scalars['Float']>;
  residential_below_grade_bedrooms?: Maybe<Scalars['Float']>;
  residential_gross_living_area?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sales_comps_count?: Maybe<Scalars['Float']>;
  total_acres?: Maybe<Scalars['Float']>;
};

export type Query_Root = {
  __typename?: 'query_root';
  /** fetch data from the table: "appraisal" */
  appraisal: Array<Appraisal>;
  /** An array relationship */
  appraisal_activities: Array<Appraisal_Activities>;
  /** An aggregate relationship */
  appraisal_activities_aggregate: Appraisal_Activities_Aggregate;
  /** fetch aggregated fields from the table: "appraisal" */
  appraisal_aggregate: Appraisal_Aggregate;
  /** fetch data from the table: "appraisal" using primary key columns */
  appraisal_by_pk?: Maybe<Appraisal>;
  /** fetch data from the table: "appraisal_commission" */
  appraisal_commission: Array<Appraisal_Commission>;
  /** fetch aggregated fields from the table: "appraisal_commission" */
  appraisal_commission_aggregate: Appraisal_Commission_Aggregate;
  /** fetch data from the table: "appraisal_commission" using primary key columns */
  appraisal_commission_by_pk?: Maybe<Appraisal_Commission>;
  /** fetch data from the table: "appraisal_commission_templates" */
  appraisal_commission_templates: Array<Appraisal_Commission_Templates>;
  /** fetch aggregated fields from the table: "appraisal_commission_templates" */
  appraisal_commission_templates_aggregate: Appraisal_Commission_Templates_Aggregate;
  /** fetch data from the table: "appraisal_commissions" */
  appraisal_commissions: Array<Appraisal_Commissions>;
  /** fetch aggregated fields from the table: "appraisal_commissions" */
  appraisal_commissions_aggregate: Appraisal_Commissions_Aggregate;
  /** fetch data from the table: "appraisal_expense" */
  appraisal_expense: Array<Appraisal_Expense>;
  /** fetch aggregated fields from the table: "appraisal_expense" */
  appraisal_expense_aggregate: Appraisal_Expense_Aggregate;
  /** fetch data from the table: "appraisal_expense" using primary key columns */
  appraisal_expense_by_pk?: Maybe<Appraisal_Expense>;
  /** fetch data from the table: "appraisal_fee" */
  appraisal_fee: Array<Appraisal_Fee>;
  /** fetch aggregated fields from the table: "appraisal_fee" */
  appraisal_fee_aggregate: Appraisal_Fee_Aggregate;
  /** fetch data from the table: "appraisal_fee" using primary key columns */
  appraisal_fee_by_pk?: Maybe<Appraisal_Fee>;
  /** fetch data from the table: "appraisal_priorities" */
  appraisal_priorities: Array<Appraisal_Priorities>;
  /** fetch aggregated fields from the table: "appraisal_priorities" */
  appraisal_priorities_aggregate: Appraisal_Priorities_Aggregate;
  /** fetch data from the table: "appraisal_purposes" */
  appraisal_purposes: Array<Appraisal_Purposes>;
  /** fetch aggregated fields from the table: "appraisal_purposes" */
  appraisal_purposes_aggregate: Appraisal_Purposes_Aggregate;
  /** fetch data from the table: "appraisal_sources" */
  appraisal_sources: Array<Appraisal_Sources>;
  /** fetch aggregated fields from the table: "appraisal_sources" */
  appraisal_sources_aggregate: Appraisal_Sources_Aggregate;
  /** fetch data from the table: "appraisal_statuses" */
  appraisal_statuses: Array<Appraisal_Statuses>;
  /** fetch aggregated fields from the table: "appraisal_statuses" */
  appraisal_statuses_aggregate: Appraisal_Statuses_Aggregate;
  /** fetch data from the table: "appraisals" */
  appraisals: Array<Appraisals>;
  /** fetch aggregated fields from the table: "appraisals" */
  appraisals_aggregate: Appraisals_Aggregate;
  /** fetch data from the table: "assessment" */
  assessment: Array<Assessment>;
  /** fetch aggregated fields from the table: "assessment" */
  assessment_aggregate: Assessment_Aggregate;
  /** fetch data from the table: "assessment" using primary key columns */
  assessment_by_pk?: Maybe<Assessment>;
  /** fetch data from the table: "assignee_roles" */
  assignee_roles: Array<Assignee_Roles>;
  /** fetch aggregated fields from the table: "assignee_roles" */
  assignee_roles_aggregate: Assignee_Roles_Aggregate;
  /** fetch data from the table: "client" */
  client: Array<Client>;
  /** An array relationship */
  client_activities: Array<Client_Activities>;
  /** An aggregate relationship */
  client_activities_aggregate: Client_Activities_Aggregate;
  /** fetch aggregated fields from the table: "client" */
  client_aggregate: Client_Aggregate;
  /** fetch data from the table: "client" using primary key columns */
  client_by_pk?: Maybe<Client>;
  /** fetch data from the table: "client_types" */
  client_types: Array<Client_Types>;
  /** fetch aggregated fields from the table: "client_types" */
  client_types_aggregate: Client_Types_Aggregate;
  /** fetch data from the table: "clients" */
  clients: Array<Clients>;
  /** fetch aggregated fields from the table: "clients" */
  clients_aggregate: Clients_Aggregate;
  /** fetch data from the table: "commercial_building_classes" */
  commercial_building_classes: Array<Commercial_Building_Classes>;
  /** fetch aggregated fields from the table: "commercial_building_classes" */
  commercial_building_classes_aggregate: Commercial_Building_Classes_Aggregate;
  /** fetch data from the table: "commercial_lease_types" */
  commercial_lease_types: Array<Commercial_Lease_Types>;
  /** fetch aggregated fields from the table: "commercial_lease_types" */
  commercial_lease_types_aggregate: Commercial_Lease_Types_Aggregate;
  /** fetch data from the table: "commercial_property_subtype" */
  commercial_property_subtype: Array<Commercial_Property_Subtype>;
  /** fetch aggregated fields from the table: "commercial_property_subtype" */
  commercial_property_subtype_aggregate: Commercial_Property_Subtype_Aggregate;
  /** fetch data from the table: "commercial_property_subtype" using primary key columns */
  commercial_property_subtype_by_pk?: Maybe<Commercial_Property_Subtype>;
  /** fetch data from the table: "commercial_property_type" */
  commercial_property_type: Array<Commercial_Property_Type>;
  /** fetch aggregated fields from the table: "commercial_property_type" */
  commercial_property_type_aggregate: Commercial_Property_Type_Aggregate;
  /** fetch data from the table: "commercial_property_type" using primary key columns */
  commercial_property_type_by_pk?: Maybe<Commercial_Property_Type>;
  /** fetch data from the table: "commercial_property_types" */
  commercial_property_types: Array<Commercial_Property_Types>;
  /** fetch aggregated fields from the table: "commercial_property_types" */
  commercial_property_types_aggregate: Commercial_Property_Types_Aggregate;
  /** fetch data from the table: "contact" */
  contact: Array<Contact>;
  /** fetch data from the table: "contact_activities" */
  contact_activities: Array<Contact_Activities>;
  /** fetch aggregated fields from the table: "contact_activities" */
  contact_activities_aggregate: Contact_Activities_Aggregate;
  /** fetch aggregated fields from the table: "contact" */
  contact_aggregate: Contact_Aggregate;
  /** fetch data from the table: "contact" using primary key columns */
  contact_by_pk?: Maybe<Contact>;
  /** fetch data from the table: "contact_types" */
  contact_types: Array<Contact_Types>;
  /** fetch aggregated fields from the table: "contact_types" */
  contact_types_aggregate: Contact_Types_Aggregate;
  /** fetch data from the table: "contacts" */
  contacts: Array<Contacts>;
  /** fetch aggregated fields from the table: "contacts" */
  contacts_aggregate: Contacts_Aggregate;
  /** fetch data from the table: "expense" */
  expense: Array<Expense>;
  /** fetch aggregated fields from the table: "expense" */
  expense_aggregate: Expense_Aggregate;
  /** fetch data from the table: "expense" using primary key columns */
  expense_by_pk?: Maybe<Expense>;
  /** fetch data from the table: "expenses" */
  expenses: Array<Expenses>;
  /** fetch aggregated fields from the table: "expenses" */
  expenses_aggregate: Expenses_Aggregate;
  /** fetch data from the table: "file" */
  file: Array<File>;
  /** fetch aggregated fields from the table: "file" */
  file_aggregate: File_Aggregate;
  /** fetch data from the table: "file" using primary key columns */
  file_by_pk?: Maybe<File>;
  file_presign_download_url?: Maybe<PresignUrlOutput>;
  file_presign_upload_url?: Maybe<PresignUrlOutput>;
  /** fetch data from the table: "insights" */
  insights: Array<Insights>;
  /** fetch aggregated fields from the table: "insights" */
  insights_aggregate: Insights_Aggregate;
  /** fetch data from the table: "integration_authentication" */
  integration_authentication: Array<Integration_Authentication>;
  /** fetch aggregated fields from the table: "integration_authentication" */
  integration_authentication_aggregate: Integration_Authentication_Aggregate;
  /** fetch data from the table: "integration_authentication" using primary key columns */
  integration_authentication_by_pk?: Maybe<Integration_Authentication>;
  /** fetch data from the table: "integrations" */
  integrations: Array<Integrations>;
  /** fetch aggregated fields from the table: "integrations" */
  integrations_aggregate: Integrations_Aggregate;
  /** fetch data from the table: "lease_comps" */
  lease_comps: Array<Lease_Comps>;
  /** fetch aggregated fields from the table: "lease_comps" */
  lease_comps_aggregate: Lease_Comps_Aggregate;
  /** fetch data from the table: "lease_transactions" */
  lease_transactions: Array<Lease_Transactions>;
  /** fetch aggregated fields from the table: "lease_transactions" */
  lease_transactions_aggregate: Lease_Transactions_Aggregate;
  /** fetch data from the table: "loan_types" */
  loan_types: Array<Loan_Types>;
  /** fetch aggregated fields from the table: "loan_types" */
  loan_types_aggregate: Loan_Types_Aggregate;
  /** fetch data from the table: "message" */
  message: Array<Message>;
  /** fetch aggregated fields from the table: "message" */
  message_aggregate: Message_Aggregate;
  /** fetch data from the table: "message" using primary key columns */
  message_by_pk?: Maybe<Message>;
  /** fetch data from the table: "message_thread" */
  message_thread: Array<Message_Thread>;
  /** fetch aggregated fields from the table: "message_thread" */
  message_thread_aggregate: Message_Thread_Aggregate;
  /** fetch data from the table: "message_thread" using primary key columns */
  message_thread_by_pk?: Maybe<Message_Thread>;
  /** fetch data from the table: "messages" */
  messages: Array<Messages>;
  /** fetch aggregated fields from the table: "messages" */
  messages_aggregate: Messages_Aggregate;
  /** fetch data from the table: "organization" */
  organization: Array<Organization>;
  /** fetch data from the table: "organization" using primary key columns */
  organization_by_pk?: Maybe<Organization>;
  /** fetch data from the table: "properties" */
  properties: Array<Properties>;
  /** fetch aggregated fields from the table: "properties" */
  properties_aggregate: Properties_Aggregate;
  /** fetch data from the table: "property" */
  property: Array<Property>;
  /** fetch aggregated fields from the table: "property" */
  property_aggregate: Property_Aggregate;
  /** fetch data from the table: "property" using primary key columns */
  property_by_pk?: Maybe<Property>;
  /** fetch data from the table: "property_interests" */
  property_interests: Array<Property_Interests>;
  /** fetch aggregated fields from the table: "property_interests" */
  property_interests_aggregate: Property_Interests_Aggregate;
  /** fetch data from the table: "property_types" */
  property_types: Array<Property_Types>;
  /** fetch aggregated fields from the table: "property_types" */
  property_types_aggregate: Property_Types_Aggregate;
  /** fetch data from the table: "rate_types" */
  rate_types: Array<Rate_Types>;
  /** fetch aggregated fields from the table: "rate_types" */
  rate_types_aggregate: Rate_Types_Aggregate;
  /** fetch data from the table: "report_types" */
  report_types: Array<Report_Types>;
  /** fetch aggregated fields from the table: "report_types" */
  report_types_aggregate: Report_Types_Aggregate;
  /** fetch data from the table: "residential_form_types" */
  residential_form_types: Array<Residential_Form_Types>;
  /** fetch aggregated fields from the table: "residential_form_types" */
  residential_form_types_aggregate: Residential_Form_Types_Aggregate;
  /** fetch data from the table: "residential_lease_types" */
  residential_lease_types: Array<Residential_Lease_Types>;
  /** fetch aggregated fields from the table: "residential_lease_types" */
  residential_lease_types_aggregate: Residential_Lease_Types_Aggregate;
  /** fetch data from the table: "residential_ownership_types" */
  residential_ownership_types: Array<Residential_Ownership_Types>;
  /** fetch aggregated fields from the table: "residential_ownership_types" */
  residential_ownership_types_aggregate: Residential_Ownership_Types_Aggregate;
  /** fetch data from the table: "residential_styles" */
  residential_styles: Array<Residential_Styles>;
  /** fetch aggregated fields from the table: "residential_styles" */
  residential_styles_aggregate: Residential_Styles_Aggregate;
  /** fetch data from the table: "sales_comps" */
  sales_comps: Array<Sales_Comps>;
  /** fetch aggregated fields from the table: "sales_comps" */
  sales_comps_aggregate: Sales_Comps_Aggregate;
  /** fetch data from the table: "sales_transactions" */
  sales_transactions: Array<Sales_Transactions>;
  /** fetch aggregated fields from the table: "sales_transactions" */
  sales_transactions_aggregate: Sales_Transactions_Aggregate;
  /** execute function "search_appraisals" which returns "appraisals" */
  search_appraisals: Array<Appraisals>;
  /** execute function "search_appraisals" and query aggregates on result of table type "appraisals" */
  search_appraisals_aggregate: Appraisals_Aggregate;
  /** execute function "search_clients" which returns "clients" */
  search_clients: Array<Clients>;
  /** execute function "search_clients" and query aggregates on result of table type "clients" */
  search_clients_aggregate: Clients_Aggregate;
  /** execute function "search_contacts" which returns "contacts" */
  search_contacts: Array<Contacts>;
  /** execute function "search_contacts" and query aggregates on result of table type "contacts" */
  search_contacts_aggregate: Contacts_Aggregate;
  /** execute function "search_user_profiles" which returns "user_profiles" */
  search_user_profiles: Array<User_Profiles>;
  /** execute function "search_user_profiles" and query aggregates on result of table type "user_profiles" */
  search_user_profiles_aggregate: User_Profiles_Aggregate;
  /** fetch data from the table: "task" */
  task: Array<Task>;
  /** fetch aggregated fields from the table: "task" */
  task_aggregate: Task_Aggregate;
  /** fetch data from the table: "task" using primary key columns */
  task_by_pk?: Maybe<Task>;
  /** fetch data from the table: "tasklist" */
  tasklist: Array<Tasklist>;
  /** fetch aggregated fields from the table: "tasklist" */
  tasklist_aggregate: Tasklist_Aggregate;
  /** fetch data from the table: "tasklist" using primary key columns */
  tasklist_by_pk?: Maybe<Tasklist>;
  /** fetch data from the table: "tasklist_templates" */
  tasklist_templates: Array<Tasklist_Templates>;
  /** fetch aggregated fields from the table: "tasklist_templates" */
  tasklist_templates_aggregate: Tasklist_Templates_Aggregate;
  /** fetch data from the table: "team" */
  team: Array<Team>;
  /** fetch aggregated fields from the table: "team" */
  team_aggregate: Team_Aggregate;
  /** fetch data from the table: "time_zones" */
  time_zones: Array<Time_Zones>;
  /** fetch aggregated fields from the table: "time_zones" */
  time_zones_aggregate: Time_Zones_Aggregate;
  /** fetch data from the table: "transaction" */
  transaction: Array<Transaction>;
  /** fetch aggregated fields from the table: "transaction" */
  transaction_aggregate: Transaction_Aggregate;
  /** fetch data from the table: "transaction" using primary key columns */
  transaction_by_pk?: Maybe<Transaction>;
  /** fetch data from the table: "transaction_types" */
  transaction_types: Array<Transaction_Types>;
  /** fetch aggregated fields from the table: "transaction_types" */
  transaction_types_aggregate: Transaction_Types_Aggregate;
  /** fetch data from the table: "transactions" */
  transactions: Array<Transactions>;
  /** fetch aggregated fields from the table: "transactions" */
  transactions_aggregate: Transactions_Aggregate;
  /** fetch data from the table: "us_states" */
  us_states: Array<Us_States>;
  /** fetch aggregated fields from the table: "us_states" */
  us_states_aggregate: Us_States_Aggregate;
  /** fetch data from the table: "user_account" */
  user_account: Array<User_Account>;
  /** fetch aggregated fields from the table: "user_account" */
  user_account_aggregate: User_Account_Aggregate;
  /** fetch data from the table: "user_account" using primary key columns */
  user_account_by_pk?: Maybe<User_Account>;
  /** fetch data from the table: "user_preference_notification" */
  user_preference_notification: Array<User_Preference_Notification>;
  /** fetch data from the table: "user_preference_notification" using primary key columns */
  user_preference_notification_by_pk?: Maybe<User_Preference_Notification>;
  /** fetch data from the table: "user_profile" */
  user_profile: Array<User_Profile>;
  /** fetch data from the table: "user_profile_activities" */
  user_profile_activities: Array<User_Profile_Activities>;
  /** fetch aggregated fields from the table: "user_profile_activities" */
  user_profile_activities_aggregate: User_Profile_Activities_Aggregate;
  /** fetch data from the table: "user_profile" using primary key columns */
  user_profile_by_pk?: Maybe<User_Profile>;
  /** fetch data from the table: "user_profiles" */
  user_profiles: Array<User_Profiles>;
  /** fetch aggregated fields from the table: "user_profiles" */
  user_profiles_aggregate: User_Profiles_Aggregate;
  /** fetch data from the table: "user_role" */
  user_role: Array<User_Role>;
  /** fetch aggregated fields from the table: "user_role" */
  user_role_aggregate: User_Role_Aggregate;
  /** fetch data from the table: "user_role" using primary key columns */
  user_role_by_pk?: Maybe<User_Role>;
  /** fetch data from the table: "user_roles" */
  user_roles: Array<User_Roles>;
  /** fetch aggregated fields from the table: "user_roles" */
  user_roles_aggregate: User_Roles_Aggregate;
  /** fetch data from the table: "user_session" */
  user_session: Array<User_Session>;
};

export type Query_RootAppraisalArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

export type Query_RootAppraisal_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Activities_Order_By>>;
  where?: Maybe<Appraisal_Activities_Bool_Exp>;
};

export type Query_RootAppraisal_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Activities_Order_By>>;
  where?: Maybe<Appraisal_Activities_Bool_Exp>;
};

export type Query_RootAppraisal_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

export type Query_RootAppraisal_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootAppraisal_CommissionArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Order_By>>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

export type Query_RootAppraisal_Commission_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Order_By>>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

export type Query_RootAppraisal_Commission_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootAppraisal_Commission_TemplatesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Templates_Order_By>>;
  where?: Maybe<Appraisal_Commission_Templates_Bool_Exp>;
};

export type Query_RootAppraisal_Commission_Templates_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Templates_Order_By>>;
  where?: Maybe<Appraisal_Commission_Templates_Bool_Exp>;
};

export type Query_RootAppraisal_CommissionsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commissions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commissions_Order_By>>;
  where?: Maybe<Appraisal_Commissions_Bool_Exp>;
};

export type Query_RootAppraisal_Commissions_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commissions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commissions_Order_By>>;
  where?: Maybe<Appraisal_Commissions_Bool_Exp>;
};

export type Query_RootAppraisal_ExpenseArgs = {
  distinct_on?: Maybe<Array<Appraisal_Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Expense_Order_By>>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

export type Query_RootAppraisal_Expense_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Expense_Order_By>>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

export type Query_RootAppraisal_Expense_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootAppraisal_FeeArgs = {
  distinct_on?: Maybe<Array<Appraisal_Fee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Fee_Order_By>>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

export type Query_RootAppraisal_Fee_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Fee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Fee_Order_By>>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

export type Query_RootAppraisal_Fee_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootAppraisal_PrioritiesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Priorities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Priorities_Order_By>>;
  where?: Maybe<Appraisal_Priorities_Bool_Exp>;
};

export type Query_RootAppraisal_Priorities_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Priorities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Priorities_Order_By>>;
  where?: Maybe<Appraisal_Priorities_Bool_Exp>;
};

export type Query_RootAppraisal_PurposesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Purposes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Purposes_Order_By>>;
  where?: Maybe<Appraisal_Purposes_Bool_Exp>;
};

export type Query_RootAppraisal_Purposes_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Purposes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Purposes_Order_By>>;
  where?: Maybe<Appraisal_Purposes_Bool_Exp>;
};

export type Query_RootAppraisal_SourcesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Sources_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Sources_Order_By>>;
  where?: Maybe<Appraisal_Sources_Bool_Exp>;
};

export type Query_RootAppraisal_Sources_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Sources_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Sources_Order_By>>;
  where?: Maybe<Appraisal_Sources_Bool_Exp>;
};

export type Query_RootAppraisal_StatusesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Statuses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Statuses_Order_By>>;
  where?: Maybe<Appraisal_Statuses_Bool_Exp>;
};

export type Query_RootAppraisal_Statuses_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Statuses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Statuses_Order_By>>;
  where?: Maybe<Appraisal_Statuses_Bool_Exp>;
};

export type Query_RootAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Query_RootAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Query_RootAssessmentArgs = {
  distinct_on?: Maybe<Array<Assessment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assessment_Order_By>>;
  where?: Maybe<Assessment_Bool_Exp>;
};

export type Query_RootAssessment_AggregateArgs = {
  distinct_on?: Maybe<Array<Assessment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assessment_Order_By>>;
  where?: Maybe<Assessment_Bool_Exp>;
};

export type Query_RootAssessment_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootAssignee_RolesArgs = {
  distinct_on?: Maybe<Array<Assignee_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assignee_Roles_Order_By>>;
  where?: Maybe<Assignee_Roles_Bool_Exp>;
};

export type Query_RootAssignee_Roles_AggregateArgs = {
  distinct_on?: Maybe<Array<Assignee_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assignee_Roles_Order_By>>;
  where?: Maybe<Assignee_Roles_Bool_Exp>;
};

export type Query_RootClientArgs = {
  distinct_on?: Maybe<Array<Client_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Order_By>>;
  where?: Maybe<Client_Bool_Exp>;
};

export type Query_RootClient_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Client_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Activities_Order_By>>;
  where?: Maybe<Client_Activities_Bool_Exp>;
};

export type Query_RootClient_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Activities_Order_By>>;
  where?: Maybe<Client_Activities_Bool_Exp>;
};

export type Query_RootClient_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Order_By>>;
  where?: Maybe<Client_Bool_Exp>;
};

export type Query_RootClient_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootClient_TypesArgs = {
  distinct_on?: Maybe<Array<Client_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Types_Order_By>>;
  where?: Maybe<Client_Types_Bool_Exp>;
};

export type Query_RootClient_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Types_Order_By>>;
  where?: Maybe<Client_Types_Bool_Exp>;
};

export type Query_RootClientsArgs = {
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Query_RootClients_AggregateArgs = {
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Query_RootCommercial_Building_ClassesArgs = {
  distinct_on?: Maybe<Array<Commercial_Building_Classes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Building_Classes_Order_By>>;
  where?: Maybe<Commercial_Building_Classes_Bool_Exp>;
};

export type Query_RootCommercial_Building_Classes_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Building_Classes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Building_Classes_Order_By>>;
  where?: Maybe<Commercial_Building_Classes_Bool_Exp>;
};

export type Query_RootCommercial_Lease_TypesArgs = {
  distinct_on?: Maybe<Array<Commercial_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Lease_Types_Order_By>>;
  where?: Maybe<Commercial_Lease_Types_Bool_Exp>;
};

export type Query_RootCommercial_Lease_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Lease_Types_Order_By>>;
  where?: Maybe<Commercial_Lease_Types_Bool_Exp>;
};

export type Query_RootCommercial_Property_SubtypeArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Subtype_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Subtype_Order_By>>;
  where?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
};

export type Query_RootCommercial_Property_Subtype_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Subtype_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Subtype_Order_By>>;
  where?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
};

export type Query_RootCommercial_Property_Subtype_By_PkArgs = {
  id: Scalars['Int'];
};

export type Query_RootCommercial_Property_TypeArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Type_Order_By>>;
  where?: Maybe<Commercial_Property_Type_Bool_Exp>;
};

export type Query_RootCommercial_Property_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Type_Order_By>>;
  where?: Maybe<Commercial_Property_Type_Bool_Exp>;
};

export type Query_RootCommercial_Property_Type_By_PkArgs = {
  id: Scalars['Int'];
};

export type Query_RootCommercial_Property_TypesArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Types_Order_By>>;
  where?: Maybe<Commercial_Property_Types_Bool_Exp>;
};

export type Query_RootCommercial_Property_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Types_Order_By>>;
  where?: Maybe<Commercial_Property_Types_Bool_Exp>;
};

export type Query_RootContactArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

export type Query_RootContact_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Contact_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Activities_Order_By>>;
  where?: Maybe<Contact_Activities_Bool_Exp>;
};

export type Query_RootContact_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Activities_Order_By>>;
  where?: Maybe<Contact_Activities_Bool_Exp>;
};

export type Query_RootContact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

export type Query_RootContact_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootContact_TypesArgs = {
  distinct_on?: Maybe<Array<Contact_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Types_Order_By>>;
  where?: Maybe<Contact_Types_Bool_Exp>;
};

export type Query_RootContact_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Types_Order_By>>;
  where?: Maybe<Contact_Types_Bool_Exp>;
};

export type Query_RootContactsArgs = {
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Query_RootContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Query_RootExpenseArgs = {
  distinct_on?: Maybe<Array<Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expense_Order_By>>;
  where?: Maybe<Expense_Bool_Exp>;
};

export type Query_RootExpense_AggregateArgs = {
  distinct_on?: Maybe<Array<Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expense_Order_By>>;
  where?: Maybe<Expense_Bool_Exp>;
};

export type Query_RootExpense_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootExpensesArgs = {
  distinct_on?: Maybe<Array<Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expenses_Order_By>>;
  where?: Maybe<Expenses_Bool_Exp>;
};

export type Query_RootExpenses_AggregateArgs = {
  distinct_on?: Maybe<Array<Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expenses_Order_By>>;
  where?: Maybe<Expenses_Bool_Exp>;
};

export type Query_RootFileArgs = {
  distinct_on?: Maybe<Array<File_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<File_Order_By>>;
  where?: Maybe<File_Bool_Exp>;
};

export type Query_RootFile_AggregateArgs = {
  distinct_on?: Maybe<Array<File_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<File_Order_By>>;
  where?: Maybe<File_Bool_Exp>;
};

export type Query_RootFile_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootFile_Presign_Download_UrlArgs = {
  args: PresignUrlInput;
};

export type Query_RootFile_Presign_Upload_UrlArgs = {
  args: PresignUrlInput;
};

export type Query_RootInsightsArgs = {
  distinct_on?: Maybe<Array<Insights_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Insights_Order_By>>;
  where?: Maybe<Insights_Bool_Exp>;
};

export type Query_RootInsights_AggregateArgs = {
  distinct_on?: Maybe<Array<Insights_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Insights_Order_By>>;
  where?: Maybe<Insights_Bool_Exp>;
};

export type Query_RootIntegration_AuthenticationArgs = {
  distinct_on?: Maybe<Array<Integration_Authentication_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integration_Authentication_Order_By>>;
  where?: Maybe<Integration_Authentication_Bool_Exp>;
};

export type Query_RootIntegration_Authentication_AggregateArgs = {
  distinct_on?: Maybe<Array<Integration_Authentication_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integration_Authentication_Order_By>>;
  where?: Maybe<Integration_Authentication_Bool_Exp>;
};

export type Query_RootIntegration_Authentication_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootIntegrationsArgs = {
  distinct_on?: Maybe<Array<Integrations_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integrations_Order_By>>;
  where?: Maybe<Integrations_Bool_Exp>;
};

export type Query_RootIntegrations_AggregateArgs = {
  distinct_on?: Maybe<Array<Integrations_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integrations_Order_By>>;
  where?: Maybe<Integrations_Bool_Exp>;
};

export type Query_RootLease_CompsArgs = {
  distinct_on?: Maybe<Array<Lease_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Comps_Order_By>>;
  where?: Maybe<Lease_Comps_Bool_Exp>;
};

export type Query_RootLease_Comps_AggregateArgs = {
  distinct_on?: Maybe<Array<Lease_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Comps_Order_By>>;
  where?: Maybe<Lease_Comps_Bool_Exp>;
};

export type Query_RootLease_TransactionsArgs = {
  distinct_on?: Maybe<Array<Lease_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Transactions_Order_By>>;
  where?: Maybe<Lease_Transactions_Bool_Exp>;
};

export type Query_RootLease_Transactions_AggregateArgs = {
  distinct_on?: Maybe<Array<Lease_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Transactions_Order_By>>;
  where?: Maybe<Lease_Transactions_Bool_Exp>;
};

export type Query_RootLoan_TypesArgs = {
  distinct_on?: Maybe<Array<Loan_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Loan_Types_Order_By>>;
  where?: Maybe<Loan_Types_Bool_Exp>;
};

export type Query_RootLoan_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Loan_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Loan_Types_Order_By>>;
  where?: Maybe<Loan_Types_Bool_Exp>;
};

export type Query_RootMessageArgs = {
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

export type Query_RootMessage_AggregateArgs = {
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

export type Query_RootMessage_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootMessage_ThreadArgs = {
  distinct_on?: Maybe<Array<Message_Thread_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Thread_Order_By>>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

export type Query_RootMessage_Thread_AggregateArgs = {
  distinct_on?: Maybe<Array<Message_Thread_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Thread_Order_By>>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

export type Query_RootMessage_Thread_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootMessagesArgs = {
  distinct_on?: Maybe<Array<Messages_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Messages_Order_By>>;
  where?: Maybe<Messages_Bool_Exp>;
};

export type Query_RootMessages_AggregateArgs = {
  distinct_on?: Maybe<Array<Messages_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Messages_Order_By>>;
  where?: Maybe<Messages_Bool_Exp>;
};

export type Query_RootOrganizationArgs = {
  distinct_on?: Maybe<Array<Organization_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Organization_Order_By>>;
  where?: Maybe<Organization_Bool_Exp>;
};

export type Query_RootOrganization_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootPropertiesArgs = {
  distinct_on?: Maybe<Array<Properties_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Properties_Order_By>>;
  where?: Maybe<Properties_Bool_Exp>;
};

export type Query_RootProperties_AggregateArgs = {
  distinct_on?: Maybe<Array<Properties_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Properties_Order_By>>;
  where?: Maybe<Properties_Bool_Exp>;
};

export type Query_RootPropertyArgs = {
  distinct_on?: Maybe<Array<Property_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Order_By>>;
  where?: Maybe<Property_Bool_Exp>;
};

export type Query_RootProperty_AggregateArgs = {
  distinct_on?: Maybe<Array<Property_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Order_By>>;
  where?: Maybe<Property_Bool_Exp>;
};

export type Query_RootProperty_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootProperty_InterestsArgs = {
  distinct_on?: Maybe<Array<Property_Interests_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Interests_Order_By>>;
  where?: Maybe<Property_Interests_Bool_Exp>;
};

export type Query_RootProperty_Interests_AggregateArgs = {
  distinct_on?: Maybe<Array<Property_Interests_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Interests_Order_By>>;
  where?: Maybe<Property_Interests_Bool_Exp>;
};

export type Query_RootProperty_TypesArgs = {
  distinct_on?: Maybe<Array<Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Types_Order_By>>;
  where?: Maybe<Property_Types_Bool_Exp>;
};

export type Query_RootProperty_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Types_Order_By>>;
  where?: Maybe<Property_Types_Bool_Exp>;
};

export type Query_RootRate_TypesArgs = {
  distinct_on?: Maybe<Array<Rate_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Rate_Types_Order_By>>;
  where?: Maybe<Rate_Types_Bool_Exp>;
};

export type Query_RootRate_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Rate_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Rate_Types_Order_By>>;
  where?: Maybe<Rate_Types_Bool_Exp>;
};

export type Query_RootReport_TypesArgs = {
  distinct_on?: Maybe<Array<Report_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Types_Order_By>>;
  where?: Maybe<Report_Types_Bool_Exp>;
};

export type Query_RootReport_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Types_Order_By>>;
  where?: Maybe<Report_Types_Bool_Exp>;
};

export type Query_RootResidential_Form_TypesArgs = {
  distinct_on?: Maybe<Array<Residential_Form_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Form_Types_Order_By>>;
  where?: Maybe<Residential_Form_Types_Bool_Exp>;
};

export type Query_RootResidential_Form_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Form_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Form_Types_Order_By>>;
  where?: Maybe<Residential_Form_Types_Bool_Exp>;
};

export type Query_RootResidential_Lease_TypesArgs = {
  distinct_on?: Maybe<Array<Residential_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Lease_Types_Order_By>>;
  where?: Maybe<Residential_Lease_Types_Bool_Exp>;
};

export type Query_RootResidential_Lease_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Lease_Types_Order_By>>;
  where?: Maybe<Residential_Lease_Types_Bool_Exp>;
};

export type Query_RootResidential_Ownership_TypesArgs = {
  distinct_on?: Maybe<Array<Residential_Ownership_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Ownership_Types_Order_By>>;
  where?: Maybe<Residential_Ownership_Types_Bool_Exp>;
};

export type Query_RootResidential_Ownership_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Ownership_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Ownership_Types_Order_By>>;
  where?: Maybe<Residential_Ownership_Types_Bool_Exp>;
};

export type Query_RootResidential_StylesArgs = {
  distinct_on?: Maybe<Array<Residential_Styles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Styles_Order_By>>;
  where?: Maybe<Residential_Styles_Bool_Exp>;
};

export type Query_RootResidential_Styles_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Styles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Styles_Order_By>>;
  where?: Maybe<Residential_Styles_Bool_Exp>;
};

export type Query_RootSales_CompsArgs = {
  distinct_on?: Maybe<Array<Sales_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Comps_Order_By>>;
  where?: Maybe<Sales_Comps_Bool_Exp>;
};

export type Query_RootSales_Comps_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Comps_Order_By>>;
  where?: Maybe<Sales_Comps_Bool_Exp>;
};

export type Query_RootSales_TransactionsArgs = {
  distinct_on?: Maybe<Array<Sales_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Transactions_Order_By>>;
  where?: Maybe<Sales_Transactions_Bool_Exp>;
};

export type Query_RootSales_Transactions_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Transactions_Order_By>>;
  where?: Maybe<Sales_Transactions_Bool_Exp>;
};

export type Query_RootSearch_AppraisalsArgs = {
  args: Search_Appraisals_Args;
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Query_RootSearch_Appraisals_AggregateArgs = {
  args: Search_Appraisals_Args;
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Query_RootSearch_ClientsArgs = {
  args: Search_Clients_Args;
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Query_RootSearch_Clients_AggregateArgs = {
  args: Search_Clients_Args;
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Query_RootSearch_ContactsArgs = {
  args: Search_Contacts_Args;
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Query_RootSearch_Contacts_AggregateArgs = {
  args: Search_Contacts_Args;
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Query_RootSearch_User_ProfilesArgs = {
  args: Search_User_Profiles_Args;
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Query_RootSearch_User_Profiles_AggregateArgs = {
  args: Search_User_Profiles_Args;
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Query_RootTaskArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

export type Query_RootTask_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

export type Query_RootTask_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootTasklistArgs = {
  distinct_on?: Maybe<Array<Tasklist_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Order_By>>;
  where?: Maybe<Tasklist_Bool_Exp>;
};

export type Query_RootTasklist_AggregateArgs = {
  distinct_on?: Maybe<Array<Tasklist_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Order_By>>;
  where?: Maybe<Tasklist_Bool_Exp>;
};

export type Query_RootTasklist_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootTasklist_TemplatesArgs = {
  distinct_on?: Maybe<Array<Tasklist_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Templates_Order_By>>;
  where?: Maybe<Tasklist_Templates_Bool_Exp>;
};

export type Query_RootTasklist_Templates_AggregateArgs = {
  distinct_on?: Maybe<Array<Tasklist_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Templates_Order_By>>;
  where?: Maybe<Tasklist_Templates_Bool_Exp>;
};

export type Query_RootTeamArgs = {
  distinct_on?: Maybe<Array<Team_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Team_Order_By>>;
  where?: Maybe<Team_Bool_Exp>;
};

export type Query_RootTeam_AggregateArgs = {
  distinct_on?: Maybe<Array<Team_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Team_Order_By>>;
  where?: Maybe<Team_Bool_Exp>;
};

export type Query_RootTime_ZonesArgs = {
  distinct_on?: Maybe<Array<Time_Zones_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Time_Zones_Order_By>>;
  where?: Maybe<Time_Zones_Bool_Exp>;
};

export type Query_RootTime_Zones_AggregateArgs = {
  distinct_on?: Maybe<Array<Time_Zones_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Time_Zones_Order_By>>;
  where?: Maybe<Time_Zones_Bool_Exp>;
};

export type Query_RootTransactionArgs = {
  distinct_on?: Maybe<Array<Transaction_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Order_By>>;
  where?: Maybe<Transaction_Bool_Exp>;
};

export type Query_RootTransaction_AggregateArgs = {
  distinct_on?: Maybe<Array<Transaction_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Order_By>>;
  where?: Maybe<Transaction_Bool_Exp>;
};

export type Query_RootTransaction_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootTransaction_TypesArgs = {
  distinct_on?: Maybe<Array<Transaction_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Types_Order_By>>;
  where?: Maybe<Transaction_Types_Bool_Exp>;
};

export type Query_RootTransaction_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Transaction_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Types_Order_By>>;
  where?: Maybe<Transaction_Types_Bool_Exp>;
};

export type Query_RootTransactionsArgs = {
  distinct_on?: Maybe<Array<Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transactions_Order_By>>;
  where?: Maybe<Transactions_Bool_Exp>;
};

export type Query_RootTransactions_AggregateArgs = {
  distinct_on?: Maybe<Array<Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transactions_Order_By>>;
  where?: Maybe<Transactions_Bool_Exp>;
};

export type Query_RootUs_StatesArgs = {
  distinct_on?: Maybe<Array<Us_States_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Us_States_Order_By>>;
  where?: Maybe<Us_States_Bool_Exp>;
};

export type Query_RootUs_States_AggregateArgs = {
  distinct_on?: Maybe<Array<Us_States_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Us_States_Order_By>>;
  where?: Maybe<Us_States_Bool_Exp>;
};

export type Query_RootUser_AccountArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

export type Query_RootUser_Account_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

export type Query_RootUser_Account_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootUser_Preference_NotificationArgs = {
  distinct_on?: Maybe<Array<User_Preference_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Preference_Notification_Order_By>>;
  where?: Maybe<User_Preference_Notification_Bool_Exp>;
};

export type Query_RootUser_Preference_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootUser_ProfileArgs = {
  distinct_on?: Maybe<Array<User_Profile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profile_Order_By>>;
  where?: Maybe<User_Profile_Bool_Exp>;
};

export type Query_RootUser_Profile_ActivitiesArgs = {
  distinct_on?: Maybe<Array<User_Profile_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profile_Activities_Order_By>>;
  where?: Maybe<User_Profile_Activities_Bool_Exp>;
};

export type Query_RootUser_Profile_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Profile_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profile_Activities_Order_By>>;
  where?: Maybe<User_Profile_Activities_Bool_Exp>;
};

export type Query_RootUser_Profile_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Query_RootUser_ProfilesArgs = {
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Query_RootUser_Profiles_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Query_RootUser_RoleArgs = {
  distinct_on?: Maybe<Array<User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Role_Order_By>>;
  where?: Maybe<User_Role_Bool_Exp>;
};

export type Query_RootUser_Role_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Role_Order_By>>;
  where?: Maybe<User_Role_Bool_Exp>;
};

export type Query_RootUser_Role_By_PkArgs = {
  id: Scalars['Int'];
};

export type Query_RootUser_RolesArgs = {
  distinct_on?: Maybe<Array<User_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Roles_Order_By>>;
  where?: Maybe<User_Roles_Bool_Exp>;
};

export type Query_RootUser_Roles_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Roles_Order_By>>;
  where?: Maybe<User_Roles_Bool_Exp>;
};

export type Query_RootUser_SessionArgs = {
  distinct_on?: Maybe<Array<User_Session_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Session_Order_By>>;
  where?: Maybe<User_Session_Bool_Exp>;
};

/** columns and relationships of "rate_types" */
export type Rate_Types = {
  __typename?: 'rate_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "rate_types" */
export type Rate_Types_Aggregate = {
  __typename?: 'rate_types_aggregate';
  aggregate?: Maybe<Rate_Types_Aggregate_Fields>;
  nodes: Array<Rate_Types>;
};

/** aggregate fields of "rate_types" */
export type Rate_Types_Aggregate_Fields = {
  __typename?: 'rate_types_aggregate_fields';
  avg?: Maybe<Rate_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Rate_Types_Max_Fields>;
  min?: Maybe<Rate_Types_Min_Fields>;
  stddev?: Maybe<Rate_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Rate_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Rate_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Rate_Types_Sum_Fields>;
  var_pop?: Maybe<Rate_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Rate_Types_Var_Samp_Fields>;
  variance?: Maybe<Rate_Types_Variance_Fields>;
};

/** aggregate fields of "rate_types" */
export type Rate_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Rate_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Rate_Types_Avg_Fields = {
  __typename?: 'rate_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "rate_types". All fields are combined with a logical 'AND'. */
export type Rate_Types_Bool_Exp = {
  _and?: Maybe<Array<Rate_Types_Bool_Exp>>;
  _not?: Maybe<Rate_Types_Bool_Exp>;
  _or?: Maybe<Array<Rate_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Rate_Types_Max_Fields = {
  __typename?: 'rate_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Rate_Types_Min_Fields = {
  __typename?: 'rate_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "rate_types". */
export type Rate_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "rate_types" */
export enum Rate_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Rate_Types_Stddev_Fields = {
  __typename?: 'rate_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Rate_Types_Stddev_Pop_Fields = {
  __typename?: 'rate_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Rate_Types_Stddev_Samp_Fields = {
  __typename?: 'rate_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "rate_types" */
export type Rate_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Rate_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Rate_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Rate_Types_Sum_Fields = {
  __typename?: 'rate_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Rate_Types_Var_Pop_Fields = {
  __typename?: 'rate_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Rate_Types_Var_Samp_Fields = {
  __typename?: 'rate_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Rate_Types_Variance_Fields = {
  __typename?: 'rate_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "report_types" */
export type Report_Types = {
  __typename?: 'report_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "report_types" */
export type Report_Types_Aggregate = {
  __typename?: 'report_types_aggregate';
  aggregate?: Maybe<Report_Types_Aggregate_Fields>;
  nodes: Array<Report_Types>;
};

/** aggregate fields of "report_types" */
export type Report_Types_Aggregate_Fields = {
  __typename?: 'report_types_aggregate_fields';
  avg?: Maybe<Report_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Report_Types_Max_Fields>;
  min?: Maybe<Report_Types_Min_Fields>;
  stddev?: Maybe<Report_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Report_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Report_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Report_Types_Sum_Fields>;
  var_pop?: Maybe<Report_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Report_Types_Var_Samp_Fields>;
  variance?: Maybe<Report_Types_Variance_Fields>;
};

/** aggregate fields of "report_types" */
export type Report_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Report_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Report_Types_Avg_Fields = {
  __typename?: 'report_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "report_types". All fields are combined with a logical 'AND'. */
export type Report_Types_Bool_Exp = {
  _and?: Maybe<Array<Report_Types_Bool_Exp>>;
  _not?: Maybe<Report_Types_Bool_Exp>;
  _or?: Maybe<Array<Report_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Report_Types_Max_Fields = {
  __typename?: 'report_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Report_Types_Min_Fields = {
  __typename?: 'report_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "report_types". */
export type Report_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "report_types" */
export enum Report_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Report_Types_Stddev_Fields = {
  __typename?: 'report_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Report_Types_Stddev_Pop_Fields = {
  __typename?: 'report_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Report_Types_Stddev_Samp_Fields = {
  __typename?: 'report_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "report_types" */
export type Report_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Report_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Report_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Report_Types_Sum_Fields = {
  __typename?: 'report_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Report_Types_Var_Pop_Fields = {
  __typename?: 'report_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Report_Types_Var_Samp_Fields = {
  __typename?: 'report_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Report_Types_Variance_Fields = {
  __typename?: 'report_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "residential_form_types" */
export type Residential_Form_Types = {
  __typename?: 'residential_form_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "residential_form_types" */
export type Residential_Form_Types_Aggregate = {
  __typename?: 'residential_form_types_aggregate';
  aggregate?: Maybe<Residential_Form_Types_Aggregate_Fields>;
  nodes: Array<Residential_Form_Types>;
};

/** aggregate fields of "residential_form_types" */
export type Residential_Form_Types_Aggregate_Fields = {
  __typename?: 'residential_form_types_aggregate_fields';
  avg?: Maybe<Residential_Form_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Residential_Form_Types_Max_Fields>;
  min?: Maybe<Residential_Form_Types_Min_Fields>;
  stddev?: Maybe<Residential_Form_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Residential_Form_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Residential_Form_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Residential_Form_Types_Sum_Fields>;
  var_pop?: Maybe<Residential_Form_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Residential_Form_Types_Var_Samp_Fields>;
  variance?: Maybe<Residential_Form_Types_Variance_Fields>;
};

/** aggregate fields of "residential_form_types" */
export type Residential_Form_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Residential_Form_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Residential_Form_Types_Avg_Fields = {
  __typename?: 'residential_form_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "residential_form_types". All fields are combined with a logical 'AND'. */
export type Residential_Form_Types_Bool_Exp = {
  _and?: Maybe<Array<Residential_Form_Types_Bool_Exp>>;
  _not?: Maybe<Residential_Form_Types_Bool_Exp>;
  _or?: Maybe<Array<Residential_Form_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Residential_Form_Types_Max_Fields = {
  __typename?: 'residential_form_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Residential_Form_Types_Min_Fields = {
  __typename?: 'residential_form_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "residential_form_types". */
export type Residential_Form_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "residential_form_types" */
export enum Residential_Form_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Residential_Form_Types_Stddev_Fields = {
  __typename?: 'residential_form_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Residential_Form_Types_Stddev_Pop_Fields = {
  __typename?: 'residential_form_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Residential_Form_Types_Stddev_Samp_Fields = {
  __typename?: 'residential_form_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "residential_form_types" */
export type Residential_Form_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Residential_Form_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Residential_Form_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Residential_Form_Types_Sum_Fields = {
  __typename?: 'residential_form_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Residential_Form_Types_Var_Pop_Fields = {
  __typename?: 'residential_form_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Residential_Form_Types_Var_Samp_Fields = {
  __typename?: 'residential_form_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Residential_Form_Types_Variance_Fields = {
  __typename?: 'residential_form_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "residential_lease_types" */
export type Residential_Lease_Types = {
  __typename?: 'residential_lease_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "residential_lease_types" */
export type Residential_Lease_Types_Aggregate = {
  __typename?: 'residential_lease_types_aggregate';
  aggregate?: Maybe<Residential_Lease_Types_Aggregate_Fields>;
  nodes: Array<Residential_Lease_Types>;
};

/** aggregate fields of "residential_lease_types" */
export type Residential_Lease_Types_Aggregate_Fields = {
  __typename?: 'residential_lease_types_aggregate_fields';
  avg?: Maybe<Residential_Lease_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Residential_Lease_Types_Max_Fields>;
  min?: Maybe<Residential_Lease_Types_Min_Fields>;
  stddev?: Maybe<Residential_Lease_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Residential_Lease_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Residential_Lease_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Residential_Lease_Types_Sum_Fields>;
  var_pop?: Maybe<Residential_Lease_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Residential_Lease_Types_Var_Samp_Fields>;
  variance?: Maybe<Residential_Lease_Types_Variance_Fields>;
};

/** aggregate fields of "residential_lease_types" */
export type Residential_Lease_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Residential_Lease_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Residential_Lease_Types_Avg_Fields = {
  __typename?: 'residential_lease_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "residential_lease_types". All fields are combined with a logical 'AND'. */
export type Residential_Lease_Types_Bool_Exp = {
  _and?: Maybe<Array<Residential_Lease_Types_Bool_Exp>>;
  _not?: Maybe<Residential_Lease_Types_Bool_Exp>;
  _or?: Maybe<Array<Residential_Lease_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Residential_Lease_Types_Max_Fields = {
  __typename?: 'residential_lease_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Residential_Lease_Types_Min_Fields = {
  __typename?: 'residential_lease_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "residential_lease_types". */
export type Residential_Lease_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "residential_lease_types" */
export enum Residential_Lease_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Residential_Lease_Types_Stddev_Fields = {
  __typename?: 'residential_lease_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Residential_Lease_Types_Stddev_Pop_Fields = {
  __typename?: 'residential_lease_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Residential_Lease_Types_Stddev_Samp_Fields = {
  __typename?: 'residential_lease_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "residential_lease_types" */
export type Residential_Lease_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Residential_Lease_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Residential_Lease_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Residential_Lease_Types_Sum_Fields = {
  __typename?: 'residential_lease_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Residential_Lease_Types_Var_Pop_Fields = {
  __typename?: 'residential_lease_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Residential_Lease_Types_Var_Samp_Fields = {
  __typename?: 'residential_lease_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Residential_Lease_Types_Variance_Fields = {
  __typename?: 'residential_lease_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "residential_ownership_types" */
export type Residential_Ownership_Types = {
  __typename?: 'residential_ownership_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "residential_ownership_types" */
export type Residential_Ownership_Types_Aggregate = {
  __typename?: 'residential_ownership_types_aggregate';
  aggregate?: Maybe<Residential_Ownership_Types_Aggregate_Fields>;
  nodes: Array<Residential_Ownership_Types>;
};

/** aggregate fields of "residential_ownership_types" */
export type Residential_Ownership_Types_Aggregate_Fields = {
  __typename?: 'residential_ownership_types_aggregate_fields';
  avg?: Maybe<Residential_Ownership_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Residential_Ownership_Types_Max_Fields>;
  min?: Maybe<Residential_Ownership_Types_Min_Fields>;
  stddev?: Maybe<Residential_Ownership_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Residential_Ownership_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Residential_Ownership_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Residential_Ownership_Types_Sum_Fields>;
  var_pop?: Maybe<Residential_Ownership_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Residential_Ownership_Types_Var_Samp_Fields>;
  variance?: Maybe<Residential_Ownership_Types_Variance_Fields>;
};

/** aggregate fields of "residential_ownership_types" */
export type Residential_Ownership_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Residential_Ownership_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Residential_Ownership_Types_Avg_Fields = {
  __typename?: 'residential_ownership_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/**
 * Boolean expression to filter rows from the table "residential_ownership_types".
 * All fields are combined with a logical 'AND'.
 */
export type Residential_Ownership_Types_Bool_Exp = {
  _and?: Maybe<Array<Residential_Ownership_Types_Bool_Exp>>;
  _not?: Maybe<Residential_Ownership_Types_Bool_Exp>;
  _or?: Maybe<Array<Residential_Ownership_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Residential_Ownership_Types_Max_Fields = {
  __typename?: 'residential_ownership_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Residential_Ownership_Types_Min_Fields = {
  __typename?: 'residential_ownership_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "residential_ownership_types". */
export type Residential_Ownership_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "residential_ownership_types" */
export enum Residential_Ownership_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Residential_Ownership_Types_Stddev_Fields = {
  __typename?: 'residential_ownership_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Residential_Ownership_Types_Stddev_Pop_Fields = {
  __typename?: 'residential_ownership_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Residential_Ownership_Types_Stddev_Samp_Fields = {
  __typename?: 'residential_ownership_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "residential_ownership_types" */
export type Residential_Ownership_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Residential_Ownership_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Residential_Ownership_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Residential_Ownership_Types_Sum_Fields = {
  __typename?: 'residential_ownership_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Residential_Ownership_Types_Var_Pop_Fields = {
  __typename?: 'residential_ownership_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Residential_Ownership_Types_Var_Samp_Fields = {
  __typename?: 'residential_ownership_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Residential_Ownership_Types_Variance_Fields = {
  __typename?: 'residential_ownership_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "residential_styles" */
export type Residential_Styles = {
  __typename?: 'residential_styles';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  style?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "residential_styles" */
export type Residential_Styles_Aggregate = {
  __typename?: 'residential_styles_aggregate';
  aggregate?: Maybe<Residential_Styles_Aggregate_Fields>;
  nodes: Array<Residential_Styles>;
};

/** aggregate fields of "residential_styles" */
export type Residential_Styles_Aggregate_Fields = {
  __typename?: 'residential_styles_aggregate_fields';
  avg?: Maybe<Residential_Styles_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Residential_Styles_Max_Fields>;
  min?: Maybe<Residential_Styles_Min_Fields>;
  stddev?: Maybe<Residential_Styles_Stddev_Fields>;
  stddev_pop?: Maybe<Residential_Styles_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Residential_Styles_Stddev_Samp_Fields>;
  sum?: Maybe<Residential_Styles_Sum_Fields>;
  var_pop?: Maybe<Residential_Styles_Var_Pop_Fields>;
  var_samp?: Maybe<Residential_Styles_Var_Samp_Fields>;
  variance?: Maybe<Residential_Styles_Variance_Fields>;
};

/** aggregate fields of "residential_styles" */
export type Residential_Styles_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Residential_Styles_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Residential_Styles_Avg_Fields = {
  __typename?: 'residential_styles_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "residential_styles". All fields are combined with a logical 'AND'. */
export type Residential_Styles_Bool_Exp = {
  _and?: Maybe<Array<Residential_Styles_Bool_Exp>>;
  _not?: Maybe<Residential_Styles_Bool_Exp>;
  _or?: Maybe<Array<Residential_Styles_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  style?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Residential_Styles_Max_Fields = {
  __typename?: 'residential_styles_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  style?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Residential_Styles_Min_Fields = {
  __typename?: 'residential_styles_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  style?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "residential_styles". */
export type Residential_Styles_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  style?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "residential_styles" */
export enum Residential_Styles_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Style = 'style',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Residential_Styles_Stddev_Fields = {
  __typename?: 'residential_styles_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Residential_Styles_Stddev_Pop_Fields = {
  __typename?: 'residential_styles_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Residential_Styles_Stddev_Samp_Fields = {
  __typename?: 'residential_styles_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "residential_styles" */
export type Residential_Styles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Residential_Styles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Residential_Styles_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  style?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Residential_Styles_Sum_Fields = {
  __typename?: 'residential_styles_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Residential_Styles_Var_Pop_Fields = {
  __typename?: 'residential_styles_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Residential_Styles_Var_Samp_Fields = {
  __typename?: 'residential_styles_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Residential_Styles_Variance_Fields = {
  __typename?: 'residential_styles_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "sales_comps" */
export type Sales_Comps = {
  __typename?: 'sales_comps';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregated selection of "sales_comps" */
export type Sales_Comps_Aggregate = {
  __typename?: 'sales_comps_aggregate';
  aggregate?: Maybe<Sales_Comps_Aggregate_Fields>;
  nodes: Array<Sales_Comps>;
};

/** aggregate fields of "sales_comps" */
export type Sales_Comps_Aggregate_Fields = {
  __typename?: 'sales_comps_aggregate_fields';
  avg?: Maybe<Sales_Comps_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Comps_Max_Fields>;
  min?: Maybe<Sales_Comps_Min_Fields>;
  stddev?: Maybe<Sales_Comps_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Comps_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Comps_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Comps_Sum_Fields>;
  var_pop?: Maybe<Sales_Comps_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Comps_Var_Samp_Fields>;
  variance?: Maybe<Sales_Comps_Variance_Fields>;
};

/** aggregate fields of "sales_comps" */
export type Sales_Comps_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Comps_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Sales_Comps_Avg_Fields = {
  __typename?: 'sales_comps_avg_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "sales_comps". All fields are combined with a logical 'AND'. */
export type Sales_Comps_Bool_Exp = {
  _and?: Maybe<Array<Sales_Comps_Bool_Exp>>;
  _not?: Maybe<Sales_Comps_Bool_Exp>;
  _or?: Maybe<Array<Sales_Comps_Bool_Exp>>;
  commercial_cap_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_occupancy_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype?: Maybe<String_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<String_Comparison_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  concessions?: Maybe<String_Comparison_Exp>;
  condition?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  data_sources?: Maybe<String_Comparison_Exp>;
  deed_book?: Maybe<String_Comparison_Exp>;
  deed_page?: Maybe<String_Comparison_Exp>;
  grantee?: Maybe<String_Comparison_Exp>;
  grantee_id?: Maybe<Uuid_Comparison_Exp>;
  grantor?: Maybe<String_Comparison_Exp>;
  grantor_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  instrument?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_interest_id?: Maybe<Int_Comparison_Exp>;
  property_type?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quality_of_construction?: Maybe<String_Comparison_Exp>;
  residential_monthly_rent?: Maybe<Numeric_Comparison_Exp>;
  residential_ownership_type?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  sale_date?: Maybe<Timestamptz_Comparison_Exp>;
  sale_price?: Maybe<Numeric_Comparison_Exp>;
  transaction_type?: Maybe<String_Comparison_Exp>;
  transaction_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  verification_sources?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Sales_Comps_Max_Fields = {
  __typename?: 'sales_comps_max_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Comps_Min_Fields = {
  __typename?: 'sales_comps_min_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "sales_comps". */
export type Sales_Comps_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_property_subtype?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  grantee?: Maybe<Order_By>;
  grantee_id?: Maybe<Order_By>;
  grantor?: Maybe<Order_By>;
  grantor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  residential_ownership_type?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sale_date?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** select columns of table "sales_comps" */
export enum Sales_Comps_Select_Column {
  /** column name */
  CommercialCapRate = 'commercial_cap_rate',
  /** column name */
  CommercialOccupancyRate = 'commercial_occupancy_rate',
  /** column name */
  CommercialPropertySubtype = 'commercial_property_subtype',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyType = 'commercial_property_type',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  Concessions = 'concessions',
  /** column name */
  Condition = 'condition',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataSources = 'data_sources',
  /** column name */
  DeedBook = 'deed_book',
  /** column name */
  DeedPage = 'deed_page',
  /** column name */
  Grantee = 'grantee',
  /** column name */
  GranteeId = 'grantee_id',
  /** column name */
  Grantor = 'grantor',
  /** column name */
  GrantorId = 'grantor_id',
  /** column name */
  Id = 'id',
  /** column name */
  Instrument = 'instrument',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyInterestId = 'property_interest_id',
  /** column name */
  PropertyType = 'property_type',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QualityOfConstruction = 'quality_of_construction',
  /** column name */
  ResidentialMonthlyRent = 'residential_monthly_rent',
  /** column name */
  ResidentialOwnershipType = 'residential_ownership_type',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  SaleDate = 'sale_date',
  /** column name */
  SalePrice = 'sale_price',
  /** column name */
  TransactionType = 'transaction_type',
  /** column name */
  TransactionTypeId = 'transaction_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VerificationSources = 'verification_sources',
}

/** aggregate stddev on columns */
export type Sales_Comps_Stddev_Fields = {
  __typename?: 'sales_comps_stddev_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Sales_Comps_Stddev_Pop_Fields = {
  __typename?: 'sales_comps_stddev_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Sales_Comps_Stddev_Samp_Fields = {
  __typename?: 'sales_comps_stddev_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "sales_comps" */
export type Sales_Comps_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Sales_Comps_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Sales_Comps_Stream_Cursor_Value_Input = {
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Sales_Comps_Sum_Fields = {
  __typename?: 'sales_comps_sum_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Sales_Comps_Var_Pop_Fields = {
  __typename?: 'sales_comps_var_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Sales_Comps_Var_Samp_Fields = {
  __typename?: 'sales_comps_var_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Sales_Comps_Variance_Fields = {
  __typename?: 'sales_comps_variance_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "sales_transactions" */
export type Sales_Transactions = {
  __typename?: 'sales_transactions';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregated selection of "sales_transactions" */
export type Sales_Transactions_Aggregate = {
  __typename?: 'sales_transactions_aggregate';
  aggregate?: Maybe<Sales_Transactions_Aggregate_Fields>;
  nodes: Array<Sales_Transactions>;
};

/** aggregate fields of "sales_transactions" */
export type Sales_Transactions_Aggregate_Fields = {
  __typename?: 'sales_transactions_aggregate_fields';
  avg?: Maybe<Sales_Transactions_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Sales_Transactions_Max_Fields>;
  min?: Maybe<Sales_Transactions_Min_Fields>;
  stddev?: Maybe<Sales_Transactions_Stddev_Fields>;
  stddev_pop?: Maybe<Sales_Transactions_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Sales_Transactions_Stddev_Samp_Fields>;
  sum?: Maybe<Sales_Transactions_Sum_Fields>;
  var_pop?: Maybe<Sales_Transactions_Var_Pop_Fields>;
  var_samp?: Maybe<Sales_Transactions_Var_Samp_Fields>;
  variance?: Maybe<Sales_Transactions_Variance_Fields>;
};

/** aggregate fields of "sales_transactions" */
export type Sales_Transactions_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Sales_Transactions_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Sales_Transactions_Avg_Fields = {
  __typename?: 'sales_transactions_avg_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "sales_transactions". All fields are combined with a logical 'AND'. */
export type Sales_Transactions_Bool_Exp = {
  _and?: Maybe<Array<Sales_Transactions_Bool_Exp>>;
  _not?: Maybe<Sales_Transactions_Bool_Exp>;
  _or?: Maybe<Array<Sales_Transactions_Bool_Exp>>;
  commercial_cap_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_occupancy_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype?: Maybe<String_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<String_Comparison_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  concessions?: Maybe<String_Comparison_Exp>;
  condition?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  data_sources?: Maybe<String_Comparison_Exp>;
  deed_book?: Maybe<String_Comparison_Exp>;
  deed_page?: Maybe<String_Comparison_Exp>;
  grantee?: Maybe<String_Comparison_Exp>;
  grantee_id?: Maybe<Uuid_Comparison_Exp>;
  grantor?: Maybe<String_Comparison_Exp>;
  grantor_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  instrument?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_interest_id?: Maybe<Int_Comparison_Exp>;
  property_type?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quality_of_construction?: Maybe<String_Comparison_Exp>;
  residential_monthly_rent?: Maybe<Numeric_Comparison_Exp>;
  residential_ownership_type?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  sale_date?: Maybe<Timestamptz_Comparison_Exp>;
  sale_price?: Maybe<Numeric_Comparison_Exp>;
  transaction_type?: Maybe<String_Comparison_Exp>;
  transaction_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  verification_sources?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Sales_Transactions_Max_Fields = {
  __typename?: 'sales_transactions_max_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Sales_Transactions_Min_Fields = {
  __typename?: 'sales_transactions_min_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "sales_transactions". */
export type Sales_Transactions_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_property_subtype?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  grantee?: Maybe<Order_By>;
  grantee_id?: Maybe<Order_By>;
  grantor?: Maybe<Order_By>;
  grantor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  residential_ownership_type?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sale_date?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** select columns of table "sales_transactions" */
export enum Sales_Transactions_Select_Column {
  /** column name */
  CommercialCapRate = 'commercial_cap_rate',
  /** column name */
  CommercialOccupancyRate = 'commercial_occupancy_rate',
  /** column name */
  CommercialPropertySubtype = 'commercial_property_subtype',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyType = 'commercial_property_type',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  Concessions = 'concessions',
  /** column name */
  Condition = 'condition',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataSources = 'data_sources',
  /** column name */
  DeedBook = 'deed_book',
  /** column name */
  DeedPage = 'deed_page',
  /** column name */
  Grantee = 'grantee',
  /** column name */
  GranteeId = 'grantee_id',
  /** column name */
  Grantor = 'grantor',
  /** column name */
  GrantorId = 'grantor_id',
  /** column name */
  Id = 'id',
  /** column name */
  Instrument = 'instrument',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyInterestId = 'property_interest_id',
  /** column name */
  PropertyType = 'property_type',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QualityOfConstruction = 'quality_of_construction',
  /** column name */
  ResidentialMonthlyRent = 'residential_monthly_rent',
  /** column name */
  ResidentialOwnershipType = 'residential_ownership_type',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  SaleDate = 'sale_date',
  /** column name */
  SalePrice = 'sale_price',
  /** column name */
  TransactionType = 'transaction_type',
  /** column name */
  TransactionTypeId = 'transaction_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VerificationSources = 'verification_sources',
}

/** aggregate stddev on columns */
export type Sales_Transactions_Stddev_Fields = {
  __typename?: 'sales_transactions_stddev_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Sales_Transactions_Stddev_Pop_Fields = {
  __typename?: 'sales_transactions_stddev_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Sales_Transactions_Stddev_Samp_Fields = {
  __typename?: 'sales_transactions_stddev_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "sales_transactions" */
export type Sales_Transactions_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Sales_Transactions_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Sales_Transactions_Stream_Cursor_Value_Input = {
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Sales_Transactions_Sum_Fields = {
  __typename?: 'sales_transactions_sum_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Sales_Transactions_Var_Pop_Fields = {
  __typename?: 'sales_transactions_var_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Sales_Transactions_Var_Samp_Fields = {
  __typename?: 'sales_transactions_var_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Sales_Transactions_Variance_Fields = {
  __typename?: 'sales_transactions_variance_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

export type Search_Appraisals_Args = {
  search?: Maybe<Scalars['String']>;
};

export type Search_Clients_Args = {
  search?: Maybe<Scalars['String']>;
};

export type Search_Contacts_Args = {
  search?: Maybe<Scalars['String']>;
};

export type Search_User_Profiles_Args = {
  search?: Maybe<Scalars['String']>;
};

export type St_D_Within_Geography_Input = {
  distance: Scalars['Float'];
  from: Scalars['geography'];
  use_spheroid?: Maybe<Scalars['Boolean']>;
};

export type St_D_Within_Input = {
  distance: Scalars['Float'];
  from: Scalars['geometry'];
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: Maybe<Scalars['String']>;
  _gt?: Maybe<Scalars['String']>;
  _gte?: Maybe<Scalars['String']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: Maybe<Scalars['String']>;
  _in?: Maybe<Array<Scalars['String']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: Maybe<Scalars['String']>;
  _is_null?: Maybe<Scalars['Boolean']>;
  /** does the column match the given pattern */
  _like?: Maybe<Scalars['String']>;
  _lt?: Maybe<Scalars['String']>;
  _lte?: Maybe<Scalars['String']>;
  _neq?: Maybe<Scalars['String']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: Maybe<Scalars['String']>;
  _nin?: Maybe<Array<Scalars['String']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: Maybe<Scalars['String']>;
  /** does the column NOT match the given pattern */
  _nlike?: Maybe<Scalars['String']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: Maybe<Scalars['String']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: Maybe<Scalars['String']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: Maybe<Scalars['String']>;
  /** does the column match the given SQL regular expression */
  _similar?: Maybe<Scalars['String']>;
};

export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** fetch data from the table: "appraisal" */
  appraisal: Array<Appraisal>;
  /** An array relationship */
  appraisal_activities: Array<Appraisal_Activities>;
  /** An aggregate relationship */
  appraisal_activities_aggregate: Appraisal_Activities_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisal_activities" */
  appraisal_activities_stream: Array<Appraisal_Activities>;
  /** fetch aggregated fields from the table: "appraisal" */
  appraisal_aggregate: Appraisal_Aggregate;
  /** fetch data from the table: "appraisal" using primary key columns */
  appraisal_by_pk?: Maybe<Appraisal>;
  /** fetch data from the table: "appraisal_commission" */
  appraisal_commission: Array<Appraisal_Commission>;
  /** fetch aggregated fields from the table: "appraisal_commission" */
  appraisal_commission_aggregate: Appraisal_Commission_Aggregate;
  /** fetch data from the table: "appraisal_commission" using primary key columns */
  appraisal_commission_by_pk?: Maybe<Appraisal_Commission>;
  /** fetch data from the table in a streaming manner : "appraisal_commission" */
  appraisal_commission_stream: Array<Appraisal_Commission>;
  /** fetch data from the table: "appraisal_commission_templates" */
  appraisal_commission_templates: Array<Appraisal_Commission_Templates>;
  /** fetch aggregated fields from the table: "appraisal_commission_templates" */
  appraisal_commission_templates_aggregate: Appraisal_Commission_Templates_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisal_commission_templates" */
  appraisal_commission_templates_stream: Array<Appraisal_Commission_Templates>;
  /** fetch data from the table: "appraisal_commissions" */
  appraisal_commissions: Array<Appraisal_Commissions>;
  /** fetch aggregated fields from the table: "appraisal_commissions" */
  appraisal_commissions_aggregate: Appraisal_Commissions_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisal_commissions" */
  appraisal_commissions_stream: Array<Appraisal_Commissions>;
  /** fetch data from the table: "appraisal_expense" */
  appraisal_expense: Array<Appraisal_Expense>;
  /** fetch aggregated fields from the table: "appraisal_expense" */
  appraisal_expense_aggregate: Appraisal_Expense_Aggregate;
  /** fetch data from the table: "appraisal_expense" using primary key columns */
  appraisal_expense_by_pk?: Maybe<Appraisal_Expense>;
  /** fetch data from the table in a streaming manner : "appraisal_expense" */
  appraisal_expense_stream: Array<Appraisal_Expense>;
  /** fetch data from the table: "appraisal_fee" */
  appraisal_fee: Array<Appraisal_Fee>;
  /** fetch aggregated fields from the table: "appraisal_fee" */
  appraisal_fee_aggregate: Appraisal_Fee_Aggregate;
  /** fetch data from the table: "appraisal_fee" using primary key columns */
  appraisal_fee_by_pk?: Maybe<Appraisal_Fee>;
  /** fetch data from the table in a streaming manner : "appraisal_fee" */
  appraisal_fee_stream: Array<Appraisal_Fee>;
  /** fetch data from the table: "appraisal_priorities" */
  appraisal_priorities: Array<Appraisal_Priorities>;
  /** fetch aggregated fields from the table: "appraisal_priorities" */
  appraisal_priorities_aggregate: Appraisal_Priorities_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisal_priorities" */
  appraisal_priorities_stream: Array<Appraisal_Priorities>;
  /** fetch data from the table: "appraisal_purposes" */
  appraisal_purposes: Array<Appraisal_Purposes>;
  /** fetch aggregated fields from the table: "appraisal_purposes" */
  appraisal_purposes_aggregate: Appraisal_Purposes_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisal_purposes" */
  appraisal_purposes_stream: Array<Appraisal_Purposes>;
  /** fetch data from the table: "appraisal_sources" */
  appraisal_sources: Array<Appraisal_Sources>;
  /** fetch aggregated fields from the table: "appraisal_sources" */
  appraisal_sources_aggregate: Appraisal_Sources_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisal_sources" */
  appraisal_sources_stream: Array<Appraisal_Sources>;
  /** fetch data from the table: "appraisal_statuses" */
  appraisal_statuses: Array<Appraisal_Statuses>;
  /** fetch aggregated fields from the table: "appraisal_statuses" */
  appraisal_statuses_aggregate: Appraisal_Statuses_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisal_statuses" */
  appraisal_statuses_stream: Array<Appraisal_Statuses>;
  /** fetch data from the table in a streaming manner : "appraisal" */
  appraisal_stream: Array<Appraisal>;
  /** fetch data from the table: "appraisals" */
  appraisals: Array<Appraisals>;
  /** fetch aggregated fields from the table: "appraisals" */
  appraisals_aggregate: Appraisals_Aggregate;
  /** fetch data from the table in a streaming manner : "appraisals" */
  appraisals_stream: Array<Appraisals>;
  /** fetch data from the table: "assessment" */
  assessment: Array<Assessment>;
  /** fetch aggregated fields from the table: "assessment" */
  assessment_aggregate: Assessment_Aggregate;
  /** fetch data from the table: "assessment" using primary key columns */
  assessment_by_pk?: Maybe<Assessment>;
  /** fetch data from the table in a streaming manner : "assessment" */
  assessment_stream: Array<Assessment>;
  /** fetch data from the table: "assignee_roles" */
  assignee_roles: Array<Assignee_Roles>;
  /** fetch aggregated fields from the table: "assignee_roles" */
  assignee_roles_aggregate: Assignee_Roles_Aggregate;
  /** fetch data from the table in a streaming manner : "assignee_roles" */
  assignee_roles_stream: Array<Assignee_Roles>;
  /** fetch data from the table: "client" */
  client: Array<Client>;
  /** An array relationship */
  client_activities: Array<Client_Activities>;
  /** An aggregate relationship */
  client_activities_aggregate: Client_Activities_Aggregate;
  /** fetch data from the table in a streaming manner : "client_activities" */
  client_activities_stream: Array<Client_Activities>;
  /** fetch aggregated fields from the table: "client" */
  client_aggregate: Client_Aggregate;
  /** fetch data from the table: "client" using primary key columns */
  client_by_pk?: Maybe<Client>;
  /** fetch data from the table in a streaming manner : "client" */
  client_stream: Array<Client>;
  /** fetch data from the table: "client_types" */
  client_types: Array<Client_Types>;
  /** fetch aggregated fields from the table: "client_types" */
  client_types_aggregate: Client_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "client_types" */
  client_types_stream: Array<Client_Types>;
  /** fetch data from the table: "clients" */
  clients: Array<Clients>;
  /** fetch aggregated fields from the table: "clients" */
  clients_aggregate: Clients_Aggregate;
  /** fetch data from the table in a streaming manner : "clients" */
  clients_stream: Array<Clients>;
  /** fetch data from the table: "commercial_building_classes" */
  commercial_building_classes: Array<Commercial_Building_Classes>;
  /** fetch aggregated fields from the table: "commercial_building_classes" */
  commercial_building_classes_aggregate: Commercial_Building_Classes_Aggregate;
  /** fetch data from the table in a streaming manner : "commercial_building_classes" */
  commercial_building_classes_stream: Array<Commercial_Building_Classes>;
  /** fetch data from the table: "commercial_lease_types" */
  commercial_lease_types: Array<Commercial_Lease_Types>;
  /** fetch aggregated fields from the table: "commercial_lease_types" */
  commercial_lease_types_aggregate: Commercial_Lease_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "commercial_lease_types" */
  commercial_lease_types_stream: Array<Commercial_Lease_Types>;
  /** fetch data from the table: "commercial_property_subtype" */
  commercial_property_subtype: Array<Commercial_Property_Subtype>;
  /** fetch aggregated fields from the table: "commercial_property_subtype" */
  commercial_property_subtype_aggregate: Commercial_Property_Subtype_Aggregate;
  /** fetch data from the table: "commercial_property_subtype" using primary key columns */
  commercial_property_subtype_by_pk?: Maybe<Commercial_Property_Subtype>;
  /** fetch data from the table in a streaming manner : "commercial_property_subtype" */
  commercial_property_subtype_stream: Array<Commercial_Property_Subtype>;
  /** fetch data from the table: "commercial_property_type" */
  commercial_property_type: Array<Commercial_Property_Type>;
  /** fetch aggregated fields from the table: "commercial_property_type" */
  commercial_property_type_aggregate: Commercial_Property_Type_Aggregate;
  /** fetch data from the table: "commercial_property_type" using primary key columns */
  commercial_property_type_by_pk?: Maybe<Commercial_Property_Type>;
  /** fetch data from the table in a streaming manner : "commercial_property_type" */
  commercial_property_type_stream: Array<Commercial_Property_Type>;
  /** fetch data from the table: "commercial_property_types" */
  commercial_property_types: Array<Commercial_Property_Types>;
  /** fetch aggregated fields from the table: "commercial_property_types" */
  commercial_property_types_aggregate: Commercial_Property_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "commercial_property_types" */
  commercial_property_types_stream: Array<Commercial_Property_Types>;
  /** fetch data from the table: "contact" */
  contact: Array<Contact>;
  /** fetch data from the table: "contact_activities" */
  contact_activities: Array<Contact_Activities>;
  /** fetch aggregated fields from the table: "contact_activities" */
  contact_activities_aggregate: Contact_Activities_Aggregate;
  /** fetch data from the table in a streaming manner : "contact_activities" */
  contact_activities_stream: Array<Contact_Activities>;
  /** fetch aggregated fields from the table: "contact" */
  contact_aggregate: Contact_Aggregate;
  /** fetch data from the table: "contact" using primary key columns */
  contact_by_pk?: Maybe<Contact>;
  /** fetch data from the table in a streaming manner : "contact" */
  contact_stream: Array<Contact>;
  /** fetch data from the table: "contact_types" */
  contact_types: Array<Contact_Types>;
  /** fetch aggregated fields from the table: "contact_types" */
  contact_types_aggregate: Contact_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "contact_types" */
  contact_types_stream: Array<Contact_Types>;
  /** fetch data from the table: "contacts" */
  contacts: Array<Contacts>;
  /** fetch aggregated fields from the table: "contacts" */
  contacts_aggregate: Contacts_Aggregate;
  /** fetch data from the table in a streaming manner : "contacts" */
  contacts_stream: Array<Contacts>;
  /** fetch data from the table: "expense" */
  expense: Array<Expense>;
  /** fetch aggregated fields from the table: "expense" */
  expense_aggregate: Expense_Aggregate;
  /** fetch data from the table: "expense" using primary key columns */
  expense_by_pk?: Maybe<Expense>;
  /** fetch data from the table in a streaming manner : "expense" */
  expense_stream: Array<Expense>;
  /** fetch data from the table: "expenses" */
  expenses: Array<Expenses>;
  /** fetch aggregated fields from the table: "expenses" */
  expenses_aggregate: Expenses_Aggregate;
  /** fetch data from the table in a streaming manner : "expenses" */
  expenses_stream: Array<Expenses>;
  /** fetch data from the table: "file" */
  file: Array<File>;
  /** fetch aggregated fields from the table: "file" */
  file_aggregate: File_Aggregate;
  /** fetch data from the table: "file" using primary key columns */
  file_by_pk?: Maybe<File>;
  /** fetch data from the table in a streaming manner : "file" */
  file_stream: Array<File>;
  /** fetch data from the table: "insights" */
  insights: Array<Insights>;
  /** fetch aggregated fields from the table: "insights" */
  insights_aggregate: Insights_Aggregate;
  /** fetch data from the table in a streaming manner : "insights" */
  insights_stream: Array<Insights>;
  /** fetch data from the table: "integration_authentication" */
  integration_authentication: Array<Integration_Authentication>;
  /** fetch aggregated fields from the table: "integration_authentication" */
  integration_authentication_aggregate: Integration_Authentication_Aggregate;
  /** fetch data from the table: "integration_authentication" using primary key columns */
  integration_authentication_by_pk?: Maybe<Integration_Authentication>;
  /** fetch data from the table in a streaming manner : "integration_authentication" */
  integration_authentication_stream: Array<Integration_Authentication>;
  /** fetch data from the table: "integrations" */
  integrations: Array<Integrations>;
  /** fetch aggregated fields from the table: "integrations" */
  integrations_aggregate: Integrations_Aggregate;
  /** fetch data from the table in a streaming manner : "integrations" */
  integrations_stream: Array<Integrations>;
  /** fetch data from the table: "lease_comps" */
  lease_comps: Array<Lease_Comps>;
  /** fetch aggregated fields from the table: "lease_comps" */
  lease_comps_aggregate: Lease_Comps_Aggregate;
  /** fetch data from the table in a streaming manner : "lease_comps" */
  lease_comps_stream: Array<Lease_Comps>;
  /** fetch data from the table: "lease_transactions" */
  lease_transactions: Array<Lease_Transactions>;
  /** fetch aggregated fields from the table: "lease_transactions" */
  lease_transactions_aggregate: Lease_Transactions_Aggregate;
  /** fetch data from the table in a streaming manner : "lease_transactions" */
  lease_transactions_stream: Array<Lease_Transactions>;
  /** fetch data from the table: "loan_types" */
  loan_types: Array<Loan_Types>;
  /** fetch aggregated fields from the table: "loan_types" */
  loan_types_aggregate: Loan_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "loan_types" */
  loan_types_stream: Array<Loan_Types>;
  /** fetch data from the table: "message" */
  message: Array<Message>;
  /** fetch aggregated fields from the table: "message" */
  message_aggregate: Message_Aggregate;
  /** fetch data from the table: "message" using primary key columns */
  message_by_pk?: Maybe<Message>;
  /** fetch data from the table in a streaming manner : "message" */
  message_stream: Array<Message>;
  /** fetch data from the table: "message_thread" */
  message_thread: Array<Message_Thread>;
  /** fetch aggregated fields from the table: "message_thread" */
  message_thread_aggregate: Message_Thread_Aggregate;
  /** fetch data from the table: "message_thread" using primary key columns */
  message_thread_by_pk?: Maybe<Message_Thread>;
  /** fetch data from the table in a streaming manner : "message_thread" */
  message_thread_stream: Array<Message_Thread>;
  /** fetch data from the table: "messages" */
  messages: Array<Messages>;
  /** fetch aggregated fields from the table: "messages" */
  messages_aggregate: Messages_Aggregate;
  /** fetch data from the table in a streaming manner : "messages" */
  messages_stream: Array<Messages>;
  /** fetch data from the table: "organization" */
  organization: Array<Organization>;
  /** fetch data from the table: "organization" using primary key columns */
  organization_by_pk?: Maybe<Organization>;
  /** fetch data from the table in a streaming manner : "organization" */
  organization_stream: Array<Organization>;
  /** fetch data from the table: "properties" */
  properties: Array<Properties>;
  /** fetch aggregated fields from the table: "properties" */
  properties_aggregate: Properties_Aggregate;
  /** fetch data from the table in a streaming manner : "properties" */
  properties_stream: Array<Properties>;
  /** fetch data from the table: "property" */
  property: Array<Property>;
  /** fetch aggregated fields from the table: "property" */
  property_aggregate: Property_Aggregate;
  /** fetch data from the table: "property" using primary key columns */
  property_by_pk?: Maybe<Property>;
  /** fetch data from the table: "property_interests" */
  property_interests: Array<Property_Interests>;
  /** fetch aggregated fields from the table: "property_interests" */
  property_interests_aggregate: Property_Interests_Aggregate;
  /** fetch data from the table in a streaming manner : "property_interests" */
  property_interests_stream: Array<Property_Interests>;
  /** fetch data from the table in a streaming manner : "property" */
  property_stream: Array<Property>;
  /** fetch data from the table: "property_types" */
  property_types: Array<Property_Types>;
  /** fetch aggregated fields from the table: "property_types" */
  property_types_aggregate: Property_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "property_types" */
  property_types_stream: Array<Property_Types>;
  /** fetch data from the table: "rate_types" */
  rate_types: Array<Rate_Types>;
  /** fetch aggregated fields from the table: "rate_types" */
  rate_types_aggregate: Rate_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "rate_types" */
  rate_types_stream: Array<Rate_Types>;
  /** fetch data from the table: "report_types" */
  report_types: Array<Report_Types>;
  /** fetch aggregated fields from the table: "report_types" */
  report_types_aggregate: Report_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "report_types" */
  report_types_stream: Array<Report_Types>;
  /** fetch data from the table: "residential_form_types" */
  residential_form_types: Array<Residential_Form_Types>;
  /** fetch aggregated fields from the table: "residential_form_types" */
  residential_form_types_aggregate: Residential_Form_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "residential_form_types" */
  residential_form_types_stream: Array<Residential_Form_Types>;
  /** fetch data from the table: "residential_lease_types" */
  residential_lease_types: Array<Residential_Lease_Types>;
  /** fetch aggregated fields from the table: "residential_lease_types" */
  residential_lease_types_aggregate: Residential_Lease_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "residential_lease_types" */
  residential_lease_types_stream: Array<Residential_Lease_Types>;
  /** fetch data from the table: "residential_ownership_types" */
  residential_ownership_types: Array<Residential_Ownership_Types>;
  /** fetch aggregated fields from the table: "residential_ownership_types" */
  residential_ownership_types_aggregate: Residential_Ownership_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "residential_ownership_types" */
  residential_ownership_types_stream: Array<Residential_Ownership_Types>;
  /** fetch data from the table: "residential_styles" */
  residential_styles: Array<Residential_Styles>;
  /** fetch aggregated fields from the table: "residential_styles" */
  residential_styles_aggregate: Residential_Styles_Aggregate;
  /** fetch data from the table in a streaming manner : "residential_styles" */
  residential_styles_stream: Array<Residential_Styles>;
  /** fetch data from the table: "sales_comps" */
  sales_comps: Array<Sales_Comps>;
  /** fetch aggregated fields from the table: "sales_comps" */
  sales_comps_aggregate: Sales_Comps_Aggregate;
  /** fetch data from the table in a streaming manner : "sales_comps" */
  sales_comps_stream: Array<Sales_Comps>;
  /** fetch data from the table: "sales_transactions" */
  sales_transactions: Array<Sales_Transactions>;
  /** fetch aggregated fields from the table: "sales_transactions" */
  sales_transactions_aggregate: Sales_Transactions_Aggregate;
  /** fetch data from the table in a streaming manner : "sales_transactions" */
  sales_transactions_stream: Array<Sales_Transactions>;
  /** execute function "search_appraisals" which returns "appraisals" */
  search_appraisals: Array<Appraisals>;
  /** execute function "search_appraisals" and query aggregates on result of table type "appraisals" */
  search_appraisals_aggregate: Appraisals_Aggregate;
  /** execute function "search_clients" which returns "clients" */
  search_clients: Array<Clients>;
  /** execute function "search_clients" and query aggregates on result of table type "clients" */
  search_clients_aggregate: Clients_Aggregate;
  /** execute function "search_contacts" which returns "contacts" */
  search_contacts: Array<Contacts>;
  /** execute function "search_contacts" and query aggregates on result of table type "contacts" */
  search_contacts_aggregate: Contacts_Aggregate;
  /** execute function "search_user_profiles" which returns "user_profiles" */
  search_user_profiles: Array<User_Profiles>;
  /** execute function "search_user_profiles" and query aggregates on result of table type "user_profiles" */
  search_user_profiles_aggregate: User_Profiles_Aggregate;
  /** fetch data from the table: "task" */
  task: Array<Task>;
  /** fetch aggregated fields from the table: "task" */
  task_aggregate: Task_Aggregate;
  /** fetch data from the table: "task" using primary key columns */
  task_by_pk?: Maybe<Task>;
  /** fetch data from the table in a streaming manner : "task" */
  task_stream: Array<Task>;
  /** fetch data from the table: "tasklist" */
  tasklist: Array<Tasklist>;
  /** fetch aggregated fields from the table: "tasklist" */
  tasklist_aggregate: Tasklist_Aggregate;
  /** fetch data from the table: "tasklist" using primary key columns */
  tasklist_by_pk?: Maybe<Tasklist>;
  /** fetch data from the table in a streaming manner : "tasklist" */
  tasklist_stream: Array<Tasklist>;
  /** fetch data from the table: "tasklist_templates" */
  tasklist_templates: Array<Tasklist_Templates>;
  /** fetch aggregated fields from the table: "tasklist_templates" */
  tasklist_templates_aggregate: Tasklist_Templates_Aggregate;
  /** fetch data from the table in a streaming manner : "tasklist_templates" */
  tasklist_templates_stream: Array<Tasklist_Templates>;
  /** fetch data from the table: "team" */
  team: Array<Team>;
  /** fetch aggregated fields from the table: "team" */
  team_aggregate: Team_Aggregate;
  /** fetch data from the table in a streaming manner : "team" */
  team_stream: Array<Team>;
  /** fetch data from the table: "time_zones" */
  time_zones: Array<Time_Zones>;
  /** fetch aggregated fields from the table: "time_zones" */
  time_zones_aggregate: Time_Zones_Aggregate;
  /** fetch data from the table in a streaming manner : "time_zones" */
  time_zones_stream: Array<Time_Zones>;
  /** fetch data from the table: "transaction" */
  transaction: Array<Transaction>;
  /** fetch aggregated fields from the table: "transaction" */
  transaction_aggregate: Transaction_Aggregate;
  /** fetch data from the table: "transaction" using primary key columns */
  transaction_by_pk?: Maybe<Transaction>;
  /** fetch data from the table in a streaming manner : "transaction" */
  transaction_stream: Array<Transaction>;
  /** fetch data from the table: "transaction_types" */
  transaction_types: Array<Transaction_Types>;
  /** fetch aggregated fields from the table: "transaction_types" */
  transaction_types_aggregate: Transaction_Types_Aggregate;
  /** fetch data from the table in a streaming manner : "transaction_types" */
  transaction_types_stream: Array<Transaction_Types>;
  /** fetch data from the table: "transactions" */
  transactions: Array<Transactions>;
  /** fetch aggregated fields from the table: "transactions" */
  transactions_aggregate: Transactions_Aggregate;
  /** fetch data from the table in a streaming manner : "transactions" */
  transactions_stream: Array<Transactions>;
  /** fetch data from the table: "us_states" */
  us_states: Array<Us_States>;
  /** fetch aggregated fields from the table: "us_states" */
  us_states_aggregate: Us_States_Aggregate;
  /** fetch data from the table in a streaming manner : "us_states" */
  us_states_stream: Array<Us_States>;
  /** fetch data from the table: "user_account" */
  user_account: Array<User_Account>;
  /** fetch aggregated fields from the table: "user_account" */
  user_account_aggregate: User_Account_Aggregate;
  /** fetch data from the table: "user_account" using primary key columns */
  user_account_by_pk?: Maybe<User_Account>;
  /** fetch data from the table in a streaming manner : "user_account" */
  user_account_stream: Array<User_Account>;
  /** fetch data from the table: "user_preference_notification" */
  user_preference_notification: Array<User_Preference_Notification>;
  /** fetch data from the table: "user_preference_notification" using primary key columns */
  user_preference_notification_by_pk?: Maybe<User_Preference_Notification>;
  /** fetch data from the table in a streaming manner : "user_preference_notification" */
  user_preference_notification_stream: Array<User_Preference_Notification>;
  /** fetch data from the table: "user_profile" */
  user_profile: Array<User_Profile>;
  /** fetch data from the table: "user_profile_activities" */
  user_profile_activities: Array<User_Profile_Activities>;
  /** fetch aggregated fields from the table: "user_profile_activities" */
  user_profile_activities_aggregate: User_Profile_Activities_Aggregate;
  /** fetch data from the table in a streaming manner : "user_profile_activities" */
  user_profile_activities_stream: Array<User_Profile_Activities>;
  /** fetch data from the table: "user_profile" using primary key columns */
  user_profile_by_pk?: Maybe<User_Profile>;
  /** fetch data from the table in a streaming manner : "user_profile" */
  user_profile_stream: Array<User_Profile>;
  /** fetch data from the table: "user_profiles" */
  user_profiles: Array<User_Profiles>;
  /** fetch aggregated fields from the table: "user_profiles" */
  user_profiles_aggregate: User_Profiles_Aggregate;
  /** fetch data from the table in a streaming manner : "user_profiles" */
  user_profiles_stream: Array<User_Profiles>;
  /** fetch data from the table: "user_role" */
  user_role: Array<User_Role>;
  /** fetch aggregated fields from the table: "user_role" */
  user_role_aggregate: User_Role_Aggregate;
  /** fetch data from the table: "user_role" using primary key columns */
  user_role_by_pk?: Maybe<User_Role>;
  /** fetch data from the table in a streaming manner : "user_role" */
  user_role_stream: Array<User_Role>;
  /** fetch data from the table: "user_roles" */
  user_roles: Array<User_Roles>;
  /** fetch aggregated fields from the table: "user_roles" */
  user_roles_aggregate: User_Roles_Aggregate;
  /** fetch data from the table in a streaming manner : "user_roles" */
  user_roles_stream: Array<User_Roles>;
  /** fetch data from the table: "user_session" */
  user_session: Array<User_Session>;
  /** fetch data from the table in a streaming manner : "user_session" */
  user_session_stream: Array<User_Session>;
};

export type Subscription_RootAppraisalArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

export type Subscription_RootAppraisal_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Activities_Order_By>>;
  where?: Maybe<Appraisal_Activities_Bool_Exp>;
};

export type Subscription_RootAppraisal_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Activities_Order_By>>;
  where?: Maybe<Appraisal_Activities_Bool_Exp>;
};

export type Subscription_RootAppraisal_Activities_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Activities_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Activities_Bool_Exp>;
};

export type Subscription_RootAppraisal_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

export type Subscription_RootAppraisal_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootAppraisal_CommissionArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Order_By>>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

export type Subscription_RootAppraisal_Commission_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Order_By>>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

export type Subscription_RootAppraisal_Commission_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootAppraisal_Commission_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Commission_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

export type Subscription_RootAppraisal_Commission_TemplatesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Templates_Order_By>>;
  where?: Maybe<Appraisal_Commission_Templates_Bool_Exp>;
};

export type Subscription_RootAppraisal_Commission_Templates_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Templates_Order_By>>;
  where?: Maybe<Appraisal_Commission_Templates_Bool_Exp>;
};

export type Subscription_RootAppraisal_Commission_Templates_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Commission_Templates_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Commission_Templates_Bool_Exp>;
};

export type Subscription_RootAppraisal_CommissionsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commissions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commissions_Order_By>>;
  where?: Maybe<Appraisal_Commissions_Bool_Exp>;
};

export type Subscription_RootAppraisal_Commissions_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commissions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commissions_Order_By>>;
  where?: Maybe<Appraisal_Commissions_Bool_Exp>;
};

export type Subscription_RootAppraisal_Commissions_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Commissions_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Commissions_Bool_Exp>;
};

export type Subscription_RootAppraisal_ExpenseArgs = {
  distinct_on?: Maybe<Array<Appraisal_Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Expense_Order_By>>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

export type Subscription_RootAppraisal_Expense_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Expense_Order_By>>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

export type Subscription_RootAppraisal_Expense_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootAppraisal_Expense_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Expense_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Expense_Bool_Exp>;
};

export type Subscription_RootAppraisal_FeeArgs = {
  distinct_on?: Maybe<Array<Appraisal_Fee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Fee_Order_By>>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

export type Subscription_RootAppraisal_Fee_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Fee_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Fee_Order_By>>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

export type Subscription_RootAppraisal_Fee_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootAppraisal_Fee_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Fee_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Fee_Bool_Exp>;
};

export type Subscription_RootAppraisal_PrioritiesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Priorities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Priorities_Order_By>>;
  where?: Maybe<Appraisal_Priorities_Bool_Exp>;
};

export type Subscription_RootAppraisal_Priorities_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Priorities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Priorities_Order_By>>;
  where?: Maybe<Appraisal_Priorities_Bool_Exp>;
};

export type Subscription_RootAppraisal_Priorities_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Priorities_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Priorities_Bool_Exp>;
};

export type Subscription_RootAppraisal_PurposesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Purposes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Purposes_Order_By>>;
  where?: Maybe<Appraisal_Purposes_Bool_Exp>;
};

export type Subscription_RootAppraisal_Purposes_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Purposes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Purposes_Order_By>>;
  where?: Maybe<Appraisal_Purposes_Bool_Exp>;
};

export type Subscription_RootAppraisal_Purposes_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Purposes_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Purposes_Bool_Exp>;
};

export type Subscription_RootAppraisal_SourcesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Sources_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Sources_Order_By>>;
  where?: Maybe<Appraisal_Sources_Bool_Exp>;
};

export type Subscription_RootAppraisal_Sources_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Sources_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Sources_Order_By>>;
  where?: Maybe<Appraisal_Sources_Bool_Exp>;
};

export type Subscription_RootAppraisal_Sources_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Sources_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Sources_Bool_Exp>;
};

export type Subscription_RootAppraisal_StatusesArgs = {
  distinct_on?: Maybe<Array<Appraisal_Statuses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Statuses_Order_By>>;
  where?: Maybe<Appraisal_Statuses_Bool_Exp>;
};

export type Subscription_RootAppraisal_Statuses_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Statuses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Statuses_Order_By>>;
  where?: Maybe<Appraisal_Statuses_Bool_Exp>;
};

export type Subscription_RootAppraisal_Statuses_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Statuses_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Statuses_Bool_Exp>;
};

export type Subscription_RootAppraisal_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisal_Stream_Cursor_Input>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

export type Subscription_RootAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Subscription_RootAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Subscription_RootAppraisals_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Appraisals_Stream_Cursor_Input>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Subscription_RootAssessmentArgs = {
  distinct_on?: Maybe<Array<Assessment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assessment_Order_By>>;
  where?: Maybe<Assessment_Bool_Exp>;
};

export type Subscription_RootAssessment_AggregateArgs = {
  distinct_on?: Maybe<Array<Assessment_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assessment_Order_By>>;
  where?: Maybe<Assessment_Bool_Exp>;
};

export type Subscription_RootAssessment_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootAssessment_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Assessment_Stream_Cursor_Input>>;
  where?: Maybe<Assessment_Bool_Exp>;
};

export type Subscription_RootAssignee_RolesArgs = {
  distinct_on?: Maybe<Array<Assignee_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assignee_Roles_Order_By>>;
  where?: Maybe<Assignee_Roles_Bool_Exp>;
};

export type Subscription_RootAssignee_Roles_AggregateArgs = {
  distinct_on?: Maybe<Array<Assignee_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Assignee_Roles_Order_By>>;
  where?: Maybe<Assignee_Roles_Bool_Exp>;
};

export type Subscription_RootAssignee_Roles_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Assignee_Roles_Stream_Cursor_Input>>;
  where?: Maybe<Assignee_Roles_Bool_Exp>;
};

export type Subscription_RootClientArgs = {
  distinct_on?: Maybe<Array<Client_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Order_By>>;
  where?: Maybe<Client_Bool_Exp>;
};

export type Subscription_RootClient_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Client_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Activities_Order_By>>;
  where?: Maybe<Client_Activities_Bool_Exp>;
};

export type Subscription_RootClient_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Activities_Order_By>>;
  where?: Maybe<Client_Activities_Bool_Exp>;
};

export type Subscription_RootClient_Activities_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Client_Activities_Stream_Cursor_Input>>;
  where?: Maybe<Client_Activities_Bool_Exp>;
};

export type Subscription_RootClient_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Order_By>>;
  where?: Maybe<Client_Bool_Exp>;
};

export type Subscription_RootClient_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootClient_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Client_Stream_Cursor_Input>>;
  where?: Maybe<Client_Bool_Exp>;
};

export type Subscription_RootClient_TypesArgs = {
  distinct_on?: Maybe<Array<Client_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Types_Order_By>>;
  where?: Maybe<Client_Types_Bool_Exp>;
};

export type Subscription_RootClient_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Client_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Client_Types_Order_By>>;
  where?: Maybe<Client_Types_Bool_Exp>;
};

export type Subscription_RootClient_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Client_Types_Stream_Cursor_Input>>;
  where?: Maybe<Client_Types_Bool_Exp>;
};

export type Subscription_RootClientsArgs = {
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Subscription_RootClients_AggregateArgs = {
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Subscription_RootClients_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Clients_Stream_Cursor_Input>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Subscription_RootCommercial_Building_ClassesArgs = {
  distinct_on?: Maybe<Array<Commercial_Building_Classes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Building_Classes_Order_By>>;
  where?: Maybe<Commercial_Building_Classes_Bool_Exp>;
};

export type Subscription_RootCommercial_Building_Classes_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Building_Classes_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Building_Classes_Order_By>>;
  where?: Maybe<Commercial_Building_Classes_Bool_Exp>;
};

export type Subscription_RootCommercial_Building_Classes_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Commercial_Building_Classes_Stream_Cursor_Input>>;
  where?: Maybe<Commercial_Building_Classes_Bool_Exp>;
};

export type Subscription_RootCommercial_Lease_TypesArgs = {
  distinct_on?: Maybe<Array<Commercial_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Lease_Types_Order_By>>;
  where?: Maybe<Commercial_Lease_Types_Bool_Exp>;
};

export type Subscription_RootCommercial_Lease_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Lease_Types_Order_By>>;
  where?: Maybe<Commercial_Lease_Types_Bool_Exp>;
};

export type Subscription_RootCommercial_Lease_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Commercial_Lease_Types_Stream_Cursor_Input>>;
  where?: Maybe<Commercial_Lease_Types_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_SubtypeArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Subtype_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Subtype_Order_By>>;
  where?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_Subtype_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Subtype_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Subtype_Order_By>>;
  where?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_Subtype_By_PkArgs = {
  id: Scalars['Int'];
};

export type Subscription_RootCommercial_Property_Subtype_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Commercial_Property_Subtype_Stream_Cursor_Input>>;
  where?: Maybe<Commercial_Property_Subtype_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_TypeArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Type_Order_By>>;
  where?: Maybe<Commercial_Property_Type_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_Type_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Type_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Type_Order_By>>;
  where?: Maybe<Commercial_Property_Type_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_Type_By_PkArgs = {
  id: Scalars['Int'];
};

export type Subscription_RootCommercial_Property_Type_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Commercial_Property_Type_Stream_Cursor_Input>>;
  where?: Maybe<Commercial_Property_Type_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_TypesArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Types_Order_By>>;
  where?: Maybe<Commercial_Property_Types_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Commercial_Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Commercial_Property_Types_Order_By>>;
  where?: Maybe<Commercial_Property_Types_Bool_Exp>;
};

export type Subscription_RootCommercial_Property_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Commercial_Property_Types_Stream_Cursor_Input>>;
  where?: Maybe<Commercial_Property_Types_Bool_Exp>;
};

export type Subscription_RootContactArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

export type Subscription_RootContact_ActivitiesArgs = {
  distinct_on?: Maybe<Array<Contact_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Activities_Order_By>>;
  where?: Maybe<Contact_Activities_Bool_Exp>;
};

export type Subscription_RootContact_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Activities_Order_By>>;
  where?: Maybe<Contact_Activities_Bool_Exp>;
};

export type Subscription_RootContact_Activities_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Contact_Activities_Stream_Cursor_Input>>;
  where?: Maybe<Contact_Activities_Bool_Exp>;
};

export type Subscription_RootContact_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Order_By>>;
  where?: Maybe<Contact_Bool_Exp>;
};

export type Subscription_RootContact_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootContact_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Contact_Stream_Cursor_Input>>;
  where?: Maybe<Contact_Bool_Exp>;
};

export type Subscription_RootContact_TypesArgs = {
  distinct_on?: Maybe<Array<Contact_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Types_Order_By>>;
  where?: Maybe<Contact_Types_Bool_Exp>;
};

export type Subscription_RootContact_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Contact_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contact_Types_Order_By>>;
  where?: Maybe<Contact_Types_Bool_Exp>;
};

export type Subscription_RootContact_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Contact_Types_Stream_Cursor_Input>>;
  where?: Maybe<Contact_Types_Bool_Exp>;
};

export type Subscription_RootContactsArgs = {
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Subscription_RootContacts_AggregateArgs = {
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Subscription_RootContacts_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Contacts_Stream_Cursor_Input>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Subscription_RootExpenseArgs = {
  distinct_on?: Maybe<Array<Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expense_Order_By>>;
  where?: Maybe<Expense_Bool_Exp>;
};

export type Subscription_RootExpense_AggregateArgs = {
  distinct_on?: Maybe<Array<Expense_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expense_Order_By>>;
  where?: Maybe<Expense_Bool_Exp>;
};

export type Subscription_RootExpense_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootExpense_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Expense_Stream_Cursor_Input>>;
  where?: Maybe<Expense_Bool_Exp>;
};

export type Subscription_RootExpensesArgs = {
  distinct_on?: Maybe<Array<Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expenses_Order_By>>;
  where?: Maybe<Expenses_Bool_Exp>;
};

export type Subscription_RootExpenses_AggregateArgs = {
  distinct_on?: Maybe<Array<Expenses_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Expenses_Order_By>>;
  where?: Maybe<Expenses_Bool_Exp>;
};

export type Subscription_RootExpenses_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Expenses_Stream_Cursor_Input>>;
  where?: Maybe<Expenses_Bool_Exp>;
};

export type Subscription_RootFileArgs = {
  distinct_on?: Maybe<Array<File_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<File_Order_By>>;
  where?: Maybe<File_Bool_Exp>;
};

export type Subscription_RootFile_AggregateArgs = {
  distinct_on?: Maybe<Array<File_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<File_Order_By>>;
  where?: Maybe<File_Bool_Exp>;
};

export type Subscription_RootFile_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootFile_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<File_Stream_Cursor_Input>>;
  where?: Maybe<File_Bool_Exp>;
};

export type Subscription_RootInsightsArgs = {
  distinct_on?: Maybe<Array<Insights_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Insights_Order_By>>;
  where?: Maybe<Insights_Bool_Exp>;
};

export type Subscription_RootInsights_AggregateArgs = {
  distinct_on?: Maybe<Array<Insights_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Insights_Order_By>>;
  where?: Maybe<Insights_Bool_Exp>;
};

export type Subscription_RootInsights_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Insights_Stream_Cursor_Input>>;
  where?: Maybe<Insights_Bool_Exp>;
};

export type Subscription_RootIntegration_AuthenticationArgs = {
  distinct_on?: Maybe<Array<Integration_Authentication_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integration_Authentication_Order_By>>;
  where?: Maybe<Integration_Authentication_Bool_Exp>;
};

export type Subscription_RootIntegration_Authentication_AggregateArgs = {
  distinct_on?: Maybe<Array<Integration_Authentication_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integration_Authentication_Order_By>>;
  where?: Maybe<Integration_Authentication_Bool_Exp>;
};

export type Subscription_RootIntegration_Authentication_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootIntegration_Authentication_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Integration_Authentication_Stream_Cursor_Input>>;
  where?: Maybe<Integration_Authentication_Bool_Exp>;
};

export type Subscription_RootIntegrationsArgs = {
  distinct_on?: Maybe<Array<Integrations_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integrations_Order_By>>;
  where?: Maybe<Integrations_Bool_Exp>;
};

export type Subscription_RootIntegrations_AggregateArgs = {
  distinct_on?: Maybe<Array<Integrations_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Integrations_Order_By>>;
  where?: Maybe<Integrations_Bool_Exp>;
};

export type Subscription_RootIntegrations_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Integrations_Stream_Cursor_Input>>;
  where?: Maybe<Integrations_Bool_Exp>;
};

export type Subscription_RootLease_CompsArgs = {
  distinct_on?: Maybe<Array<Lease_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Comps_Order_By>>;
  where?: Maybe<Lease_Comps_Bool_Exp>;
};

export type Subscription_RootLease_Comps_AggregateArgs = {
  distinct_on?: Maybe<Array<Lease_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Comps_Order_By>>;
  where?: Maybe<Lease_Comps_Bool_Exp>;
};

export type Subscription_RootLease_Comps_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Lease_Comps_Stream_Cursor_Input>>;
  where?: Maybe<Lease_Comps_Bool_Exp>;
};

export type Subscription_RootLease_TransactionsArgs = {
  distinct_on?: Maybe<Array<Lease_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Transactions_Order_By>>;
  where?: Maybe<Lease_Transactions_Bool_Exp>;
};

export type Subscription_RootLease_Transactions_AggregateArgs = {
  distinct_on?: Maybe<Array<Lease_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Lease_Transactions_Order_By>>;
  where?: Maybe<Lease_Transactions_Bool_Exp>;
};

export type Subscription_RootLease_Transactions_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Lease_Transactions_Stream_Cursor_Input>>;
  where?: Maybe<Lease_Transactions_Bool_Exp>;
};

export type Subscription_RootLoan_TypesArgs = {
  distinct_on?: Maybe<Array<Loan_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Loan_Types_Order_By>>;
  where?: Maybe<Loan_Types_Bool_Exp>;
};

export type Subscription_RootLoan_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Loan_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Loan_Types_Order_By>>;
  where?: Maybe<Loan_Types_Bool_Exp>;
};

export type Subscription_RootLoan_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Loan_Types_Stream_Cursor_Input>>;
  where?: Maybe<Loan_Types_Bool_Exp>;
};

export type Subscription_RootMessageArgs = {
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

export type Subscription_RootMessage_AggregateArgs = {
  distinct_on?: Maybe<Array<Message_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Order_By>>;
  where?: Maybe<Message_Bool_Exp>;
};

export type Subscription_RootMessage_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootMessage_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Message_Stream_Cursor_Input>>;
  where?: Maybe<Message_Bool_Exp>;
};

export type Subscription_RootMessage_ThreadArgs = {
  distinct_on?: Maybe<Array<Message_Thread_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Thread_Order_By>>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

export type Subscription_RootMessage_Thread_AggregateArgs = {
  distinct_on?: Maybe<Array<Message_Thread_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Message_Thread_Order_By>>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

export type Subscription_RootMessage_Thread_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootMessage_Thread_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Message_Thread_Stream_Cursor_Input>>;
  where?: Maybe<Message_Thread_Bool_Exp>;
};

export type Subscription_RootMessagesArgs = {
  distinct_on?: Maybe<Array<Messages_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Messages_Order_By>>;
  where?: Maybe<Messages_Bool_Exp>;
};

export type Subscription_RootMessages_AggregateArgs = {
  distinct_on?: Maybe<Array<Messages_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Messages_Order_By>>;
  where?: Maybe<Messages_Bool_Exp>;
};

export type Subscription_RootMessages_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Messages_Stream_Cursor_Input>>;
  where?: Maybe<Messages_Bool_Exp>;
};

export type Subscription_RootOrganizationArgs = {
  distinct_on?: Maybe<Array<Organization_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Organization_Order_By>>;
  where?: Maybe<Organization_Bool_Exp>;
};

export type Subscription_RootOrganization_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootOrganization_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Organization_Stream_Cursor_Input>>;
  where?: Maybe<Organization_Bool_Exp>;
};

export type Subscription_RootPropertiesArgs = {
  distinct_on?: Maybe<Array<Properties_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Properties_Order_By>>;
  where?: Maybe<Properties_Bool_Exp>;
};

export type Subscription_RootProperties_AggregateArgs = {
  distinct_on?: Maybe<Array<Properties_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Properties_Order_By>>;
  where?: Maybe<Properties_Bool_Exp>;
};

export type Subscription_RootProperties_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Properties_Stream_Cursor_Input>>;
  where?: Maybe<Properties_Bool_Exp>;
};

export type Subscription_RootPropertyArgs = {
  distinct_on?: Maybe<Array<Property_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Order_By>>;
  where?: Maybe<Property_Bool_Exp>;
};

export type Subscription_RootProperty_AggregateArgs = {
  distinct_on?: Maybe<Array<Property_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Order_By>>;
  where?: Maybe<Property_Bool_Exp>;
};

export type Subscription_RootProperty_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootProperty_InterestsArgs = {
  distinct_on?: Maybe<Array<Property_Interests_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Interests_Order_By>>;
  where?: Maybe<Property_Interests_Bool_Exp>;
};

export type Subscription_RootProperty_Interests_AggregateArgs = {
  distinct_on?: Maybe<Array<Property_Interests_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Interests_Order_By>>;
  where?: Maybe<Property_Interests_Bool_Exp>;
};

export type Subscription_RootProperty_Interests_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Property_Interests_Stream_Cursor_Input>>;
  where?: Maybe<Property_Interests_Bool_Exp>;
};

export type Subscription_RootProperty_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Property_Stream_Cursor_Input>>;
  where?: Maybe<Property_Bool_Exp>;
};

export type Subscription_RootProperty_TypesArgs = {
  distinct_on?: Maybe<Array<Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Types_Order_By>>;
  where?: Maybe<Property_Types_Bool_Exp>;
};

export type Subscription_RootProperty_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Property_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Property_Types_Order_By>>;
  where?: Maybe<Property_Types_Bool_Exp>;
};

export type Subscription_RootProperty_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Property_Types_Stream_Cursor_Input>>;
  where?: Maybe<Property_Types_Bool_Exp>;
};

export type Subscription_RootRate_TypesArgs = {
  distinct_on?: Maybe<Array<Rate_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Rate_Types_Order_By>>;
  where?: Maybe<Rate_Types_Bool_Exp>;
};

export type Subscription_RootRate_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Rate_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Rate_Types_Order_By>>;
  where?: Maybe<Rate_Types_Bool_Exp>;
};

export type Subscription_RootRate_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Rate_Types_Stream_Cursor_Input>>;
  where?: Maybe<Rate_Types_Bool_Exp>;
};

export type Subscription_RootReport_TypesArgs = {
  distinct_on?: Maybe<Array<Report_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Types_Order_By>>;
  where?: Maybe<Report_Types_Bool_Exp>;
};

export type Subscription_RootReport_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Report_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Report_Types_Order_By>>;
  where?: Maybe<Report_Types_Bool_Exp>;
};

export type Subscription_RootReport_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Report_Types_Stream_Cursor_Input>>;
  where?: Maybe<Report_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Form_TypesArgs = {
  distinct_on?: Maybe<Array<Residential_Form_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Form_Types_Order_By>>;
  where?: Maybe<Residential_Form_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Form_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Form_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Form_Types_Order_By>>;
  where?: Maybe<Residential_Form_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Form_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Residential_Form_Types_Stream_Cursor_Input>>;
  where?: Maybe<Residential_Form_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Lease_TypesArgs = {
  distinct_on?: Maybe<Array<Residential_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Lease_Types_Order_By>>;
  where?: Maybe<Residential_Lease_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Lease_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Lease_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Lease_Types_Order_By>>;
  where?: Maybe<Residential_Lease_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Lease_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Residential_Lease_Types_Stream_Cursor_Input>>;
  where?: Maybe<Residential_Lease_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Ownership_TypesArgs = {
  distinct_on?: Maybe<Array<Residential_Ownership_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Ownership_Types_Order_By>>;
  where?: Maybe<Residential_Ownership_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Ownership_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Ownership_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Ownership_Types_Order_By>>;
  where?: Maybe<Residential_Ownership_Types_Bool_Exp>;
};

export type Subscription_RootResidential_Ownership_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Residential_Ownership_Types_Stream_Cursor_Input>>;
  where?: Maybe<Residential_Ownership_Types_Bool_Exp>;
};

export type Subscription_RootResidential_StylesArgs = {
  distinct_on?: Maybe<Array<Residential_Styles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Styles_Order_By>>;
  where?: Maybe<Residential_Styles_Bool_Exp>;
};

export type Subscription_RootResidential_Styles_AggregateArgs = {
  distinct_on?: Maybe<Array<Residential_Styles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Residential_Styles_Order_By>>;
  where?: Maybe<Residential_Styles_Bool_Exp>;
};

export type Subscription_RootResidential_Styles_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Residential_Styles_Stream_Cursor_Input>>;
  where?: Maybe<Residential_Styles_Bool_Exp>;
};

export type Subscription_RootSales_CompsArgs = {
  distinct_on?: Maybe<Array<Sales_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Comps_Order_By>>;
  where?: Maybe<Sales_Comps_Bool_Exp>;
};

export type Subscription_RootSales_Comps_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Comps_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Comps_Order_By>>;
  where?: Maybe<Sales_Comps_Bool_Exp>;
};

export type Subscription_RootSales_Comps_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Sales_Comps_Stream_Cursor_Input>>;
  where?: Maybe<Sales_Comps_Bool_Exp>;
};

export type Subscription_RootSales_TransactionsArgs = {
  distinct_on?: Maybe<Array<Sales_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Transactions_Order_By>>;
  where?: Maybe<Sales_Transactions_Bool_Exp>;
};

export type Subscription_RootSales_Transactions_AggregateArgs = {
  distinct_on?: Maybe<Array<Sales_Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Sales_Transactions_Order_By>>;
  where?: Maybe<Sales_Transactions_Bool_Exp>;
};

export type Subscription_RootSales_Transactions_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Sales_Transactions_Stream_Cursor_Input>>;
  where?: Maybe<Sales_Transactions_Bool_Exp>;
};

export type Subscription_RootSearch_AppraisalsArgs = {
  args: Search_Appraisals_Args;
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Subscription_RootSearch_Appraisals_AggregateArgs = {
  args: Search_Appraisals_Args;
  distinct_on?: Maybe<Array<Appraisals_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisals_Order_By>>;
  where?: Maybe<Appraisals_Bool_Exp>;
};

export type Subscription_RootSearch_ClientsArgs = {
  args: Search_Clients_Args;
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Subscription_RootSearch_Clients_AggregateArgs = {
  args: Search_Clients_Args;
  distinct_on?: Maybe<Array<Clients_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Clients_Order_By>>;
  where?: Maybe<Clients_Bool_Exp>;
};

export type Subscription_RootSearch_ContactsArgs = {
  args: Search_Contacts_Args;
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Subscription_RootSearch_Contacts_AggregateArgs = {
  args: Search_Contacts_Args;
  distinct_on?: Maybe<Array<Contacts_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Contacts_Order_By>>;
  where?: Maybe<Contacts_Bool_Exp>;
};

export type Subscription_RootSearch_User_ProfilesArgs = {
  args: Search_User_Profiles_Args;
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Subscription_RootSearch_User_Profiles_AggregateArgs = {
  args: Search_User_Profiles_Args;
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Subscription_RootTaskArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

export type Subscription_RootTask_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

export type Subscription_RootTask_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootTask_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Task_Stream_Cursor_Input>>;
  where?: Maybe<Task_Bool_Exp>;
};

export type Subscription_RootTasklistArgs = {
  distinct_on?: Maybe<Array<Tasklist_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Order_By>>;
  where?: Maybe<Tasklist_Bool_Exp>;
};

export type Subscription_RootTasklist_AggregateArgs = {
  distinct_on?: Maybe<Array<Tasklist_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Order_By>>;
  where?: Maybe<Tasklist_Bool_Exp>;
};

export type Subscription_RootTasklist_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootTasklist_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Tasklist_Stream_Cursor_Input>>;
  where?: Maybe<Tasklist_Bool_Exp>;
};

export type Subscription_RootTasklist_TemplatesArgs = {
  distinct_on?: Maybe<Array<Tasklist_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Templates_Order_By>>;
  where?: Maybe<Tasklist_Templates_Bool_Exp>;
};

export type Subscription_RootTasklist_Templates_AggregateArgs = {
  distinct_on?: Maybe<Array<Tasklist_Templates_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Tasklist_Templates_Order_By>>;
  where?: Maybe<Tasklist_Templates_Bool_Exp>;
};

export type Subscription_RootTasklist_Templates_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Tasklist_Templates_Stream_Cursor_Input>>;
  where?: Maybe<Tasklist_Templates_Bool_Exp>;
};

export type Subscription_RootTeamArgs = {
  distinct_on?: Maybe<Array<Team_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Team_Order_By>>;
  where?: Maybe<Team_Bool_Exp>;
};

export type Subscription_RootTeam_AggregateArgs = {
  distinct_on?: Maybe<Array<Team_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Team_Order_By>>;
  where?: Maybe<Team_Bool_Exp>;
};

export type Subscription_RootTeam_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Team_Stream_Cursor_Input>>;
  where?: Maybe<Team_Bool_Exp>;
};

export type Subscription_RootTime_ZonesArgs = {
  distinct_on?: Maybe<Array<Time_Zones_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Time_Zones_Order_By>>;
  where?: Maybe<Time_Zones_Bool_Exp>;
};

export type Subscription_RootTime_Zones_AggregateArgs = {
  distinct_on?: Maybe<Array<Time_Zones_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Time_Zones_Order_By>>;
  where?: Maybe<Time_Zones_Bool_Exp>;
};

export type Subscription_RootTime_Zones_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Time_Zones_Stream_Cursor_Input>>;
  where?: Maybe<Time_Zones_Bool_Exp>;
};

export type Subscription_RootTransactionArgs = {
  distinct_on?: Maybe<Array<Transaction_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Order_By>>;
  where?: Maybe<Transaction_Bool_Exp>;
};

export type Subscription_RootTransaction_AggregateArgs = {
  distinct_on?: Maybe<Array<Transaction_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Order_By>>;
  where?: Maybe<Transaction_Bool_Exp>;
};

export type Subscription_RootTransaction_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootTransaction_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Transaction_Stream_Cursor_Input>>;
  where?: Maybe<Transaction_Bool_Exp>;
};

export type Subscription_RootTransaction_TypesArgs = {
  distinct_on?: Maybe<Array<Transaction_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Types_Order_By>>;
  where?: Maybe<Transaction_Types_Bool_Exp>;
};

export type Subscription_RootTransaction_Types_AggregateArgs = {
  distinct_on?: Maybe<Array<Transaction_Types_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transaction_Types_Order_By>>;
  where?: Maybe<Transaction_Types_Bool_Exp>;
};

export type Subscription_RootTransaction_Types_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Transaction_Types_Stream_Cursor_Input>>;
  where?: Maybe<Transaction_Types_Bool_Exp>;
};

export type Subscription_RootTransactionsArgs = {
  distinct_on?: Maybe<Array<Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transactions_Order_By>>;
  where?: Maybe<Transactions_Bool_Exp>;
};

export type Subscription_RootTransactions_AggregateArgs = {
  distinct_on?: Maybe<Array<Transactions_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Transactions_Order_By>>;
  where?: Maybe<Transactions_Bool_Exp>;
};

export type Subscription_RootTransactions_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Transactions_Stream_Cursor_Input>>;
  where?: Maybe<Transactions_Bool_Exp>;
};

export type Subscription_RootUs_StatesArgs = {
  distinct_on?: Maybe<Array<Us_States_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Us_States_Order_By>>;
  where?: Maybe<Us_States_Bool_Exp>;
};

export type Subscription_RootUs_States_AggregateArgs = {
  distinct_on?: Maybe<Array<Us_States_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Us_States_Order_By>>;
  where?: Maybe<Us_States_Bool_Exp>;
};

export type Subscription_RootUs_States_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<Us_States_Stream_Cursor_Input>>;
  where?: Maybe<Us_States_Bool_Exp>;
};

export type Subscription_RootUser_AccountArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

export type Subscription_RootUser_Account_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

export type Subscription_RootUser_Account_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootUser_Account_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Account_Stream_Cursor_Input>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

export type Subscription_RootUser_Preference_NotificationArgs = {
  distinct_on?: Maybe<Array<User_Preference_Notification_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Preference_Notification_Order_By>>;
  where?: Maybe<User_Preference_Notification_Bool_Exp>;
};

export type Subscription_RootUser_Preference_Notification_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootUser_Preference_Notification_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Preference_Notification_Stream_Cursor_Input>>;
  where?: Maybe<User_Preference_Notification_Bool_Exp>;
};

export type Subscription_RootUser_ProfileArgs = {
  distinct_on?: Maybe<Array<User_Profile_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profile_Order_By>>;
  where?: Maybe<User_Profile_Bool_Exp>;
};

export type Subscription_RootUser_Profile_ActivitiesArgs = {
  distinct_on?: Maybe<Array<User_Profile_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profile_Activities_Order_By>>;
  where?: Maybe<User_Profile_Activities_Bool_Exp>;
};

export type Subscription_RootUser_Profile_Activities_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Profile_Activities_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profile_Activities_Order_By>>;
  where?: Maybe<User_Profile_Activities_Bool_Exp>;
};

export type Subscription_RootUser_Profile_Activities_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Profile_Activities_Stream_Cursor_Input>>;
  where?: Maybe<User_Profile_Activities_Bool_Exp>;
};

export type Subscription_RootUser_Profile_By_PkArgs = {
  id: Scalars['uuid'];
};

export type Subscription_RootUser_Profile_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Profile_Stream_Cursor_Input>>;
  where?: Maybe<User_Profile_Bool_Exp>;
};

export type Subscription_RootUser_ProfilesArgs = {
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Subscription_RootUser_Profiles_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Profiles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Profiles_Order_By>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Subscription_RootUser_Profiles_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Profiles_Stream_Cursor_Input>>;
  where?: Maybe<User_Profiles_Bool_Exp>;
};

export type Subscription_RootUser_RoleArgs = {
  distinct_on?: Maybe<Array<User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Role_Order_By>>;
  where?: Maybe<User_Role_Bool_Exp>;
};

export type Subscription_RootUser_Role_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Role_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Role_Order_By>>;
  where?: Maybe<User_Role_Bool_Exp>;
};

export type Subscription_RootUser_Role_By_PkArgs = {
  id: Scalars['Int'];
};

export type Subscription_RootUser_Role_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Role_Stream_Cursor_Input>>;
  where?: Maybe<User_Role_Bool_Exp>;
};

export type Subscription_RootUser_RolesArgs = {
  distinct_on?: Maybe<Array<User_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Roles_Order_By>>;
  where?: Maybe<User_Roles_Bool_Exp>;
};

export type Subscription_RootUser_Roles_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Roles_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Roles_Order_By>>;
  where?: Maybe<User_Roles_Bool_Exp>;
};

export type Subscription_RootUser_Roles_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Roles_Stream_Cursor_Input>>;
  where?: Maybe<User_Roles_Bool_Exp>;
};

export type Subscription_RootUser_SessionArgs = {
  distinct_on?: Maybe<Array<User_Session_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Session_Order_By>>;
  where?: Maybe<User_Session_Bool_Exp>;
};

export type Subscription_RootUser_Session_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<Maybe<User_Session_Stream_Cursor_Input>>;
  where?: Maybe<User_Session_Bool_Exp>;
};

/** columns and relationships of "task" */
export type Task = {
  __typename?: 'task';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  color?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  created_at: Scalars['timestamptz'];
  description: Scalars['String'];
  due_date?: Maybe<Scalars['timestamptz']>;
  id: Scalars['uuid'];
  order: Scalars['Int'];
  organization_id: Scalars['uuid'];
  /** An object relationship */
  tasklist: Tasklist;
  tasklist_id: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregated selection of "task" */
export type Task_Aggregate = {
  __typename?: 'task_aggregate';
  aggregate?: Maybe<Task_Aggregate_Fields>;
  nodes: Array<Task>;
};

/** aggregate fields of "task" */
export type Task_Aggregate_Fields = {
  __typename?: 'task_aggregate_fields';
  avg?: Maybe<Task_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Task_Max_Fields>;
  min?: Maybe<Task_Min_Fields>;
  stddev?: Maybe<Task_Stddev_Fields>;
  stddev_pop?: Maybe<Task_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Task_Stddev_Samp_Fields>;
  sum?: Maybe<Task_Sum_Fields>;
  var_pop?: Maybe<Task_Var_Pop_Fields>;
  var_samp?: Maybe<Task_Var_Samp_Fields>;
  variance?: Maybe<Task_Variance_Fields>;
};

/** aggregate fields of "task" */
export type Task_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Task_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "task" */
export type Task_Aggregate_Order_By = {
  avg?: Maybe<Task_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Task_Max_Order_By>;
  min?: Maybe<Task_Min_Order_By>;
  stddev?: Maybe<Task_Stddev_Order_By>;
  stddev_pop?: Maybe<Task_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Task_Stddev_Samp_Order_By>;
  sum?: Maybe<Task_Sum_Order_By>;
  var_pop?: Maybe<Task_Var_Pop_Order_By>;
  var_samp?: Maybe<Task_Var_Samp_Order_By>;
  variance?: Maybe<Task_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "task" */
export type Task_Arr_Rel_Insert_Input = {
  data: Array<Task_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Task_On_Conflict>;
};

/** aggregate avg on columns */
export type Task_Avg_Fields = {
  __typename?: 'task_avg_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "task" */
export type Task_Avg_Order_By = {
  order?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "task". All fields are combined with a logical 'AND'. */
export type Task_Bool_Exp = {
  _and?: Maybe<Array<Task_Bool_Exp>>;
  _not?: Maybe<Task_Bool_Exp>;
  _or?: Maybe<Array<Task_Bool_Exp>>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  assignee_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  color?: Maybe<String_Comparison_Exp>;
  completed_date?: Maybe<Timestamptz_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  due_date?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  tasklist?: Maybe<Tasklist_Bool_Exp>;
  tasklist_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "task" */
export enum Task_Constraint {
  /** unique or primary key constraint on columns "id" */
  TaskPkey = 'task_pkey',
}

/** input type for incrementing numeric columns in table "task" */
export type Task_Inc_Input = {
  order?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "task" */
export type Task_Insert_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  color?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  order?: Maybe<Scalars['Int']>;
  tasklist?: Maybe<Tasklist_Obj_Rel_Insert_Input>;
  tasklist_id?: Maybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Task_Max_Fields = {
  __typename?: 'task_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  color?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  order?: Maybe<Scalars['Int']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasklist_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "task" */
export type Task_Max_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  color?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  tasklist_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Task_Min_Fields = {
  __typename?: 'task_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  color?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  order?: Maybe<Scalars['Int']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasklist_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "task" */
export type Task_Min_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  color?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  tasklist_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** response of any mutation on the table "task" */
export type Task_Mutation_Response = {
  __typename?: 'task_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Task>;
};

/** on_conflict condition type for table "task" */
export type Task_On_Conflict = {
  constraint: Task_Constraint;
  update_columns: Array<Task_Update_Column>;
  where?: Maybe<Task_Bool_Exp>;
};

/** Ordering options when selecting data from "task". */
export type Task_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  assignee_user_account_id?: Maybe<Order_By>;
  color?: Maybe<Order_By>;
  completed_date?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  due_date?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  tasklist?: Maybe<Tasklist_Order_By>;
  tasklist_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: task */
export type Task_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "task" */
export enum Task_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  AssigneeUserAccountId = 'assignee_user_account_id',
  /** column name */
  Color = 'color',
  /** column name */
  CompletedDate = 'completed_date',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  DueDate = 'due_date',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  TasklistId = 'tasklist_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "task" */
export type Task_Set_Input = {
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  color?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  order?: Maybe<Scalars['Int']>;
  tasklist_id?: Maybe<Scalars['uuid']>;
};

/** aggregate stddev on columns */
export type Task_Stddev_Fields = {
  __typename?: 'task_stddev_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "task" */
export type Task_Stddev_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Task_Stddev_Pop_Fields = {
  __typename?: 'task_stddev_pop_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "task" */
export type Task_Stddev_Pop_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Task_Stddev_Samp_Fields = {
  __typename?: 'task_stddev_samp_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "task" */
export type Task_Stddev_Samp_Order_By = {
  order?: Maybe<Order_By>;
};

/** Streaming cursor of the table "task" */
export type Task_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Task_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Task_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  assignee_user_account_id?: Maybe<Scalars['uuid']>;
  color?: Maybe<Scalars['String']>;
  completed_date?: Maybe<Scalars['timestamptz']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  due_date?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  order?: Maybe<Scalars['Int']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasklist_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Task_Sum_Fields = {
  __typename?: 'task_sum_fields';
  order?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "task" */
export type Task_Sum_Order_By = {
  order?: Maybe<Order_By>;
};

/** update columns of table "task" */
export enum Task_Update_Column {
  /** column name */
  AssigneeUserAccountId = 'assignee_user_account_id',
  /** column name */
  Color = 'color',
  /** column name */
  CompletedDate = 'completed_date',
  /** column name */
  Description = 'description',
  /** column name */
  DueDate = 'due_date',
  /** column name */
  Order = 'order',
  /** column name */
  TasklistId = 'tasklist_id',
}

export type Task_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Task_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Task_Set_Input>;
  where: Task_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Task_Var_Pop_Fields = {
  __typename?: 'task_var_pop_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "task" */
export type Task_Var_Pop_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Task_Var_Samp_Fields = {
  __typename?: 'task_var_samp_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "task" */
export type Task_Var_Samp_Order_By = {
  order?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Task_Variance_Fields = {
  __typename?: 'task_variance_fields';
  order?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "task" */
export type Task_Variance_Order_By = {
  order?: Maybe<Order_By>;
};

/** columns and relationships of "tasklist" */
export type Tasklist = {
  __typename?: 'tasklist';
  /** An object relationship */
  appraisal?: Maybe<Appraisal>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at: Scalars['timestamptz'];
  id: Scalars['uuid'];
  name: Scalars['String'];
  organization_id: Scalars['uuid'];
  /** An array relationship */
  tasks: Array<Task>;
  /** An aggregate relationship */
  tasks_aggregate: Task_Aggregate;
  tasks_completed_count: Scalars['Int'];
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count: Scalars['Int'];
  template: Scalars['Boolean'];
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default: Scalars['Boolean'];
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "tasklist" */
export type TasklistTasksArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

/** columns and relationships of "tasklist" */
export type TasklistTasks_AggregateArgs = {
  distinct_on?: Maybe<Array<Task_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Task_Order_By>>;
  where?: Maybe<Task_Bool_Exp>;
};

/** columns and relationships of "tasklist" */
export type TasklistTemplate_Residential_Form_Type_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "tasklist" */
export type Tasklist_Aggregate = {
  __typename?: 'tasklist_aggregate';
  aggregate?: Maybe<Tasklist_Aggregate_Fields>;
  nodes: Array<Tasklist>;
};

/** aggregate fields of "tasklist" */
export type Tasklist_Aggregate_Fields = {
  __typename?: 'tasklist_aggregate_fields';
  avg?: Maybe<Tasklist_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Tasklist_Max_Fields>;
  min?: Maybe<Tasklist_Min_Fields>;
  stddev?: Maybe<Tasklist_Stddev_Fields>;
  stddev_pop?: Maybe<Tasklist_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Tasklist_Stddev_Samp_Fields>;
  sum?: Maybe<Tasklist_Sum_Fields>;
  var_pop?: Maybe<Tasklist_Var_Pop_Fields>;
  var_samp?: Maybe<Tasklist_Var_Samp_Fields>;
  variance?: Maybe<Tasklist_Variance_Fields>;
};

/** aggregate fields of "tasklist" */
export type Tasklist_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Tasklist_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type Tasklist_Append_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
};

/** aggregate avg on columns */
export type Tasklist_Avg_Fields = {
  __typename?: 'tasklist_avg_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "tasklist". All fields are combined with a logical 'AND'. */
export type Tasklist_Bool_Exp = {
  _and?: Maybe<Array<Tasklist_Bool_Exp>>;
  _not?: Maybe<Tasklist_Bool_Exp>;
  _or?: Maybe<Array<Tasklist_Bool_Exp>>;
  appraisal?: Maybe<Appraisal_Bool_Exp>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  tasks?: Maybe<Task_Bool_Exp>;
  tasks_completed_count?: Maybe<Int_Comparison_Exp>;
  tasks_count?: Maybe<Int_Comparison_Exp>;
  tasks_incompleted_count?: Maybe<Int_Comparison_Exp>;
  template?: Maybe<Boolean_Comparison_Exp>;
  template_commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_default?: Maybe<Boolean_Comparison_Exp>;
  template_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_residential_form_type_ids?: Maybe<Jsonb_Comparison_Exp>;
  template_residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "tasklist" */
export enum Tasklist_Constraint {
  /** unique or primary key constraint on columns "id" */
  TasklistPkey = 'tasklist_pkey',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type Tasklist_Delete_At_Path_Input = {
  template_residential_form_type_ids?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type Tasklist_Delete_Elem_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type Tasklist_Delete_Key_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['String']>;
};

/** input type for incrementing numeric columns in table "tasklist" */
export type Tasklist_Inc_Input = {
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "tasklist" */
export type Tasklist_Insert_Input = {
  appraisal?: Maybe<Appraisal_Obj_Rel_Insert_Input>;
  appraisal_id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  tasks?: Maybe<Task_Arr_Rel_Insert_Input>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type Tasklist_Max_Fields = {
  __typename?: 'tasklist_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Tasklist_Min_Fields = {
  __typename?: 'tasklist_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "tasklist" */
export type Tasklist_Mutation_Response = {
  __typename?: 'tasklist_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Tasklist>;
};

/** input type for inserting object relation for remote table "tasklist" */
export type Tasklist_Obj_Rel_Insert_Input = {
  data: Tasklist_Insert_Input;
  /** upsert condition */
  on_conflict?: Maybe<Tasklist_On_Conflict>;
};

/** on_conflict condition type for table "tasklist" */
export type Tasklist_On_Conflict = {
  constraint: Tasklist_Constraint;
  update_columns: Array<Tasklist_Update_Column>;
  where?: Maybe<Tasklist_Bool_Exp>;
};

/** Ordering options when selecting data from "tasklist". */
export type Tasklist_Order_By = {
  appraisal?: Maybe<Appraisal_Order_By>;
  appraisal_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  tasks_aggregate?: Maybe<Task_Aggregate_Order_By>;
  tasks_completed_count?: Maybe<Order_By>;
  tasks_count?: Maybe<Order_By>;
  tasks_incompleted_count?: Maybe<Order_By>;
  template?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_default?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_form_type_ids?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: tasklist */
export type Tasklist_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type Tasklist_Prepend_Input = {
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "tasklist" */
export enum Tasklist_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  TasksCompletedCount = 'tasks_completed_count',
  /** column name */
  TasksCount = 'tasks_count',
  /** column name */
  TasksIncompletedCount = 'tasks_incompleted_count',
  /** column name */
  Template = 'template',
  /** column name */
  TemplateCommercialPropertyTypeId = 'template_commercial_property_type_id',
  /** column name */
  TemplateDefault = 'template_default',
  /** column name */
  TemplatePropertyTypeId = 'template_property_type_id',
  /** column name */
  TemplateResidentialFormTypeIds = 'template_residential_form_type_ids',
  /** column name */
  TemplateResidentialOwnershipTypeId = 'template_residential_ownership_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "tasklist" */
export type Tasklist_Set_Input = {
  name?: Maybe<Scalars['String']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type Tasklist_Stddev_Fields = {
  __typename?: 'tasklist_stddev_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Tasklist_Stddev_Pop_Fields = {
  __typename?: 'tasklist_stddev_pop_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Tasklist_Stddev_Samp_Fields = {
  __typename?: 'tasklist_stddev_samp_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "tasklist" */
export type Tasklist_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Tasklist_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Tasklist_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Tasklist_Sum_Fields = {
  __typename?: 'tasklist_sum_fields';
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** columns and relationships of "tasklist_templates" */
export type Tasklist_Templates = {
  __typename?: 'tasklist_templates';
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** columns and relationships of "tasklist_templates" */
export type Tasklist_TemplatesTemplate_Residential_Form_Type_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "tasklist_templates" */
export type Tasklist_Templates_Aggregate = {
  __typename?: 'tasklist_templates_aggregate';
  aggregate?: Maybe<Tasklist_Templates_Aggregate_Fields>;
  nodes: Array<Tasklist_Templates>;
};

/** aggregate fields of "tasklist_templates" */
export type Tasklist_Templates_Aggregate_Fields = {
  __typename?: 'tasklist_templates_aggregate_fields';
  avg?: Maybe<Tasklist_Templates_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Tasklist_Templates_Max_Fields>;
  min?: Maybe<Tasklist_Templates_Min_Fields>;
  stddev?: Maybe<Tasklist_Templates_Stddev_Fields>;
  stddev_pop?: Maybe<Tasklist_Templates_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Tasklist_Templates_Stddev_Samp_Fields>;
  sum?: Maybe<Tasklist_Templates_Sum_Fields>;
  var_pop?: Maybe<Tasklist_Templates_Var_Pop_Fields>;
  var_samp?: Maybe<Tasklist_Templates_Var_Samp_Fields>;
  variance?: Maybe<Tasklist_Templates_Variance_Fields>;
};

/** aggregate fields of "tasklist_templates" */
export type Tasklist_Templates_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Tasklist_Templates_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Tasklist_Templates_Avg_Fields = {
  __typename?: 'tasklist_templates_avg_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "tasklist_templates". All fields are combined with a logical 'AND'. */
export type Tasklist_Templates_Bool_Exp = {
  _and?: Maybe<Array<Tasklist_Templates_Bool_Exp>>;
  _not?: Maybe<Tasklist_Templates_Bool_Exp>;
  _or?: Maybe<Array<Tasklist_Templates_Bool_Exp>>;
  appraisal_id?: Maybe<Uuid_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  tasks_completed_count?: Maybe<Int_Comparison_Exp>;
  tasks_count?: Maybe<Int_Comparison_Exp>;
  tasks_incompleted_count?: Maybe<Int_Comparison_Exp>;
  template?: Maybe<Boolean_Comparison_Exp>;
  template_commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_default?: Maybe<Boolean_Comparison_Exp>;
  template_property_type_id?: Maybe<Int_Comparison_Exp>;
  template_residential_form_type_ids?: Maybe<Jsonb_Comparison_Exp>;
  template_residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** aggregate max on columns */
export type Tasklist_Templates_Max_Fields = {
  __typename?: 'tasklist_templates_max_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate min on columns */
export type Tasklist_Templates_Min_Fields = {
  __typename?: 'tasklist_templates_min_fields';
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** Ordering options when selecting data from "tasklist_templates". */
export type Tasklist_Templates_Order_By = {
  appraisal_id?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  tasks_completed_count?: Maybe<Order_By>;
  tasks_count?: Maybe<Order_By>;
  tasks_incompleted_count?: Maybe<Order_By>;
  template?: Maybe<Order_By>;
  template_commercial_property_type_id?: Maybe<Order_By>;
  template_default?: Maybe<Order_By>;
  template_property_type_id?: Maybe<Order_By>;
  template_residential_form_type_ids?: Maybe<Order_By>;
  template_residential_ownership_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** select columns of table "tasklist_templates" */
export enum Tasklist_Templates_Select_Column {
  /** column name */
  AppraisalId = 'appraisal_id',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  TasksCompletedCount = 'tasks_completed_count',
  /** column name */
  TasksCount = 'tasks_count',
  /** column name */
  TasksIncompletedCount = 'tasks_incompleted_count',
  /** column name */
  Template = 'template',
  /** column name */
  TemplateCommercialPropertyTypeId = 'template_commercial_property_type_id',
  /** column name */
  TemplateDefault = 'template_default',
  /** column name */
  TemplatePropertyTypeId = 'template_property_type_id',
  /** column name */
  TemplateResidentialFormTypeIds = 'template_residential_form_type_ids',
  /** column name */
  TemplateResidentialOwnershipTypeId = 'template_residential_ownership_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** aggregate stddev on columns */
export type Tasklist_Templates_Stddev_Fields = {
  __typename?: 'tasklist_templates_stddev_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Tasklist_Templates_Stddev_Pop_Fields = {
  __typename?: 'tasklist_templates_stddev_pop_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Tasklist_Templates_Stddev_Samp_Fields = {
  __typename?: 'tasklist_templates_stddev_samp_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "tasklist_templates" */
export type Tasklist_Templates_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Tasklist_Templates_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Tasklist_Templates_Stream_Cursor_Value_Input = {
  appraisal_id?: Maybe<Scalars['uuid']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template?: Maybe<Scalars['Boolean']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_default?: Maybe<Scalars['Boolean']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_form_type_ids?: Maybe<Scalars['jsonb']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** aggregate sum on columns */
export type Tasklist_Templates_Sum_Fields = {
  __typename?: 'tasklist_templates_sum_fields';
  tasks_completed_count?: Maybe<Scalars['Int']>;
  tasks_count?: Maybe<Scalars['Int']>;
  tasks_incompleted_count?: Maybe<Scalars['Int']>;
  template_commercial_property_type_id?: Maybe<Scalars['Int']>;
  template_property_type_id?: Maybe<Scalars['Int']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Tasklist_Templates_Var_Pop_Fields = {
  __typename?: 'tasklist_templates_var_pop_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Tasklist_Templates_Var_Samp_Fields = {
  __typename?: 'tasklist_templates_var_samp_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Tasklist_Templates_Variance_Fields = {
  __typename?: 'tasklist_templates_variance_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** update columns of table "tasklist" */
export enum Tasklist_Update_Column {
  /** column name */
  Name = 'name',
  /** column name */
  TemplateCommercialPropertyTypeId = 'template_commercial_property_type_id',
  /** column name */
  TemplatePropertyTypeId = 'template_property_type_id',
  /** column name */
  TemplateResidentialFormTypeIds = 'template_residential_form_type_ids',
  /** column name */
  TemplateResidentialOwnershipTypeId = 'template_residential_ownership_type_id',
}

export type Tasklist_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<Tasklist_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<Tasklist_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<Tasklist_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<Tasklist_Delete_Key_Input>;
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Tasklist_Inc_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<Tasklist_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Tasklist_Set_Input>;
  where: Tasklist_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Tasklist_Var_Pop_Fields = {
  __typename?: 'tasklist_var_pop_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Tasklist_Var_Samp_Fields = {
  __typename?: 'tasklist_var_samp_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Tasklist_Variance_Fields = {
  __typename?: 'tasklist_variance_fields';
  tasks_completed_count?: Maybe<Scalars['Float']>;
  tasks_count?: Maybe<Scalars['Float']>;
  tasks_incompleted_count?: Maybe<Scalars['Float']>;
  template_commercial_property_type_id?: Maybe<Scalars['Float']>;
  template_property_type_id?: Maybe<Scalars['Float']>;
  template_residential_ownership_type_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "team" */
export type Team = {
  __typename?: 'team';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** columns and relationships of "team" */
export type TeamLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "team" */
export type Team_Aggregate = {
  __typename?: 'team_aggregate';
  aggregate?: Maybe<Team_Aggregate_Fields>;
  nodes: Array<Team>;
};

/** aggregate fields of "team" */
export type Team_Aggregate_Fields = {
  __typename?: 'team_aggregate_fields';
  avg?: Maybe<Team_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Team_Max_Fields>;
  min?: Maybe<Team_Min_Fields>;
  stddev?: Maybe<Team_Stddev_Fields>;
  stddev_pop?: Maybe<Team_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Team_Stddev_Samp_Fields>;
  sum?: Maybe<Team_Sum_Fields>;
  var_pop?: Maybe<Team_Var_Pop_Fields>;
  var_samp?: Maybe<Team_Var_Samp_Fields>;
  variance?: Maybe<Team_Variance_Fields>;
};

/** aggregate fields of "team" */
export type Team_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Team_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Team_Avg_Fields = {
  __typename?: 'team_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "team". All fields are combined with a logical 'AND'. */
export type Team_Bool_Exp = {
  _and?: Maybe<Array<Team_Bool_Exp>>;
  _not?: Maybe<Team_Bool_Exp>;
  _or?: Maybe<Array<Team_Bool_Exp>>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  default_role?: Maybe<String_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  enabled?: Maybe<Boolean_Comparison_Exp>;
  first_name?: Maybe<String_Comparison_Exp>;
  full_name?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  last_name?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  phone_number?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_role_id?: Maybe<Int_Comparison_Exp>;
};

/** aggregate max on columns */
export type Team_Max_Fields = {
  __typename?: 'team_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate min on columns */
export type Team_Min_Fields = {
  __typename?: 'team_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** Ordering options when selecting data from "team". */
export type Team_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  default_role?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  enabled?: Maybe<Order_By>;
  first_name?: Maybe<Order_By>;
  full_name?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_name?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** select columns of table "team" */
export enum Team_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DefaultRole = 'default_role',
  /** column name */
  Email = 'email',
  /** column name */
  Enabled = 'enabled',
  /** column name */
  FirstName = 'first_name',
  /** column name */
  FullName = 'full_name',
  /** column name */
  Id = 'id',
  /** column name */
  LastName = 'last_name',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Url = 'url',
  /** column name */
  UserRoleId = 'user_role_id',
}

/** aggregate stddev on columns */
export type Team_Stddev_Fields = {
  __typename?: 'team_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Team_Stddev_Pop_Fields = {
  __typename?: 'team_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Team_Stddev_Samp_Fields = {
  __typename?: 'team_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "team" */
export type Team_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Team_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Team_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type Team_Sum_Fields = {
  __typename?: 'team_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Team_Var_Pop_Fields = {
  __typename?: 'team_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Team_Var_Samp_Fields = {
  __typename?: 'team_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Team_Variance_Fields = {
  __typename?: 'team_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "time_zones" */
export type Time_Zones = {
  __typename?: 'time_zones';
  abbrev?: Maybe<Scalars['String']>;
  is_dst?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  utc_offset?: Maybe<Scalars['interval']>;
};

/** aggregated selection of "time_zones" */
export type Time_Zones_Aggregate = {
  __typename?: 'time_zones_aggregate';
  aggregate?: Maybe<Time_Zones_Aggregate_Fields>;
  nodes: Array<Time_Zones>;
};

/** aggregate fields of "time_zones" */
export type Time_Zones_Aggregate_Fields = {
  __typename?: 'time_zones_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Time_Zones_Max_Fields>;
  min?: Maybe<Time_Zones_Min_Fields>;
};

/** aggregate fields of "time_zones" */
export type Time_Zones_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Time_Zones_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "time_zones". All fields are combined with a logical 'AND'. */
export type Time_Zones_Bool_Exp = {
  _and?: Maybe<Array<Time_Zones_Bool_Exp>>;
  _not?: Maybe<Time_Zones_Bool_Exp>;
  _or?: Maybe<Array<Time_Zones_Bool_Exp>>;
  abbrev?: Maybe<String_Comparison_Exp>;
  is_dst?: Maybe<Boolean_Comparison_Exp>;
  name?: Maybe<String_Comparison_Exp>;
  utc_offset?: Maybe<Interval_Comparison_Exp>;
};

/** aggregate max on columns */
export type Time_Zones_Max_Fields = {
  __typename?: 'time_zones_max_fields';
  abbrev?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Time_Zones_Min_Fields = {
  __typename?: 'time_zones_min_fields';
  abbrev?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "time_zones". */
export type Time_Zones_Order_By = {
  abbrev?: Maybe<Order_By>;
  is_dst?: Maybe<Order_By>;
  name?: Maybe<Order_By>;
  utc_offset?: Maybe<Order_By>;
};

/** select columns of table "time_zones" */
export enum Time_Zones_Select_Column {
  /** column name */
  Abbrev = 'abbrev',
  /** column name */
  IsDst = 'is_dst',
  /** column name */
  Name = 'name',
  /** column name */
  UtcOffset = 'utc_offset',
}

/** Streaming cursor of the table "time_zones" */
export type Time_Zones_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Time_Zones_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Time_Zones_Stream_Cursor_Value_Input = {
  abbrev?: Maybe<Scalars['String']>;
  is_dst?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  utc_offset?: Maybe<Scalars['interval']>;
};

/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
export type Timestamp_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamp']>;
  _gt?: Maybe<Scalars['timestamp']>;
  _gte?: Maybe<Scalars['timestamp']>;
  _in?: Maybe<Array<Scalars['timestamp']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamp']>;
  _lte?: Maybe<Scalars['timestamp']>;
  _neq?: Maybe<Scalars['timestamp']>;
  _nin?: Maybe<Array<Scalars['timestamp']>>;
};

/** Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'. */
export type Timestamptz_Comparison_Exp = {
  _eq?: Maybe<Scalars['timestamptz']>;
  _gt?: Maybe<Scalars['timestamptz']>;
  _gte?: Maybe<Scalars['timestamptz']>;
  _in?: Maybe<Array<Scalars['timestamptz']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['timestamptz']>;
  _lte?: Maybe<Scalars['timestamptz']>;
  _neq?: Maybe<Scalars['timestamptz']>;
  _nin?: Maybe<Array<Scalars['timestamptz']>>;
};

/** columns and relationships of "transaction" */
export type Transaction = {
  __typename?: 'transaction';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at: Scalars['timestamptz'];
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id: Scalars['uuid'];
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id: Scalars['uuid'];
  /** An object relationship */
  property: Property;
  property_id: Scalars['uuid'];
  property_interest_id: Scalars['Int'];
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type_id: Scalars['Int'];
  updated_at: Scalars['timestamptz'];
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id: Scalars['uuid'];
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregated selection of "transaction" */
export type Transaction_Aggregate = {
  __typename?: 'transaction_aggregate';
  aggregate?: Maybe<Transaction_Aggregate_Fields>;
  nodes: Array<Transaction>;
};

/** aggregate fields of "transaction" */
export type Transaction_Aggregate_Fields = {
  __typename?: 'transaction_aggregate_fields';
  avg?: Maybe<Transaction_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Transaction_Max_Fields>;
  min?: Maybe<Transaction_Min_Fields>;
  stddev?: Maybe<Transaction_Stddev_Fields>;
  stddev_pop?: Maybe<Transaction_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Transaction_Stddev_Samp_Fields>;
  sum?: Maybe<Transaction_Sum_Fields>;
  var_pop?: Maybe<Transaction_Var_Pop_Fields>;
  var_samp?: Maybe<Transaction_Var_Samp_Fields>;
  variance?: Maybe<Transaction_Variance_Fields>;
};

/** aggregate fields of "transaction" */
export type Transaction_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Transaction_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "transaction" */
export type Transaction_Aggregate_Order_By = {
  avg?: Maybe<Transaction_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<Transaction_Max_Order_By>;
  min?: Maybe<Transaction_Min_Order_By>;
  stddev?: Maybe<Transaction_Stddev_Order_By>;
  stddev_pop?: Maybe<Transaction_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<Transaction_Stddev_Samp_Order_By>;
  sum?: Maybe<Transaction_Sum_Order_By>;
  var_pop?: Maybe<Transaction_Var_Pop_Order_By>;
  var_samp?: Maybe<Transaction_Var_Samp_Order_By>;
  variance?: Maybe<Transaction_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "transaction" */
export type Transaction_Arr_Rel_Insert_Input = {
  data: Array<Transaction_Insert_Input>;
  /** upsert condition */
  on_conflict?: Maybe<Transaction_On_Conflict>;
};

/** aggregate avg on columns */
export type Transaction_Avg_Fields = {
  __typename?: 'transaction_avg_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  net_operating_income?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "transaction" */
export type Transaction_Avg_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "transaction". All fields are combined with a logical 'AND'. */
export type Transaction_Bool_Exp = {
  _and?: Maybe<Array<Transaction_Bool_Exp>>;
  _not?: Maybe<Transaction_Bool_Exp>;
  _or?: Maybe<Array<Transaction_Bool_Exp>>;
  commercial_cap_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_lease_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_occupancy_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_rent_square_foot?: Maybe<Numeric_Comparison_Exp>;
  concessions?: Maybe<String_Comparison_Exp>;
  condition?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  data_sources?: Maybe<String_Comparison_Exp>;
  deed_book?: Maybe<String_Comparison_Exp>;
  deed_page?: Maybe<String_Comparison_Exp>;
  grantee_id?: Maybe<Uuid_Comparison_Exp>;
  grantor_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  instrument?: Maybe<String_Comparison_Exp>;
  lease_date_end?: Maybe<Timestamptz_Comparison_Exp>;
  lease_date_start?: Maybe<Timestamptz_Comparison_Exp>;
  net_operating_income?: Maybe<Numeric_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  property?: Maybe<Property_Bool_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_interest_id?: Maybe<Int_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quality_of_construction?: Maybe<String_Comparison_Exp>;
  residential_lease_type_id?: Maybe<Int_Comparison_Exp>;
  residential_monthly_rent?: Maybe<Numeric_Comparison_Exp>;
  sale_date?: Maybe<Timestamptz_Comparison_Exp>;
  sale_price?: Maybe<Numeric_Comparison_Exp>;
  tenant_id?: Maybe<Uuid_Comparison_Exp>;
  transaction_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  verification_sources?: Maybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "transaction" */
export enum Transaction_Constraint {
  /** unique or primary key constraint on columns "id" */
  TransactionPkey = 'transaction_pkey',
}

/** input type for incrementing numeric columns in table "transaction" */
export type Transaction_Inc_Input = {
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "transaction" */
export type Transaction_Insert_Input = {
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  property?: Maybe<Property_Obj_Rel_Insert_Input>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Transaction_Max_Fields = {
  __typename?: 'transaction_max_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "transaction" */
export type Transaction_Max_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  grantee_id?: Maybe<Order_By>;
  grantor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  lease_date_end?: Maybe<Order_By>;
  lease_date_start?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_date?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  tenant_id?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type Transaction_Min_Fields = {
  __typename?: 'transaction_min_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "transaction" */
export type Transaction_Min_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  grantee_id?: Maybe<Order_By>;
  grantor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  lease_date_end?: Maybe<Order_By>;
  lease_date_start?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_date?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  tenant_id?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** response of any mutation on the table "transaction" */
export type Transaction_Mutation_Response = {
  __typename?: 'transaction_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Transaction>;
};

/** on_conflict condition type for table "transaction" */
export type Transaction_On_Conflict = {
  constraint: Transaction_Constraint;
  update_columns: Array<Transaction_Update_Column>;
  where?: Maybe<Transaction_Bool_Exp>;
};

/** Ordering options when selecting data from "transaction". */
export type Transaction_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  grantee_id?: Maybe<Order_By>;
  grantor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  lease_date_end?: Maybe<Order_By>;
  lease_date_start?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  property?: Maybe<Property_Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_date?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  tenant_id?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** primary key columns input for table: transaction */
export type Transaction_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "transaction" */
export enum Transaction_Select_Column {
  /** column name */
  CommercialCapRate = 'commercial_cap_rate',
  /** column name */
  CommercialLeaseTypeId = 'commercial_lease_type_id',
  /** column name */
  CommercialOccupancyRate = 'commercial_occupancy_rate',
  /** column name */
  CommercialRentSquareFoot = 'commercial_rent_square_foot',
  /** column name */
  Concessions = 'concessions',
  /** column name */
  Condition = 'condition',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataSources = 'data_sources',
  /** column name */
  DeedBook = 'deed_book',
  /** column name */
  DeedPage = 'deed_page',
  /** column name */
  GranteeId = 'grantee_id',
  /** column name */
  GrantorId = 'grantor_id',
  /** column name */
  Id = 'id',
  /** column name */
  Instrument = 'instrument',
  /** column name */
  LeaseDateEnd = 'lease_date_end',
  /** column name */
  LeaseDateStart = 'lease_date_start',
  /** column name */
  NetOperatingIncome = 'net_operating_income',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyInterestId = 'property_interest_id',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QualityOfConstruction = 'quality_of_construction',
  /** column name */
  ResidentialLeaseTypeId = 'residential_lease_type_id',
  /** column name */
  ResidentialMonthlyRent = 'residential_monthly_rent',
  /** column name */
  SaleDate = 'sale_date',
  /** column name */
  SalePrice = 'sale_price',
  /** column name */
  TenantId = 'tenant_id',
  /** column name */
  TransactionTypeId = 'transaction_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VerificationSources = 'verification_sources',
}

/** input type for updating data in table "transaction" */
export type Transaction_Set_Input = {
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  url?: Maybe<Scalars['String']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate stddev on columns */
export type Transaction_Stddev_Fields = {
  __typename?: 'transaction_stddev_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  net_operating_income?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "transaction" */
export type Transaction_Stddev_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Transaction_Stddev_Pop_Fields = {
  __typename?: 'transaction_stddev_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  net_operating_income?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "transaction" */
export type Transaction_Stddev_Pop_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Transaction_Stddev_Samp_Fields = {
  __typename?: 'transaction_stddev_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  net_operating_income?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "transaction" */
export type Transaction_Stddev_Samp_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** Streaming cursor of the table "transaction" */
export type Transaction_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Transaction_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Transaction_Stream_Cursor_Value_Input = {
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Transaction_Sum_Fields = {
  __typename?: 'transaction_sum_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  net_operating_income?: Maybe<Scalars['numeric']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "transaction" */
export type Transaction_Sum_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** columns and relationships of "transaction_types" */
export type Transaction_Types = {
  __typename?: 'transaction_types';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "transaction_types" */
export type Transaction_Types_Aggregate = {
  __typename?: 'transaction_types_aggregate';
  aggregate?: Maybe<Transaction_Types_Aggregate_Fields>;
  nodes: Array<Transaction_Types>;
};

/** aggregate fields of "transaction_types" */
export type Transaction_Types_Aggregate_Fields = {
  __typename?: 'transaction_types_aggregate_fields';
  avg?: Maybe<Transaction_Types_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Transaction_Types_Max_Fields>;
  min?: Maybe<Transaction_Types_Min_Fields>;
  stddev?: Maybe<Transaction_Types_Stddev_Fields>;
  stddev_pop?: Maybe<Transaction_Types_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Transaction_Types_Stddev_Samp_Fields>;
  sum?: Maybe<Transaction_Types_Sum_Fields>;
  var_pop?: Maybe<Transaction_Types_Var_Pop_Fields>;
  var_samp?: Maybe<Transaction_Types_Var_Samp_Fields>;
  variance?: Maybe<Transaction_Types_Variance_Fields>;
};

/** aggregate fields of "transaction_types" */
export type Transaction_Types_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Transaction_Types_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Transaction_Types_Avg_Fields = {
  __typename?: 'transaction_types_avg_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "transaction_types". All fields are combined with a logical 'AND'. */
export type Transaction_Types_Bool_Exp = {
  _and?: Maybe<Array<Transaction_Types_Bool_Exp>>;
  _not?: Maybe<Transaction_Types_Bool_Exp>;
  _or?: Maybe<Array<Transaction_Types_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  order?: Maybe<Int_Comparison_Exp>;
  type?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Transaction_Types_Max_Fields = {
  __typename?: 'transaction_types_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Transaction_Types_Min_Fields = {
  __typename?: 'transaction_types_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "transaction_types". */
export type Transaction_Types_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  order?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "transaction_types" */
export enum Transaction_Types_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  Order = 'order',
  /** column name */
  Type = 'type',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Transaction_Types_Stddev_Fields = {
  __typename?: 'transaction_types_stddev_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Transaction_Types_Stddev_Pop_Fields = {
  __typename?: 'transaction_types_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Transaction_Types_Stddev_Samp_Fields = {
  __typename?: 'transaction_types_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "transaction_types" */
export type Transaction_Types_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Transaction_Types_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Transaction_Types_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Transaction_Types_Sum_Fields = {
  __typename?: 'transaction_types_sum_fields';
  id?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Transaction_Types_Var_Pop_Fields = {
  __typename?: 'transaction_types_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Transaction_Types_Var_Samp_Fields = {
  __typename?: 'transaction_types_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Transaction_Types_Variance_Fields = {
  __typename?: 'transaction_types_variance_fields';
  id?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Float']>;
};

/** update columns of table "transaction" */
export enum Transaction_Update_Column {
  /** column name */
  CommercialCapRate = 'commercial_cap_rate',
  /** column name */
  CommercialLeaseTypeId = 'commercial_lease_type_id',
  /** column name */
  CommercialOccupancyRate = 'commercial_occupancy_rate',
  /** column name */
  CommercialRentSquareFoot = 'commercial_rent_square_foot',
  /** column name */
  Concessions = 'concessions',
  /** column name */
  Condition = 'condition',
  /** column name */
  DataSources = 'data_sources',
  /** column name */
  DeedBook = 'deed_book',
  /** column name */
  DeedPage = 'deed_page',
  /** column name */
  GranteeId = 'grantee_id',
  /** column name */
  GrantorId = 'grantor_id',
  /** column name */
  Instrument = 'instrument',
  /** column name */
  LeaseDateEnd = 'lease_date_end',
  /** column name */
  LeaseDateStart = 'lease_date_start',
  /** column name */
  NetOperatingIncome = 'net_operating_income',
  /** column name */
  Notes = 'notes',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyInterestId = 'property_interest_id',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QualityOfConstruction = 'quality_of_construction',
  /** column name */
  ResidentialLeaseTypeId = 'residential_lease_type_id',
  /** column name */
  ResidentialMonthlyRent = 'residential_monthly_rent',
  /** column name */
  SaleDate = 'sale_date',
  /** column name */
  SalePrice = 'sale_price',
  /** column name */
  TenantId = 'tenant_id',
  /** column name */
  TransactionTypeId = 'transaction_type_id',
  /** column name */
  Url = 'url',
  /** column name */
  VerificationSources = 'verification_sources',
}

export type Transaction_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<Transaction_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<Transaction_Set_Input>;
  where: Transaction_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Transaction_Var_Pop_Fields = {
  __typename?: 'transaction_var_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  net_operating_income?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "transaction" */
export type Transaction_Var_Pop_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Transaction_Var_Samp_Fields = {
  __typename?: 'transaction_var_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  net_operating_income?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "transaction" */
export type Transaction_Var_Samp_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type Transaction_Variance_Fields = {
  __typename?: 'transaction_variance_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  net_operating_income?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "transaction" */
export type Transaction_Variance_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  net_operating_income?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
};

/** columns and relationships of "transactions" */
export type Transactions = {
  __typename?: 'transactions';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregated selection of "transactions" */
export type Transactions_Aggregate = {
  __typename?: 'transactions_aggregate';
  aggregate?: Maybe<Transactions_Aggregate_Fields>;
  nodes: Array<Transactions>;
};

/** aggregate fields of "transactions" */
export type Transactions_Aggregate_Fields = {
  __typename?: 'transactions_aggregate_fields';
  avg?: Maybe<Transactions_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Transactions_Max_Fields>;
  min?: Maybe<Transactions_Min_Fields>;
  stddev?: Maybe<Transactions_Stddev_Fields>;
  stddev_pop?: Maybe<Transactions_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Transactions_Stddev_Samp_Fields>;
  sum?: Maybe<Transactions_Sum_Fields>;
  var_pop?: Maybe<Transactions_Var_Pop_Fields>;
  var_samp?: Maybe<Transactions_Var_Samp_Fields>;
  variance?: Maybe<Transactions_Variance_Fields>;
};

/** aggregate fields of "transactions" */
export type Transactions_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Transactions_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Transactions_Avg_Fields = {
  __typename?: 'transactions_avg_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "transactions". All fields are combined with a logical 'AND'. */
export type Transactions_Bool_Exp = {
  _and?: Maybe<Array<Transactions_Bool_Exp>>;
  _not?: Maybe<Transactions_Bool_Exp>;
  _or?: Maybe<Array<Transactions_Bool_Exp>>;
  commercial_cap_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_lease_type?: Maybe<String_Comparison_Exp>;
  commercial_lease_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_occupancy_rate?: Maybe<Numeric_Comparison_Exp>;
  commercial_property_subtype?: Maybe<String_Comparison_Exp>;
  commercial_property_subtype_id?: Maybe<Int_Comparison_Exp>;
  commercial_property_type?: Maybe<String_Comparison_Exp>;
  commercial_property_type_id?: Maybe<Int_Comparison_Exp>;
  commercial_rent_square_foot?: Maybe<Numeric_Comparison_Exp>;
  concessions?: Maybe<String_Comparison_Exp>;
  condition?: Maybe<String_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  data_sources?: Maybe<String_Comparison_Exp>;
  deed_book?: Maybe<String_Comparison_Exp>;
  deed_page?: Maybe<String_Comparison_Exp>;
  grantee?: Maybe<String_Comparison_Exp>;
  grantee_id?: Maybe<Uuid_Comparison_Exp>;
  grantor?: Maybe<String_Comparison_Exp>;
  grantor_id?: Maybe<Uuid_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  instrument?: Maybe<String_Comparison_Exp>;
  lease_date_end?: Maybe<Timestamptz_Comparison_Exp>;
  lease_date_start?: Maybe<Timestamptz_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  parcel_number?: Maybe<String_Comparison_Exp>;
  property_id?: Maybe<Uuid_Comparison_Exp>;
  property_interest_id?: Maybe<Int_Comparison_Exp>;
  property_type?: Maybe<String_Comparison_Exp>;
  property_type_id?: Maybe<Int_Comparison_Exp>;
  quality_of_construction?: Maybe<String_Comparison_Exp>;
  residential_lease_type?: Maybe<String_Comparison_Exp>;
  residential_lease_type_id?: Maybe<Int_Comparison_Exp>;
  residential_monthly_rent?: Maybe<Numeric_Comparison_Exp>;
  residential_ownership_type?: Maybe<String_Comparison_Exp>;
  residential_ownership_type_id?: Maybe<Int_Comparison_Exp>;
  residential_style_id?: Maybe<Int_Comparison_Exp>;
  sale_date?: Maybe<Timestamptz_Comparison_Exp>;
  sale_price?: Maybe<Numeric_Comparison_Exp>;
  tenant?: Maybe<String_Comparison_Exp>;
  tenant_id?: Maybe<Uuid_Comparison_Exp>;
  transaction_type?: Maybe<String_Comparison_Exp>;
  transaction_type_id?: Maybe<Int_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  updated_by_user_account_id?: Maybe<Uuid_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  verification_sources?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type Transactions_Max_Fields = {
  __typename?: 'transactions_max_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Transactions_Min_Fields = {
  __typename?: 'transactions_min_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "transactions". */
export type Transactions_Order_By = {
  commercial_cap_rate?: Maybe<Order_By>;
  commercial_lease_type?: Maybe<Order_By>;
  commercial_lease_type_id?: Maybe<Order_By>;
  commercial_occupancy_rate?: Maybe<Order_By>;
  commercial_property_subtype?: Maybe<Order_By>;
  commercial_property_subtype_id?: Maybe<Order_By>;
  commercial_property_type?: Maybe<Order_By>;
  commercial_property_type_id?: Maybe<Order_By>;
  commercial_rent_square_foot?: Maybe<Order_By>;
  concessions?: Maybe<Order_By>;
  condition?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  data_sources?: Maybe<Order_By>;
  deed_book?: Maybe<Order_By>;
  deed_page?: Maybe<Order_By>;
  grantee?: Maybe<Order_By>;
  grantee_id?: Maybe<Order_By>;
  grantor?: Maybe<Order_By>;
  grantor_id?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  instrument?: Maybe<Order_By>;
  lease_date_end?: Maybe<Order_By>;
  lease_date_start?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  parcel_number?: Maybe<Order_By>;
  property_id?: Maybe<Order_By>;
  property_interest_id?: Maybe<Order_By>;
  property_type?: Maybe<Order_By>;
  property_type_id?: Maybe<Order_By>;
  quality_of_construction?: Maybe<Order_By>;
  residential_lease_type?: Maybe<Order_By>;
  residential_lease_type_id?: Maybe<Order_By>;
  residential_monthly_rent?: Maybe<Order_By>;
  residential_ownership_type?: Maybe<Order_By>;
  residential_ownership_type_id?: Maybe<Order_By>;
  residential_style_id?: Maybe<Order_By>;
  sale_date?: Maybe<Order_By>;
  sale_price?: Maybe<Order_By>;
  tenant?: Maybe<Order_By>;
  tenant_id?: Maybe<Order_By>;
  transaction_type?: Maybe<Order_By>;
  transaction_type_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  updated_by_user_account_id?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  verification_sources?: Maybe<Order_By>;
};

/** select columns of table "transactions" */
export enum Transactions_Select_Column {
  /** column name */
  CommercialCapRate = 'commercial_cap_rate',
  /** column name */
  CommercialLeaseType = 'commercial_lease_type',
  /** column name */
  CommercialLeaseTypeId = 'commercial_lease_type_id',
  /** column name */
  CommercialOccupancyRate = 'commercial_occupancy_rate',
  /** column name */
  CommercialPropertySubtype = 'commercial_property_subtype',
  /** column name */
  CommercialPropertySubtypeId = 'commercial_property_subtype_id',
  /** column name */
  CommercialPropertyType = 'commercial_property_type',
  /** column name */
  CommercialPropertyTypeId = 'commercial_property_type_id',
  /** column name */
  CommercialRentSquareFoot = 'commercial_rent_square_foot',
  /** column name */
  Concessions = 'concessions',
  /** column name */
  Condition = 'condition',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DataSources = 'data_sources',
  /** column name */
  DeedBook = 'deed_book',
  /** column name */
  DeedPage = 'deed_page',
  /** column name */
  Grantee = 'grantee',
  /** column name */
  GranteeId = 'grantee_id',
  /** column name */
  Grantor = 'grantor',
  /** column name */
  GrantorId = 'grantor_id',
  /** column name */
  Id = 'id',
  /** column name */
  Instrument = 'instrument',
  /** column name */
  LeaseDateEnd = 'lease_date_end',
  /** column name */
  LeaseDateStart = 'lease_date_start',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  ParcelNumber = 'parcel_number',
  /** column name */
  PropertyId = 'property_id',
  /** column name */
  PropertyInterestId = 'property_interest_id',
  /** column name */
  PropertyType = 'property_type',
  /** column name */
  PropertyTypeId = 'property_type_id',
  /** column name */
  QualityOfConstruction = 'quality_of_construction',
  /** column name */
  ResidentialLeaseType = 'residential_lease_type',
  /** column name */
  ResidentialLeaseTypeId = 'residential_lease_type_id',
  /** column name */
  ResidentialMonthlyRent = 'residential_monthly_rent',
  /** column name */
  ResidentialOwnershipType = 'residential_ownership_type',
  /** column name */
  ResidentialOwnershipTypeId = 'residential_ownership_type_id',
  /** column name */
  ResidentialStyleId = 'residential_style_id',
  /** column name */
  SaleDate = 'sale_date',
  /** column name */
  SalePrice = 'sale_price',
  /** column name */
  Tenant = 'tenant',
  /** column name */
  TenantId = 'tenant_id',
  /** column name */
  TransactionType = 'transaction_type',
  /** column name */
  TransactionTypeId = 'transaction_type_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UpdatedByUserAccountId = 'updated_by_user_account_id',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  VerificationSources = 'verification_sources',
}

/** aggregate stddev on columns */
export type Transactions_Stddev_Fields = {
  __typename?: 'transactions_stddev_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Transactions_Stddev_Pop_Fields = {
  __typename?: 'transactions_stddev_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Transactions_Stddev_Samp_Fields = {
  __typename?: 'transactions_stddev_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "transactions" */
export type Transactions_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Transactions_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Transactions_Stream_Cursor_Value_Input = {
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type?: Maybe<Scalars['String']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype?: Maybe<Scalars['String']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type?: Maybe<Scalars['String']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  concessions?: Maybe<Scalars['String']>;
  condition?: Maybe<Scalars['String']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  data_sources?: Maybe<Scalars['String']>;
  deed_book?: Maybe<Scalars['String']>;
  deed_page?: Maybe<Scalars['String']>;
  grantee?: Maybe<Scalars['String']>;
  grantee_id?: Maybe<Scalars['uuid']>;
  grantor?: Maybe<Scalars['String']>;
  grantor_id?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  instrument?: Maybe<Scalars['String']>;
  lease_date_end?: Maybe<Scalars['timestamptz']>;
  lease_date_start?: Maybe<Scalars['timestamptz']>;
  location_address?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  parcel_number?: Maybe<Scalars['String']>;
  property_id?: Maybe<Scalars['uuid']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type?: Maybe<Scalars['String']>;
  property_type_id?: Maybe<Scalars['Int']>;
  quality_of_construction?: Maybe<Scalars['String']>;
  residential_lease_type?: Maybe<Scalars['String']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type?: Maybe<Scalars['String']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_date?: Maybe<Scalars['timestamptz']>;
  sale_price?: Maybe<Scalars['numeric']>;
  tenant?: Maybe<Scalars['String']>;
  tenant_id?: Maybe<Scalars['uuid']>;
  transaction_type?: Maybe<Scalars['String']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  updated_by_user_account_id?: Maybe<Scalars['uuid']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  verification_sources?: Maybe<Scalars['String']>;
};

/** aggregate sum on columns */
export type Transactions_Sum_Fields = {
  __typename?: 'transactions_sum_fields';
  commercial_cap_rate?: Maybe<Scalars['numeric']>;
  commercial_lease_type_id?: Maybe<Scalars['Int']>;
  commercial_occupancy_rate?: Maybe<Scalars['numeric']>;
  commercial_property_subtype_id?: Maybe<Scalars['Int']>;
  commercial_property_type_id?: Maybe<Scalars['Int']>;
  commercial_rent_square_foot?: Maybe<Scalars['numeric']>;
  property_interest_id?: Maybe<Scalars['Int']>;
  property_type_id?: Maybe<Scalars['Int']>;
  residential_lease_type_id?: Maybe<Scalars['Int']>;
  residential_monthly_rent?: Maybe<Scalars['numeric']>;
  residential_ownership_type_id?: Maybe<Scalars['Int']>;
  residential_style_id?: Maybe<Scalars['Int']>;
  sale_price?: Maybe<Scalars['numeric']>;
  transaction_type_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Transactions_Var_Pop_Fields = {
  __typename?: 'transactions_var_pop_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Transactions_Var_Samp_Fields = {
  __typename?: 'transactions_var_samp_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Transactions_Variance_Fields = {
  __typename?: 'transactions_variance_fields';
  commercial_cap_rate?: Maybe<Scalars['Float']>;
  commercial_lease_type_id?: Maybe<Scalars['Float']>;
  commercial_occupancy_rate?: Maybe<Scalars['Float']>;
  commercial_property_subtype_id?: Maybe<Scalars['Float']>;
  commercial_property_type_id?: Maybe<Scalars['Float']>;
  commercial_rent_square_foot?: Maybe<Scalars['Float']>;
  property_interest_id?: Maybe<Scalars['Float']>;
  property_type_id?: Maybe<Scalars['Float']>;
  residential_lease_type_id?: Maybe<Scalars['Float']>;
  residential_monthly_rent?: Maybe<Scalars['Float']>;
  residential_ownership_type_id?: Maybe<Scalars['Float']>;
  residential_style_id?: Maybe<Scalars['Float']>;
  sale_price?: Maybe<Scalars['Float']>;
  transaction_type_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "us_states" */
export type Us_States = {
  __typename?: 'us_states';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  state_long?: Maybe<Scalars['String']>;
  state_short?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "us_states" */
export type Us_States_Aggregate = {
  __typename?: 'us_states_aggregate';
  aggregate?: Maybe<Us_States_Aggregate_Fields>;
  nodes: Array<Us_States>;
};

/** aggregate fields of "us_states" */
export type Us_States_Aggregate_Fields = {
  __typename?: 'us_states_aggregate_fields';
  avg?: Maybe<Us_States_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Us_States_Max_Fields>;
  min?: Maybe<Us_States_Min_Fields>;
  stddev?: Maybe<Us_States_Stddev_Fields>;
  stddev_pop?: Maybe<Us_States_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Us_States_Stddev_Samp_Fields>;
  sum?: Maybe<Us_States_Sum_Fields>;
  var_pop?: Maybe<Us_States_Var_Pop_Fields>;
  var_samp?: Maybe<Us_States_Var_Samp_Fields>;
  variance?: Maybe<Us_States_Variance_Fields>;
};

/** aggregate fields of "us_states" */
export type Us_States_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<Us_States_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type Us_States_Avg_Fields = {
  __typename?: 'us_states_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "us_states". All fields are combined with a logical 'AND'. */
export type Us_States_Bool_Exp = {
  _and?: Maybe<Array<Us_States_Bool_Exp>>;
  _not?: Maybe<Us_States_Bool_Exp>;
  _or?: Maybe<Array<Us_States_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  state?: Maybe<String_Comparison_Exp>;
  state_long?: Maybe<String_Comparison_Exp>;
  state_short?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type Us_States_Max_Fields = {
  __typename?: 'us_states_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  state_long?: Maybe<Scalars['String']>;
  state_short?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type Us_States_Min_Fields = {
  __typename?: 'us_states_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  state_long?: Maybe<Scalars['String']>;
  state_short?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "us_states". */
export type Us_States_Order_By = {
  created_at?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  state?: Maybe<Order_By>;
  state_long?: Maybe<Order_By>;
  state_short?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "us_states" */
export enum Us_States_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Id = 'id',
  /** column name */
  State = 'state',
  /** column name */
  StateLong = 'state_long',
  /** column name */
  StateShort = 'state_short',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type Us_States_Stddev_Fields = {
  __typename?: 'us_states_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type Us_States_Stddev_Pop_Fields = {
  __typename?: 'us_states_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type Us_States_Stddev_Samp_Fields = {
  __typename?: 'us_states_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "us_states" */
export type Us_States_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Us_States_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Us_States_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  id?: Maybe<Scalars['Int']>;
  state?: Maybe<Scalars['String']>;
  state_long?: Maybe<Scalars['String']>;
  state_short?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type Us_States_Sum_Fields = {
  __typename?: 'us_states_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type Us_States_Var_Pop_Fields = {
  __typename?: 'us_states_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type Us_States_Var_Samp_Fields = {
  __typename?: 'us_states_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type Us_States_Variance_Fields = {
  __typename?: 'us_states_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "user_account" */
export type User_Account = {
  __typename?: 'user_account';
  /** An array relationship */
  appraisal_commissions: Array<Appraisal_Commission>;
  /** An aggregate relationship */
  appraisal_commissions_aggregate: Appraisal_Commission_Aggregate;
  /** An array relationship */
  appraisals: Array<Appraisal>;
  /** An aggregate relationship */
  appraisals_aggregate: Appraisal_Aggregate;
  appraisals_count: Scalars['Int'];
  created_at: Scalars['timestamptz'];
  email?: Maybe<Scalars['String']>;
  enabled: Scalars['Boolean'];
  id: Scalars['uuid'];
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  user_preference_notification?: Maybe<User_Preference_Notification>;
  /** An object relationship */
  user_profile?: Maybe<User_Profile>;
  /** An object relationship */
  user_profiles?: Maybe<User_Profiles>;
  /** An object relationship */
  user_role: User_Role;
  user_role_id: Scalars['Int'];
  verified: Scalars['Boolean'];
  verified_at?: Maybe<Scalars['timestamptz']>;
};

/** columns and relationships of "user_account" */
export type User_AccountAppraisal_CommissionsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Order_By>>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

/** columns and relationships of "user_account" */
export type User_AccountAppraisal_Commissions_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Commission_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Commission_Order_By>>;
  where?: Maybe<Appraisal_Commission_Bool_Exp>;
};

/** columns and relationships of "user_account" */
export type User_AccountAppraisalsArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** columns and relationships of "user_account" */
export type User_AccountAppraisals_AggregateArgs = {
  distinct_on?: Maybe<Array<Appraisal_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<Appraisal_Order_By>>;
  where?: Maybe<Appraisal_Bool_Exp>;
};

/** aggregated selection of "user_account" */
export type User_Account_Aggregate = {
  __typename?: 'user_account_aggregate';
  aggregate?: Maybe<User_Account_Aggregate_Fields>;
  nodes: Array<User_Account>;
};

/** aggregate fields of "user_account" */
export type User_Account_Aggregate_Fields = {
  __typename?: 'user_account_aggregate_fields';
  avg?: Maybe<User_Account_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<User_Account_Max_Fields>;
  min?: Maybe<User_Account_Min_Fields>;
  stddev?: Maybe<User_Account_Stddev_Fields>;
  stddev_pop?: Maybe<User_Account_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<User_Account_Stddev_Samp_Fields>;
  sum?: Maybe<User_Account_Sum_Fields>;
  var_pop?: Maybe<User_Account_Var_Pop_Fields>;
  var_samp?: Maybe<User_Account_Var_Samp_Fields>;
  variance?: Maybe<User_Account_Variance_Fields>;
};

/** aggregate fields of "user_account" */
export type User_Account_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Account_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "user_account" */
export type User_Account_Aggregate_Order_By = {
  avg?: Maybe<User_Account_Avg_Order_By>;
  count?: Maybe<Order_By>;
  max?: Maybe<User_Account_Max_Order_By>;
  min?: Maybe<User_Account_Min_Order_By>;
  stddev?: Maybe<User_Account_Stddev_Order_By>;
  stddev_pop?: Maybe<User_Account_Stddev_Pop_Order_By>;
  stddev_samp?: Maybe<User_Account_Stddev_Samp_Order_By>;
  sum?: Maybe<User_Account_Sum_Order_By>;
  var_pop?: Maybe<User_Account_Var_Pop_Order_By>;
  var_samp?: Maybe<User_Account_Var_Samp_Order_By>;
  variance?: Maybe<User_Account_Variance_Order_By>;
};

/** aggregate avg on columns */
export type User_Account_Avg_Fields = {
  __typename?: 'user_account_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "user_account" */
export type User_Account_Avg_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** Boolean expression to filter rows from the table "user_account". All fields are combined with a logical 'AND'. */
export type User_Account_Bool_Exp = {
  _and?: Maybe<Array<User_Account_Bool_Exp>>;
  _not?: Maybe<User_Account_Bool_Exp>;
  _or?: Maybe<Array<User_Account_Bool_Exp>>;
  appraisal_commissions?: Maybe<Appraisal_Commission_Bool_Exp>;
  appraisals?: Maybe<Appraisal_Bool_Exp>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  enabled?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_preference_notification?: Maybe<User_Preference_Notification_Bool_Exp>;
  user_profile?: Maybe<User_Profile_Bool_Exp>;
  user_profiles?: Maybe<User_Profiles_Bool_Exp>;
  user_role?: Maybe<User_Role_Bool_Exp>;
  user_role_id?: Maybe<Int_Comparison_Exp>;
  verified?: Maybe<Boolean_Comparison_Exp>;
  verified_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** unique or primary key constraints on table "user_account" */
export enum User_Account_Constraint {
  /** unique or primary key constraint on columns "email" */
  UserAccountEmailKey = 'user_account_email_key',
  /** unique or primary key constraint on columns "id" */
  UserAccountPkey = 'user_account_pkey',
}

/** input type for incrementing numeric columns in table "user_account" */
export type User_Account_Inc_Input = {
  user_role_id?: Maybe<Scalars['Int']>;
};

/** input type for inserting data into table "user_account" */
export type User_Account_Insert_Input = {
  appraisal_commissions?: Maybe<Appraisal_Commission_Arr_Rel_Insert_Input>;
  appraisals?: Maybe<Appraisal_Arr_Rel_Insert_Input>;
  cleartext_password?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  user_profile?: Maybe<User_Profile_Obj_Rel_Insert_Input>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate max on columns */
export type User_Account_Max_Fields = {
  __typename?: 'user_account_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_role_id?: Maybe<Scalars['Int']>;
  verified_at?: Maybe<Scalars['timestamptz']>;
};

/** order by max() on columns of table "user_account" */
export type User_Account_Max_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
  verified_at?: Maybe<Order_By>;
};

/** aggregate min on columns */
export type User_Account_Min_Fields = {
  __typename?: 'user_account_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_role_id?: Maybe<Scalars['Int']>;
  verified_at?: Maybe<Scalars['timestamptz']>;
};

/** order by min() on columns of table "user_account" */
export type User_Account_Min_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
  verified_at?: Maybe<Order_By>;
};

/** response of any mutation on the table "user_account" */
export type User_Account_Mutation_Response = {
  __typename?: 'user_account_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<User_Account>;
};

/** input type for inserting object relation for remote table "user_account" */
export type User_Account_Obj_Rel_Insert_Input = {
  data: User_Account_Insert_Input;
  /** upsert condition */
  on_conflict?: Maybe<User_Account_On_Conflict>;
};

/** on_conflict condition type for table "user_account" */
export type User_Account_On_Conflict = {
  constraint: User_Account_Constraint;
  update_columns: Array<User_Account_Update_Column>;
  where?: Maybe<User_Account_Bool_Exp>;
};

/** Ordering options when selecting data from "user_account". */
export type User_Account_Order_By = {
  appraisal_commissions_aggregate?: Maybe<Appraisal_Commission_Aggregate_Order_By>;
  appraisals_aggregate?: Maybe<Appraisal_Aggregate_Order_By>;
  appraisals_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  enabled?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_preference_notification?: Maybe<User_Preference_Notification_Order_By>;
  user_profile?: Maybe<User_Profile_Order_By>;
  user_profiles?: Maybe<User_Profiles_Order_By>;
  user_role?: Maybe<User_Role_Order_By>;
  user_role_id?: Maybe<Order_By>;
  verified?: Maybe<Order_By>;
  verified_at?: Maybe<Order_By>;
};

/** primary key columns input for table: user_account */
export type User_Account_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "user_account" */
export enum User_Account_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Email = 'email',
  /** column name */
  Enabled = 'enabled',
  /** column name */
  Id = 'id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserRoleId = 'user_role_id',
  /** column name */
  Verified = 'verified',
  /** column name */
  VerifiedAt = 'verified_at',
}

/** input type for updating data in table "user_account" */
export type User_Account_Set_Input = {
  cleartext_password?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate stddev on columns */
export type User_Account_Stddev_Fields = {
  __typename?: 'user_account_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "user_account" */
export type User_Account_Stddev_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type User_Account_Stddev_Pop_Fields = {
  __typename?: 'user_account_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "user_account" */
export type User_Account_Stddev_Pop_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type User_Account_Stddev_Samp_Fields = {
  __typename?: 'user_account_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "user_account" */
export type User_Account_Stddev_Samp_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** Streaming cursor of the table "user_account" */
export type User_Account_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Account_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Account_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  email?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_role_id?: Maybe<Scalars['Int']>;
  verified?: Maybe<Scalars['Boolean']>;
  verified_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type User_Account_Sum_Fields = {
  __typename?: 'user_account_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** order by sum() on columns of table "user_account" */
export type User_Account_Sum_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** update columns of table "user_account" */
export enum User_Account_Update_Column {
  /** column name */
  CleartextPassword = 'cleartext_password',
  /** column name */
  Email = 'email',
  /** column name */
  Enabled = 'enabled',
  /** column name */
  UserRoleId = 'user_role_id',
}

export type User_Account_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: Maybe<User_Account_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<User_Account_Set_Input>;
  where: User_Account_Bool_Exp;
};

/** aggregate var_pop on columns */
export type User_Account_Var_Pop_Fields = {
  __typename?: 'user_account_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "user_account" */
export type User_Account_Var_Pop_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** aggregate var_samp on columns */
export type User_Account_Var_Samp_Fields = {
  __typename?: 'user_account_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "user_account" */
export type User_Account_Var_Samp_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** aggregate variance on columns */
export type User_Account_Variance_Fields = {
  __typename?: 'user_account_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "user_account" */
export type User_Account_Variance_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** columns and relationships of "user_preference_notification" */
export type User_Preference_Notification = {
  __typename?: 'user_preference_notification';
  created_at: Scalars['timestamptz'];
  email_assigned: Scalars['Boolean'];
  email_daily_agenda: Scalars['Boolean'];
  email_message_thread: Scalars['Boolean'];
  email_order_forward: Scalars['Boolean'];
  id: Scalars['uuid'];
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  updated_at: Scalars['timestamptz'];
  /** An object relationship */
  user_account: User_Account;
  user_account_id: Scalars['uuid'];
};

/**
 * Boolean expression to filter rows from the table "user_preference_notification".
 * All fields are combined with a logical 'AND'.
 */
export type User_Preference_Notification_Bool_Exp = {
  _and?: Maybe<Array<User_Preference_Notification_Bool_Exp>>;
  _not?: Maybe<User_Preference_Notification_Bool_Exp>;
  _or?: Maybe<Array<User_Preference_Notification_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  email_assigned?: Maybe<Boolean_Comparison_Exp>;
  email_daily_agenda?: Maybe<Boolean_Comparison_Exp>;
  email_message_thread?: Maybe<Boolean_Comparison_Exp>;
  email_order_forward?: Maybe<Boolean_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_account?: Maybe<User_Account_Bool_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** response of any mutation on the table "user_preference_notification" */
export type User_Preference_Notification_Mutation_Response = {
  __typename?: 'user_preference_notification_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<User_Preference_Notification>;
};

/** Ordering options when selecting data from "user_preference_notification". */
export type User_Preference_Notification_Order_By = {
  created_at?: Maybe<Order_By>;
  email_assigned?: Maybe<Order_By>;
  email_daily_agenda?: Maybe<Order_By>;
  email_message_thread?: Maybe<Order_By>;
  email_order_forward?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_account?: Maybe<User_Account_Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: user_preference_notification */
export type User_Preference_Notification_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "user_preference_notification" */
export enum User_Preference_Notification_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  EmailAssigned = 'email_assigned',
  /** column name */
  EmailDailyAgenda = 'email_daily_agenda',
  /** column name */
  EmailMessageThread = 'email_message_thread',
  /** column name */
  EmailOrderForward = 'email_order_forward',
  /** column name */
  Id = 'id',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "user_preference_notification" */
export type User_Preference_Notification_Set_Input = {
  email_assigned?: Maybe<Scalars['Boolean']>;
  email_daily_agenda?: Maybe<Scalars['Boolean']>;
  email_message_thread?: Maybe<Scalars['Boolean']>;
  email_order_forward?: Maybe<Scalars['Boolean']>;
};

/** Streaming cursor of the table "user_preference_notification" */
export type User_Preference_Notification_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Preference_Notification_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Preference_Notification_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  email_assigned?: Maybe<Scalars['Boolean']>;
  email_daily_agenda?: Maybe<Scalars['Boolean']>;
  email_message_thread?: Maybe<Scalars['Boolean']>;
  email_order_forward?: Maybe<Scalars['Boolean']>;
  id?: Maybe<Scalars['uuid']>;
  organization_id?: Maybe<Scalars['uuid']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

export type User_Preference_Notification_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<User_Preference_Notification_Set_Input>;
  where: User_Preference_Notification_Bool_Exp;
};

/** columns and relationships of "user_profile" */
export type User_Profile = {
  __typename?: 'user_profile';
  created_at: Scalars['timestamptz'];
  first_name?: Maybe<Scalars['String']>;
  id: Scalars['uuid'];
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  /** An object relationship */
  organization: Organization;
  organization_id: Scalars['uuid'];
  phone_number?: Maybe<Scalars['String']>;
  updated_at: Scalars['timestamptz'];
  url?: Maybe<Scalars['String']>;
  /** An object relationship */
  user_account: User_Account;
  user_account_id: Scalars['uuid'];
};

/** columns and relationships of "user_profile" */
export type User_ProfileLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_Activities = {
  __typename?: 'user_profile_activities';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_assignee_ids?: Maybe<Scalars['jsonb']>;
  appraisal_assignees?: Maybe<Scalars['jsonb']>;
  appraisal_contact_ids?: Maybe<Scalars['jsonb']>;
  appraisal_contacts?: Maybe<Scalars['json']>;
  appraisal_dates?: Maybe<Scalars['jsonb']>;
  appraisal_fees?: Maybe<Scalars['jsonb']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  changes?: Maybe<Scalars['jsonb']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesAppraisal_Assignee_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesAppraisal_AssigneesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesAppraisal_Contact_IdsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesAppraisal_ContactsArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesAppraisal_DatesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesAppraisal_FeesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesChangesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** columns and relationships of "user_profile_activities" */
export type User_Profile_ActivitiesNotesArgs = {
  path?: Maybe<Scalars['String']>;
};

/** aggregated selection of "user_profile_activities" */
export type User_Profile_Activities_Aggregate = {
  __typename?: 'user_profile_activities_aggregate';
  aggregate?: Maybe<User_Profile_Activities_Aggregate_Fields>;
  nodes: Array<User_Profile_Activities>;
};

/** aggregate fields of "user_profile_activities" */
export type User_Profile_Activities_Aggregate_Fields = {
  __typename?: 'user_profile_activities_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<User_Profile_Activities_Max_Fields>;
  min?: Maybe<User_Profile_Activities_Min_Fields>;
};

/** aggregate fields of "user_profile_activities" */
export type User_Profile_Activities_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Profile_Activities_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "user_profile_activities". All fields are combined with a logical 'AND'. */
export type User_Profile_Activities_Bool_Exp = {
  _and?: Maybe<Array<User_Profile_Activities_Bool_Exp>>;
  _not?: Maybe<User_Profile_Activities_Bool_Exp>;
  _or?: Maybe<Array<User_Profile_Activities_Bool_Exp>>;
  activity?: Maybe<String_Comparison_Exp>;
  activity_id?: Maybe<Uuid_Comparison_Exp>;
  appraisal_assignee_ids?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_assignees?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_contact_ids?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_contacts?: Maybe<Json_Comparison_Exp>;
  appraisal_dates?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_fees?: Maybe<Jsonb_Comparison_Exp>;
  appraisal_file_number?: Maybe<String_Comparison_Exp>;
  appraisal_location_address?: Maybe<String_Comparison_Exp>;
  appraisal_status?: Maybe<String_Comparison_Exp>;
  changes?: Maybe<Jsonb_Comparison_Exp>;
  client_name?: Maybe<String_Comparison_Exp>;
  commit_timestamp?: Maybe<Timestamptz_Comparison_Exp>;
  contact_name?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<Jsonb_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  timestamp_group_by?: Maybe<Timestamptz_Comparison_Exp>;
  type?: Maybe<Activity_Type_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_account_name?: Maybe<String_Comparison_Exp>;
};

/** aggregate max on columns */
export type User_Profile_Activities_Max_Fields = {
  __typename?: 'user_profile_activities_max_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type User_Profile_Activities_Min_Fields = {
  __typename?: 'user_profile_activities_min_fields';
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_name?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** Ordering options when selecting data from "user_profile_activities". */
export type User_Profile_Activities_Order_By = {
  activity?: Maybe<Order_By>;
  activity_id?: Maybe<Order_By>;
  appraisal_assignee_ids?: Maybe<Order_By>;
  appraisal_assignees?: Maybe<Order_By>;
  appraisal_contact_ids?: Maybe<Order_By>;
  appraisal_contacts?: Maybe<Order_By>;
  appraisal_dates?: Maybe<Order_By>;
  appraisal_fees?: Maybe<Order_By>;
  appraisal_file_number?: Maybe<Order_By>;
  appraisal_location_address?: Maybe<Order_By>;
  appraisal_status?: Maybe<Order_By>;
  changes?: Maybe<Order_By>;
  client_name?: Maybe<Order_By>;
  commit_timestamp?: Maybe<Order_By>;
  contact_name?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  timestamp_group_by?: Maybe<Order_By>;
  type?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_account_name?: Maybe<Order_By>;
};

/** select columns of table "user_profile_activities" */
export enum User_Profile_Activities_Select_Column {
  /** column name */
  Activity = 'activity',
  /** column name */
  ActivityId = 'activity_id',
  /** column name */
  AppraisalAssigneeIds = 'appraisal_assignee_ids',
  /** column name */
  AppraisalAssignees = 'appraisal_assignees',
  /** column name */
  AppraisalContactIds = 'appraisal_contact_ids',
  /** column name */
  AppraisalContacts = 'appraisal_contacts',
  /** column name */
  AppraisalDates = 'appraisal_dates',
  /** column name */
  AppraisalFees = 'appraisal_fees',
  /** column name */
  AppraisalFileNumber = 'appraisal_file_number',
  /** column name */
  AppraisalLocationAddress = 'appraisal_location_address',
  /** column name */
  AppraisalStatus = 'appraisal_status',
  /** column name */
  Changes = 'changes',
  /** column name */
  ClientName = 'client_name',
  /** column name */
  CommitTimestamp = 'commit_timestamp',
  /** column name */
  ContactName = 'contact_name',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  TimestampGroupBy = 'timestamp_group_by',
  /** column name */
  Type = 'type',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  UserAccountName = 'user_account_name',
}

/** Streaming cursor of the table "user_profile_activities" */
export type User_Profile_Activities_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Profile_Activities_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Profile_Activities_Stream_Cursor_Value_Input = {
  activity?: Maybe<Scalars['String']>;
  activity_id?: Maybe<Scalars['uuid']>;
  appraisal_assignee_ids?: Maybe<Scalars['jsonb']>;
  appraisal_assignees?: Maybe<Scalars['jsonb']>;
  appraisal_contact_ids?: Maybe<Scalars['jsonb']>;
  appraisal_contacts?: Maybe<Scalars['json']>;
  appraisal_dates?: Maybe<Scalars['jsonb']>;
  appraisal_fees?: Maybe<Scalars['jsonb']>;
  appraisal_file_number?: Maybe<Scalars['String']>;
  appraisal_location_address?: Maybe<Scalars['String']>;
  appraisal_status?: Maybe<Scalars['String']>;
  changes?: Maybe<Scalars['jsonb']>;
  client_name?: Maybe<Scalars['String']>;
  commit_timestamp?: Maybe<Scalars['timestamptz']>;
  contact_name?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['jsonb']>;
  organization_id?: Maybe<Scalars['uuid']>;
  timestamp_group_by?: Maybe<Scalars['timestamptz']>;
  type?: Maybe<Scalars['activity_type']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_account_name?: Maybe<Scalars['String']>;
};

/** append existing jsonb value of filtered columns with new jsonb value */
export type User_Profile_Append_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** Boolean expression to filter rows from the table "user_profile". All fields are combined with a logical 'AND'. */
export type User_Profile_Bool_Exp = {
  _and?: Maybe<Array<User_Profile_Bool_Exp>>;
  _not?: Maybe<User_Profile_Bool_Exp>;
  _or?: Maybe<Array<User_Profile_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  first_name?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  last_name?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization?: Maybe<Organization_Bool_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  phone_number?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account?: Maybe<User_Account_Bool_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "user_profile" */
export enum User_Profile_Constraint {
  /** unique or primary key constraint on columns "id" */
  UserProfilePkey = 'user_profile_pkey',
  /** unique or primary key constraint on columns "user_account_id" */
  UserProfileUserAccountIdKey = 'user_profile_user_account_id_key',
}

/** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
export type User_Profile_Delete_At_Path_Input = {
  location_components?: Maybe<Array<Scalars['String']>>;
};

/**
 * delete the array element with specified index (negative integers count from the
 * end). throws an error if top level container is not an array
 */
export type User_Profile_Delete_Elem_Input = {
  location_components?: Maybe<Scalars['Int']>;
};

/** delete key/value pair or string element. key/value pairs are matched based on their key value */
export type User_Profile_Delete_Key_Input = {
  location_components?: Maybe<Scalars['String']>;
};

/** input type for inserting data into table "user_profile" */
export type User_Profile_Insert_Input = {
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  user_account?: Maybe<User_Account_Obj_Rel_Insert_Input>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** response of any mutation on the table "user_profile" */
export type User_Profile_Mutation_Response = {
  __typename?: 'user_profile_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<User_Profile>;
};

/** input type for inserting object relation for remote table "user_profile" */
export type User_Profile_Obj_Rel_Insert_Input = {
  data: User_Profile_Insert_Input;
  /** upsert condition */
  on_conflict?: Maybe<User_Profile_On_Conflict>;
};

/** on_conflict condition type for table "user_profile" */
export type User_Profile_On_Conflict = {
  constraint: User_Profile_Constraint;
  update_columns: Array<User_Profile_Update_Column>;
  where?: Maybe<User_Profile_Bool_Exp>;
};

/** Ordering options when selecting data from "user_profile". */
export type User_Profile_Order_By = {
  created_at?: Maybe<Order_By>;
  first_name?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_name?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization?: Maybe<Organization_Order_By>;
  organization_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account?: Maybe<User_Account_Order_By>;
  user_account_id?: Maybe<Order_By>;
};

/** primary key columns input for table: user_profile */
export type User_Profile_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** prepend existing jsonb value of filtered columns with new jsonb value */
export type User_Profile_Prepend_Input = {
  location_components?: Maybe<Scalars['jsonb']>;
};

/** select columns of table "user_profile" */
export enum User_Profile_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  FirstName = 'first_name',
  /** column name */
  Id = 'id',
  /** column name */
  LastName = 'last_name',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
}

/** input type for updating data in table "user_profile" */
export type User_Profile_Set_Input = {
  first_name?: Maybe<Scalars['String']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  phone_number?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** Streaming cursor of the table "user_profile" */
export type User_Profile_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Profile_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Profile_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  first_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
};

/** update columns of table "user_profile" */
export enum User_Profile_Update_Column {
  /** column name */
  FirstName = 'first_name',
  /** column name */
  LastName = 'last_name',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  Url = 'url',
}

export type User_Profile_Updates = {
  /** append existing jsonb value of filtered columns with new jsonb value */
  _append?: Maybe<User_Profile_Append_Input>;
  /** delete the field or element with specified path (for JSON arrays, negative integers count from the end) */
  _delete_at_path?: Maybe<User_Profile_Delete_At_Path_Input>;
  /**
   * delete the array element with specified index (negative integers count from
   * the end). throws an error if top level container is not an array
   */
  _delete_elem?: Maybe<User_Profile_Delete_Elem_Input>;
  /** delete key/value pair or string element. key/value pairs are matched based on their key value */
  _delete_key?: Maybe<User_Profile_Delete_Key_Input>;
  /** prepend existing jsonb value of filtered columns with new jsonb value */
  _prepend?: Maybe<User_Profile_Prepend_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: Maybe<User_Profile_Set_Input>;
  where: User_Profile_Bool_Exp;
};

/** columns and relationships of "user_profiles" */
export type User_Profiles = {
  __typename?: 'user_profiles';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_active_at?: Maybe<Scalars['timestamptz']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** columns and relationships of "user_profiles" */
export type User_ProfilesLocation_ComponentsArgs = {
  path?: Maybe<Scalars['String']>;
};

export type User_Profiles_Aggregate = {
  __typename?: 'user_profiles_aggregate';
  aggregate?: Maybe<User_Profiles_Aggregate_Fields>;
  nodes: Array<User_Profiles>;
};

/** aggregate fields of "user_profiles" */
export type User_Profiles_Aggregate_Fields = {
  __typename?: 'user_profiles_aggregate_fields';
  avg?: Maybe<User_Profiles_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<User_Profiles_Max_Fields>;
  min?: Maybe<User_Profiles_Min_Fields>;
  stddev?: Maybe<User_Profiles_Stddev_Fields>;
  stddev_pop?: Maybe<User_Profiles_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<User_Profiles_Stddev_Samp_Fields>;
  sum?: Maybe<User_Profiles_Sum_Fields>;
  var_pop?: Maybe<User_Profiles_Var_Pop_Fields>;
  var_samp?: Maybe<User_Profiles_Var_Samp_Fields>;
  variance?: Maybe<User_Profiles_Variance_Fields>;
};

/** aggregate fields of "user_profiles" */
export type User_Profiles_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Profiles_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type User_Profiles_Avg_Fields = {
  __typename?: 'user_profiles_avg_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "user_profiles". All fields are combined with a logical 'AND'. */
export type User_Profiles_Bool_Exp = {
  _and?: Maybe<Array<User_Profiles_Bool_Exp>>;
  _not?: Maybe<User_Profiles_Bool_Exp>;
  _or?: Maybe<Array<User_Profiles_Bool_Exp>>;
  appraisals_count?: Maybe<Int_Comparison_Exp>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  default_role?: Maybe<String_Comparison_Exp>;
  email?: Maybe<String_Comparison_Exp>;
  enabled?: Maybe<Boolean_Comparison_Exp>;
  first_name?: Maybe<String_Comparison_Exp>;
  full_name?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Uuid_Comparison_Exp>;
  last_active_at?: Maybe<Timestamptz_Comparison_Exp>;
  last_name?: Maybe<String_Comparison_Exp>;
  location_address?: Maybe<String_Comparison_Exp>;
  location_city?: Maybe<String_Comparison_Exp>;
  location_components?: Maybe<Jsonb_Comparison_Exp>;
  location_county?: Maybe<String_Comparison_Exp>;
  location_geography?: Maybe<Geography_Comparison_Exp>;
  location_postal_code?: Maybe<String_Comparison_Exp>;
  location_state?: Maybe<String_Comparison_Exp>;
  notes?: Maybe<String_Comparison_Exp>;
  organization_id?: Maybe<Uuid_Comparison_Exp>;
  phone_number?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  url?: Maybe<String_Comparison_Exp>;
  user_account_id?: Maybe<Uuid_Comparison_Exp>;
  user_role_id?: Maybe<Int_Comparison_Exp>;
};

/** aggregate max on columns */
export type User_Profiles_Max_Fields = {
  __typename?: 'user_profiles_max_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_active_at?: Maybe<Scalars['timestamptz']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate min on columns */
export type User_Profiles_Min_Fields = {
  __typename?: 'user_profiles_min_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_active_at?: Maybe<Scalars['timestamptz']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_county?: Maybe<Scalars['String']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** Ordering options when selecting data from "user_profiles". */
export type User_Profiles_Order_By = {
  appraisals_count?: Maybe<Order_By>;
  created_at?: Maybe<Order_By>;
  default_role?: Maybe<Order_By>;
  email?: Maybe<Order_By>;
  enabled?: Maybe<Order_By>;
  first_name?: Maybe<Order_By>;
  full_name?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  last_active_at?: Maybe<Order_By>;
  last_name?: Maybe<Order_By>;
  location_address?: Maybe<Order_By>;
  location_city?: Maybe<Order_By>;
  location_components?: Maybe<Order_By>;
  location_county?: Maybe<Order_By>;
  location_geography?: Maybe<Order_By>;
  location_postal_code?: Maybe<Order_By>;
  location_state?: Maybe<Order_By>;
  notes?: Maybe<Order_By>;
  organization_id?: Maybe<Order_By>;
  phone_number?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  url?: Maybe<Order_By>;
  user_account_id?: Maybe<Order_By>;
  user_role_id?: Maybe<Order_By>;
};

/** select columns of table "user_profiles" */
export enum User_Profiles_Select_Column {
  /** column name */
  AppraisalsCount = 'appraisals_count',
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  DefaultRole = 'default_role',
  /** column name */
  Email = 'email',
  /** column name */
  Enabled = 'enabled',
  /** column name */
  FirstName = 'first_name',
  /** column name */
  FullName = 'full_name',
  /** column name */
  Id = 'id',
  /** column name */
  LastActiveAt = 'last_active_at',
  /** column name */
  LastName = 'last_name',
  /** column name */
  LocationAddress = 'location_address',
  /** column name */
  LocationCity = 'location_city',
  /** column name */
  LocationComponents = 'location_components',
  /** column name */
  LocationCounty = 'location_county',
  /** column name */
  LocationGeography = 'location_geography',
  /** column name */
  LocationPostalCode = 'location_postal_code',
  /** column name */
  LocationState = 'location_state',
  /** column name */
  Notes = 'notes',
  /** column name */
  OrganizationId = 'organization_id',
  /** column name */
  PhoneNumber = 'phone_number',
  /** column name */
  UpdatedAt = 'updated_at',
  /** column name */
  Url = 'url',
  /** column name */
  UserAccountId = 'user_account_id',
  /** column name */
  UserRoleId = 'user_role_id',
}

/** aggregate stddev on columns */
export type User_Profiles_Stddev_Fields = {
  __typename?: 'user_profiles_stddev_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type User_Profiles_Stddev_Pop_Fields = {
  __typename?: 'user_profiles_stddev_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type User_Profiles_Stddev_Samp_Fields = {
  __typename?: 'user_profiles_stddev_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "user_profiles" */
export type User_Profiles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Profiles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Profiles_Stream_Cursor_Value_Input = {
  appraisals_count?: Maybe<Scalars['Int']>;
  created_at?: Maybe<Scalars['timestamptz']>;
  default_role?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  enabled?: Maybe<Scalars['Boolean']>;
  first_name?: Maybe<Scalars['String']>;
  full_name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  last_active_at?: Maybe<Scalars['timestamptz']>;
  last_name?: Maybe<Scalars['String']>;
  location_address?: Maybe<Scalars['String']>;
  location_city?: Maybe<Scalars['String']>;
  location_components?: Maybe<Scalars['jsonb']>;
  location_county?: Maybe<Scalars['String']>;
  location_geography?: Maybe<Scalars['geography']>;
  location_postal_code?: Maybe<Scalars['String']>;
  location_state?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  organization_id?: Maybe<Scalars['uuid']>;
  phone_number?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
  url?: Maybe<Scalars['String']>;
  user_account_id?: Maybe<Scalars['uuid']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate sum on columns */
export type User_Profiles_Sum_Fields = {
  __typename?: 'user_profiles_sum_fields';
  appraisals_count?: Maybe<Scalars['Int']>;
  user_role_id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type User_Profiles_Var_Pop_Fields = {
  __typename?: 'user_profiles_var_pop_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type User_Profiles_Var_Samp_Fields = {
  __typename?: 'user_profiles_var_samp_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type User_Profiles_Variance_Fields = {
  __typename?: 'user_profiles_variance_fields';
  appraisals_count?: Maybe<Scalars['Float']>;
  user_role_id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "user_role" */
export type User_Role = {
  __typename?: 'user_role';
  created_at: Scalars['timestamptz'];
  description: Scalars['String'];
  display: Scalars['String'];
  id: Scalars['Int'];
  role: Scalars['String'];
  updated_at: Scalars['timestamptz'];
  /** An array relationship */
  user_accounts: Array<User_Account>;
  /** An aggregate relationship */
  user_accounts_aggregate: User_Account_Aggregate;
};

/** columns and relationships of "user_role" */
export type User_RoleUser_AccountsArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

/** columns and relationships of "user_role" */
export type User_RoleUser_Accounts_AggregateArgs = {
  distinct_on?: Maybe<Array<User_Account_Select_Column>>;
  limit?: Maybe<Scalars['Int']>;
  offset?: Maybe<Scalars['Int']>;
  order_by?: Maybe<Array<User_Account_Order_By>>;
  where?: Maybe<User_Account_Bool_Exp>;
};

/** aggregated selection of "user_role" */
export type User_Role_Aggregate = {
  __typename?: 'user_role_aggregate';
  aggregate?: Maybe<User_Role_Aggregate_Fields>;
  nodes: Array<User_Role>;
};

/** aggregate fields of "user_role" */
export type User_Role_Aggregate_Fields = {
  __typename?: 'user_role_aggregate_fields';
  avg?: Maybe<User_Role_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<User_Role_Max_Fields>;
  min?: Maybe<User_Role_Min_Fields>;
  stddev?: Maybe<User_Role_Stddev_Fields>;
  stddev_pop?: Maybe<User_Role_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<User_Role_Stddev_Samp_Fields>;
  sum?: Maybe<User_Role_Sum_Fields>;
  var_pop?: Maybe<User_Role_Var_Pop_Fields>;
  var_samp?: Maybe<User_Role_Var_Samp_Fields>;
  variance?: Maybe<User_Role_Variance_Fields>;
};

/** aggregate fields of "user_role" */
export type User_Role_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Role_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type User_Role_Avg_Fields = {
  __typename?: 'user_role_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "user_role". All fields are combined with a logical 'AND'. */
export type User_Role_Bool_Exp = {
  _and?: Maybe<Array<User_Role_Bool_Exp>>;
  _not?: Maybe<User_Role_Bool_Exp>;
  _or?: Maybe<Array<User_Role_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  display?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  role?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_accounts?: Maybe<User_Account_Bool_Exp>;
};

/** aggregate max on columns */
export type User_Role_Max_Fields = {
  __typename?: 'user_role_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  display?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type User_Role_Min_Fields = {
  __typename?: 'user_role_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  display?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "user_role". */
export type User_Role_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  display?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
  user_accounts_aggregate?: Maybe<User_Account_Aggregate_Order_By>;
};

/** select columns of table "user_role" */
export enum User_Role_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Display = 'display',
  /** column name */
  Id = 'id',
  /** column name */
  Role = 'role',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type User_Role_Stddev_Fields = {
  __typename?: 'user_role_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type User_Role_Stddev_Pop_Fields = {
  __typename?: 'user_role_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type User_Role_Stddev_Samp_Fields = {
  __typename?: 'user_role_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "user_role" */
export type User_Role_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Role_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Role_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  display?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type User_Role_Sum_Fields = {
  __typename?: 'user_role_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type User_Role_Var_Pop_Fields = {
  __typename?: 'user_role_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type User_Role_Var_Samp_Fields = {
  __typename?: 'user_role_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type User_Role_Variance_Fields = {
  __typename?: 'user_role_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "user_roles" */
export type User_Roles = {
  __typename?: 'user_roles';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  display?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregated selection of "user_roles" */
export type User_Roles_Aggregate = {
  __typename?: 'user_roles_aggregate';
  aggregate?: Maybe<User_Roles_Aggregate_Fields>;
  nodes: Array<User_Roles>;
};

/** aggregate fields of "user_roles" */
export type User_Roles_Aggregate_Fields = {
  __typename?: 'user_roles_aggregate_fields';
  avg?: Maybe<User_Roles_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<User_Roles_Max_Fields>;
  min?: Maybe<User_Roles_Min_Fields>;
  stddev?: Maybe<User_Roles_Stddev_Fields>;
  stddev_pop?: Maybe<User_Roles_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<User_Roles_Stddev_Samp_Fields>;
  sum?: Maybe<User_Roles_Sum_Fields>;
  var_pop?: Maybe<User_Roles_Var_Pop_Fields>;
  var_samp?: Maybe<User_Roles_Var_Samp_Fields>;
  variance?: Maybe<User_Roles_Variance_Fields>;
};

/** aggregate fields of "user_roles" */
export type User_Roles_Aggregate_FieldsCountArgs = {
  columns?: Maybe<Array<User_Roles_Select_Column>>;
  distinct?: Maybe<Scalars['Boolean']>;
};

/** aggregate avg on columns */
export type User_Roles_Avg_Fields = {
  __typename?: 'user_roles_avg_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Boolean expression to filter rows from the table "user_roles". All fields are combined with a logical 'AND'. */
export type User_Roles_Bool_Exp = {
  _and?: Maybe<Array<User_Roles_Bool_Exp>>;
  _not?: Maybe<User_Roles_Bool_Exp>;
  _or?: Maybe<Array<User_Roles_Bool_Exp>>;
  created_at?: Maybe<Timestamptz_Comparison_Exp>;
  description?: Maybe<String_Comparison_Exp>;
  display?: Maybe<String_Comparison_Exp>;
  id?: Maybe<Int_Comparison_Exp>;
  role?: Maybe<String_Comparison_Exp>;
  updated_at?: Maybe<Timestamptz_Comparison_Exp>;
};

/** aggregate max on columns */
export type User_Roles_Max_Fields = {
  __typename?: 'user_roles_max_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  display?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate min on columns */
export type User_Roles_Min_Fields = {
  __typename?: 'user_roles_min_fields';
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  display?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** Ordering options when selecting data from "user_roles". */
export type User_Roles_Order_By = {
  created_at?: Maybe<Order_By>;
  description?: Maybe<Order_By>;
  display?: Maybe<Order_By>;
  id?: Maybe<Order_By>;
  role?: Maybe<Order_By>;
  updated_at?: Maybe<Order_By>;
};

/** select columns of table "user_roles" */
export enum User_Roles_Select_Column {
  /** column name */
  CreatedAt = 'created_at',
  /** column name */
  Description = 'description',
  /** column name */
  Display = 'display',
  /** column name */
  Id = 'id',
  /** column name */
  Role = 'role',
  /** column name */
  UpdatedAt = 'updated_at',
}

/** aggregate stddev on columns */
export type User_Roles_Stddev_Fields = {
  __typename?: 'user_roles_stddev_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_pop on columns */
export type User_Roles_Stddev_Pop_Fields = {
  __typename?: 'user_roles_stddev_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate stddev_samp on columns */
export type User_Roles_Stddev_Samp_Fields = {
  __typename?: 'user_roles_stddev_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** Streaming cursor of the table "user_roles" */
export type User_Roles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Roles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Roles_Stream_Cursor_Value_Input = {
  created_at?: Maybe<Scalars['timestamptz']>;
  description?: Maybe<Scalars['String']>;
  display?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  role?: Maybe<Scalars['String']>;
  updated_at?: Maybe<Scalars['timestamptz']>;
};

/** aggregate sum on columns */
export type User_Roles_Sum_Fields = {
  __typename?: 'user_roles_sum_fields';
  id?: Maybe<Scalars['Int']>;
};

/** aggregate var_pop on columns */
export type User_Roles_Var_Pop_Fields = {
  __typename?: 'user_roles_var_pop_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate var_samp on columns */
export type User_Roles_Var_Samp_Fields = {
  __typename?: 'user_roles_var_samp_fields';
  id?: Maybe<Scalars['Float']>;
};

/** aggregate variance on columns */
export type User_Roles_Variance_Fields = {
  __typename?: 'user_roles_variance_fields';
  id?: Maybe<Scalars['Float']>;
};

/** columns and relationships of "user_session" */
export type User_Session = {
  __typename?: 'user_session';
  /** An object relationship */
  organization: Organization;
  sign_out_at?: Maybe<Scalars['timestamptz']>;
  /** An object relationship */
  user_account: User_Account;
};

/** Boolean expression to filter rows from the table "user_session". All fields are combined with a logical 'AND'. */
export type User_Session_Bool_Exp = {
  _and?: Maybe<Array<User_Session_Bool_Exp>>;
  _not?: Maybe<User_Session_Bool_Exp>;
  _or?: Maybe<Array<User_Session_Bool_Exp>>;
  organization?: Maybe<Organization_Bool_Exp>;
  sign_out_at?: Maybe<Timestamptz_Comparison_Exp>;
  user_account?: Maybe<User_Account_Bool_Exp>;
};

/** Ordering options when selecting data from "user_session". */
export type User_Session_Order_By = {
  organization?: Maybe<Organization_Order_By>;
  sign_out_at?: Maybe<Order_By>;
  user_account?: Maybe<User_Account_Order_By>;
};

/** select columns of table "user_session" */
export enum User_Session_Select_Column {
  /** column name */
  SignOutAt = 'sign_out_at',
}

/** Streaming cursor of the table "user_session" */
export type User_Session_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: User_Session_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: Maybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type User_Session_Stream_Cursor_Value_Input = {
  sign_out_at?: Maybe<Scalars['timestamptz']>;
};

/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
  _eq?: Maybe<Scalars['uuid']>;
  _gt?: Maybe<Scalars['uuid']>;
  _gte?: Maybe<Scalars['uuid']>;
  _in?: Maybe<Array<Scalars['uuid']>>;
  _is_null?: Maybe<Scalars['Boolean']>;
  _lt?: Maybe<Scalars['uuid']>;
  _lte?: Maybe<Scalars['uuid']>;
  _neq?: Maybe<Scalars['uuid']>;
  _nin?: Maybe<Array<Scalars['uuid']>>;
};
